{"version":3,"file":"treeview.min.js","sources":["../src/treeview.js"],"sourcesContent":["define([\n    'jquery',\n    'core/yui',\n    'core/str',\n\n], function ($, Y, Str) {\n    `use strict`;\n\n    return {\n        init: function (datas, options, target) {\n            let self = this;\n\n            this.root = document.createElement(\"div\");\n            this.root.className = \"treeview\";\n            let t = this;\n\n\n\n            var defaultOptions = {\n                showAlwaysCheckBox: true,\n                fold: true,\n                openAllFold:false\n            }\n\n            options = Object.assign(defaultOptions, options);\n\n\n            // GROUP EVENTS ---------------------\n\n            function groupOpen() {\n                $(this).parent().find(\">.group\").slideDown(\"fast\");\n            }\n            function groupClose() {\n                $(this).parent().find(\">.group\").slideUp(\"fast\");\n            }\n            function groupToggle() {\n                $(this).toggleClass(\"rotated\");\n                $(this).parent().find(\">.group\").slideToggle(\"fast\");\n            }\n\n\n\n            // ITEM EVENTS --------------------\n            function changeCheckState(value, allChildCheck) {\n                var c = this.checked;\n\n                if (value == null || value instanceof MouseEvent) { // TOGGLE CHECK\n                    if (c == 0) c = 1;\n                    else if (c == 1) c = 0;\n                    else if (c == 2) c = 1;\n                } else {\n                    c = value;\n                }\n                this.checked = c;\n                setCheckState.bind(this)(c);\n\n\n                if (c != 2)\n                    checkAllChilds.bind(this)(c);\n                checkControlParents.bind(this)();\n            }\n\n            function checkAllChilds(value) {\n\n                var $group = $(this).parent(\".group\");\n                $group.find(\".item\").each(function (index, el) {\n                    setCheckState.bind(el)(value)\n                })\n\n            }\n\n            function checkControlParents() {\n                var $parents = $(this).parents(\".treeview .group\");\n\n                for (var index = 1 ; index < $parents.length ; index++) {\n                    var el = $parents[index];\n                    item = $(el).find(\">.item\").get(0);\n                    $children = $(el).find(\".group .item\");\n                    var all1 = true;\n                    var all0 = true;\n                    for (var i = 0; i < $children.length; i++) {\n                        if ($children[i].checked != 1) all1 = false;\n                        if ($children[i].checked != 0) all0 = false;\n                    }\n                    if (all1) setCheckState.bind(item)(1);\n                    else if (all0) setCheckState.bind(item)(0);\n                    else setCheckState.bind(item)(2);\n                }\n            }\n\n            function setCheckState(value) {\n\n                this.checked = value\n                this.setAttribute(\"check-value\", value)\n                if (value == 0) {\n                    $(this).find(\">[check-icon]\")[0].className = \"fa fa-square-o\"; //Empty\n                }\n                if (value == 1) {\n                    $(this).find(\">[check-icon]\")[0].className = \"fa fa-check-square-o\"; //Half\n                }\n                if (value == 2) {\n                    $(this).find(\">[check-icon]\")[0].className = \"fa fa-square\";  // Full\n                }\n            }\n\n            /* FIRST CREATION */\n\n            function createTreeViewReq(parentNode, datas, options) {\n\n\n                //console.log(\"datas len:\",datas.length, \"datas:\",datas);\n                for (var i = 0; i < datas.length; i++) {\n                    if (datas[i] != null) {\n                        //console.log(\"datas i:\", i, \"data:\", datas)\n                        var data = datas[i];\n                        var item = createSingleItem(data);\n                        parentNode.appendChild(item);\n                        if (\"children\" in data && data.children.length > 0) {\n                            createTreeViewReq(item, data.children, options)\n                        }\n                    }\n                }\n            }\n\n            function createSingleItem(data) {\n                var group = document.createElement(\"p\");\n                group.className = \"group\"\n                if (\"className\" in options)\n                    group.className += options.className;\n\n                if (\"fold\" in options) {\n                    var foldButton = document.createElement(\"i\");\n                    foldButton.className = \"fa fa-caret-left fold-btn\";\n                    foldButton.setAttribute(\"fold-button\", 1);\n\n                    foldButton.onclick = groupToggle.bind(foldButton);\n\n                    foldButton.isOpened = options.fold;\n\n                    group.appendChild(foldButton)\n                }\n\n\n                // ALERT ADD ICON\n                var item = document.createElement(\"span\");\n                item.className = \"item\";\n                item.innerHTML = data.text;\n                item.data = data;\n                for (var keys = Object.keys(data), i = 0; i < keys.length ; i++) {\n                    item.setAttribute(\"data-\" + keys[i], data[keys[i]]);\n                }\n                if (\"checked\" in data || options.showAlwaysCheckBox == true) {\n                    var checked = document.createElement(\"i\");\n                    checked.setAttribute(\"check-icon\", \"1\");\n                    checked.className = \"fa \";\n\n                    item.prepend(checked);\n\n                    if (\"checked\" in data && data.checked) {\n                        setCheckState.bind(item)(data.checked ? 1 : 0);\n                    } else {\n                        setCheckState.bind(item)(0);\n                    }\n\n                }\n\n                item.onclick = changeCheckState.bind(item);\n\n                group.appendChild(item)\n                return group;\n            }\n\n\n\n\n            this.update = function () {\n                $(t.root).find(\".group\").each(function (index, el) {\n                    if ($(el).find(\".group\").length > 0) {\n                        $(el).find(\">[fold-button]\").css(\"visibility\", \"visible\");\n                        if(index == 0) {\n                           $(el).find('.fa-caret-left.fold-btn').first().addClass('rotated');\n                           $(el).find('p.group').each(function() {\n                            $( this ).attr('style','display: block;');\n                            });\n                        }\n                    } else {\n                        $(el).find(\">[fold-button]\").css(\"visibility\", \"hidden\");\n                    }\n                    checkControlParents.bind($(el).find(\">.item\"))();\n                })\n            }\n\n            this.load = function (datas) {\n                $(this.root).empty();\n                createTreeViewReq(this.root, datas, options);\n                this.update();\n            }\n            this.save = function (type, node) {\n                if (type == null) type = \"tree\";\n\n\n                if (type == \"tree\") {\n                    if (node == null) {\n                        var data = [];\n                        var $children = $(this.root).find(\">.group\");\n                        for (var i = 0; i < $children.length; i++) {\n                            var child = this.save(\"tree\", $children[i])\n                            data.push(child)\n                        }\n                        return data;\n                    } else {\n                        var data = saveSingle($(node).find(\">.item\")[0]);\n                        data.children = []\n                        var $children = $(node).find(\">.group\");\n\n                        for (var i = 0; i < $children.length; i++) {\n                            var child = this.save(\"tree\", $children[i])\n                            data.children.push(child);\n                        }\n                        return data;\n                    }\n\n                }\n\n                if (type == \"list\") {\n                    var data = [];\n                    var $items = $(this.root).find(\".item\");\n                    for (var i = 0; i < $items.length; i++) {\n                        data.push(saveSingle($items[i]));\n                    }\n                    return data;\n                }\n            }\n            function saveSingle(el) {\n                if (el == null) el = this;\n                ret = Object.assign(\n                    { children: [] },\n                    el.data,\n                    { checked: el.checked });\n\n                return ret;\n            }\n\n            this.load(datas);\n            this.openAllFold = function (item) {\n                if (item == null) item = this.root;\n                $(item).find(\"[fold-button]\").each(function (index, el) {\n\n                    groupOpen.bind(this)();\n                })\n            }\n            this.closeAllFold = function (item) {\n                if (item == null) item = this.root;\n                $(item).find(\"[fold-button]\").each(function (index, el) {\n                    if(index != 0) {\n\n                        groupClose.bind(this)();\n                    }\n                })\n            }\n\n            if (options.openAllFold) {\n                this.openAllFold();\n            } else {\n                this.closeAllFold();\n            }\n\n            $(target).html(this.root);\n\n            return this;\n        },\n\n\n\n    }\n});\n"],"names":["define","$","Y","Str","init","datas","options","target","root","document","createElement","className","t","this","groupOpen","parent","find","slideDown","groupClose","slideUp","groupToggle","toggleClass","slideToggle","changeCheckState","value","allChildCheck","c","checked","MouseEvent","setCheckState","bind","checkAllChilds","checkControlParents","each","index","el","$parents","parents","length","item","get","$children","all1","all0","i","setAttribute","createTreeViewReq","parentNode","data","createSingleItem","appendChild","children","group","foldButton","onclick","isOpened","fold","innerHTML","text","keys","Object","showAlwaysCheckBox","prepend","saveSingle","ret","assign","openAllFold","update","css","first","addClass","attr","load","empty","save","type","node","child","push","$items","closeAllFold","html"],"mappings":"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"}