{"version":3,"file":"popup-copy-questions.min.js","sources":["../src/popup-copy-questions.js"],"sourcesContent":["define([\n    'jquery',\n    'core/str',\n    'core/modal_factory',\n    'core/modal_events',\n    'core/ajax',\n    'core/templates',\n    'core/notification',\n    'core/fragment'\n\n], function ($, Str, ModalFactory, ModalEvents, Ajax, Templates,\n    Notification, Fragment) {\n    `use strict`;\n\n    let uniqueid;\n    let cmid;\n\n    let SELECTORS = {\n        buttonEvent: '.addquestionfromoer'\n    };\n\n    function updateCountSelected() {\n        let form = $('#copy_from_my_courses_' + uniqueid);\n        let counter = 0;\n\n        form.find('.checkbox-select-question').each(function (index) {\n            if ($(this).prop('checked')) {\n                counter++;\n            }\n        });\n\n        $('#checked-question-counter-num-' + uniqueid).html(counter);\n    }\n\n    // Render loading.\n    function loadingIcon(target) {\n        Templates.render('community_oer/loading', {}).done(function (html, js) {\n            Templates.replaceNodeContents(target, html, js);\n        }).fail(Notification.exception);\n    }\n\n    return {\n        init: function (currentcourseid, currentcoursecontext) {\n\n            // Get the content of the modal.\n            const getBody = function (coursemoduleid) {\n                uniqueid = Date.now();\n                cmid = coursemoduleid;\n\n                let params = { cmid: coursemoduleid, uniqueid: uniqueid };\n                return Fragment.loadFragment('community_oer', 'copy_questions_from_catalog', currentcoursecontext, params);\n            };\n\n            $(SELECTORS.buttonEvent).on(\"click\", function (e) {\n                e.preventDefault();\n\n                let cmid = $(this).data('cmid');\n\n                Str.get_strings([\n                    { key: 'copyquestionsfromoer', component: 'community_oer' },\n                    { key: 'qshare', component: 'community_oer' },\n                ]).done(function (strings) {\n                    var modalPromise = ModalFactory.create({\n                        type: ModalFactory.types.SAVE_CANCEL,\n                        title: strings[0],\n                        body: getBody(cmid)\n                    });\n\n                    $.when(modalPromise).then(function (fmodal) {\n\n                        fmodal.setSaveButtonText(strings[1]);\n\n                        // Handle save event.\n                        fmodal.getRoot().on(ModalEvents.save, function (e) {\n                            e.preventDefault();\n\n                            let selected = JSON.parse($('#questions_selected').val());\n\n                            if (selected.length) {\n\n                                // Close popup.\n                                fmodal.destroy();\n\n                                // Success popup.\n                                Str.get_strings([\n                                    { key: 'popupmessagesuccesstitle', component: 'community_oer' },\n                                    { key: 'popupmessagesuccesscontent', component: 'community_oer' },\n                                    { key: 'popupbuttondisabled', component: 'community_oer' },\n                                    { key: 'popupbuttonenabled', component: 'community_oer' }\n                                ]).done(function (strings) {\n\n                                    var modalPromise = ModalFactory.create({\n                                        type: ModalFactory.types.ALERT,\n                                        title: strings[0],\n                                        body: strings[1]\n                                    });\n\n                                    $.when(modalPromise).then(function (fmodal) {\n                                        fmodal.show();\n                                        let root = fmodal.getRoot();\n\n                                        // Refresh page.\n                                        root.on(ModalEvents.cancel, function() {\n                                            location.reload();\n                                        })\n\n                                        // When shown popup.\n                                        root.on(ModalEvents.shown, function() {\n                                            root.find('*[data-action=\"cancel\"]').text(strings[2]);\n                                            root.find('*[data-action=\"cancel\"]').prop('disabled', true);\n\n                                            Ajax.call([{\n                                                methodname: 'community_sharequestion_save_questions_to_quiz',\n                                                args: {\n                                                    cmid: cmid,\n                                                    qids: JSON.stringify(selected)\n                                                },\n                                                done: function (response) {\n                                                    let data = JSON.parse(response);\n\n                                                    root.find('*[data-action=\"cancel\"]').text(strings[3]);\n                                                    root.find('*[data-action=\"cancel\"]').prop('disabled', false);\n                                                },\n                                                fail: Notification.exception\n                                            }]);\n\n                                        });\n\n                                        return fmodal;\n                                    }).fail(Notification.exception);\n                                });\n\n                            } else {\n                                // Fail popup.\n                                Str.get_strings([\n                                    { key: 'popupmessagefailtitle', component: 'community_oer' },\n                                    { key: 'popupmessagefailcontent', component: 'community_oer' }\n                                ]).done(function (strings) {\n\n                                    var modalPromise = ModalFactory.create({\n                                        type: ModalFactory.types.ALERT,\n                                        title: strings[0],\n                                        body: strings[1]\n                                    });\n\n                                    $.when(modalPromise).then(function (fmodal) {\n                                        fmodal.show();\n                                        return fmodal;\n                                    }).fail(Notification.exception);\n                                });\n                            }\n\n                        });\n\n                        fmodal.getModal().addClass('modal-xlg');\n                        fmodal.getModal().addClass('popup-copy-questions-modal import-questions-modal');\n                        var root = fmodal.getRoot();\n                        root.on(ModalEvents.shown, function () {\n\n                        });\n\n                        root.on(ModalEvents.hidden, function () {\n                            fmodal.destroy();\n                        });\n\n                        return fmodal;\n                    }).done(function (modal) {\n                        modal.show();\n                    }).fail(Notification.exception);\n                });\n\n            })\n        },\n    }\n});\n"],"names":["define","$","Str","ModalFactory","ModalEvents","Ajax","Templates","Notification","Fragment","uniqueid","SELECTORS","init","currentcourseid","currentcoursecontext","getBody","coursemoduleid","Date","now","params","cmid","loadFragment","on","e","preventDefault","this","data","get_strings","key","component","done","strings","modalPromise","create","type","types","SAVE_CANCEL","title","body","when","then","fmodal","setSaveButtonText","getRoot","save","selected","JSON","parse","val","length","destroy","ALERT","show","root","cancel","location","reload","shown","find","text","prop","call","methodname","args","qids","stringify","response","fail","exception","getModal","addClass","hidden","modal"],"mappings":"AAAAA,4CAAO,CACH,SACA,WACA,qBACA,oBACA,YACA,iBACA,oBACA,kBAED,SAAUC,EAAGC,IAAKC,aAAcC,YAAaC,KAAMC,UAClDC,aAAcC,cAGVC,SAGAC,sBACa,4BAuBV,CACHC,KAAM,SAAUC,gBAAiBC,0BAGvBC,QAAU,SAAUC,gBACtBN,SAAWO,KAAKC,MACTF,mBAEHG,OAAS,CAAEC,KAAMJ,eAAgBN,SAAUA,iBACxCD,SAASY,aAAa,gBAAiB,8BAA+BP,qBAAsBK,SAGvGjB,EAAES,uBAAuBW,GAAG,SAAS,SAAUC,GAC3CA,EAAEC,qBAEEJ,KAAOlB,EAAEuB,MAAMC,KAAK,QAExBvB,IAAIwB,YAAY,CACZ,CAAEC,IAAK,uBAAwBC,UAAW,iBAC1C,CAAED,IAAK,SAAUC,UAAW,mBAC7BC,MAAK,SAAUC,aACVC,aAAe5B,aAAa6B,OAAO,CACnCC,KAAM9B,aAAa+B,MAAMC,YACzBC,MAAON,QAAQ,GACfO,KAAMvB,QAAQK,QAGlBlB,EAAEqC,KAAKP,cAAcQ,MAAK,SAAUC,QAEhCA,OAAOC,kBAAkBX,QAAQ,IAGjCU,OAAOE,UAAUrB,GAAGjB,YAAYuC,MAAM,SAAUrB,GAC5CA,EAAEC,qBAEEqB,SAAWC,KAAKC,MAAM7C,EAAE,uBAAuB8C,OAE/CH,SAASI,QAGTR,OAAOS,UAGP/C,IAAIwB,YAAY,CACZ,CAAEC,IAAK,2BAA4BC,UAAW,iBAC9C,CAAED,IAAK,6BAA8BC,UAAW,iBAChD,CAAED,IAAK,sBAAuBC,UAAW,iBACzC,CAAED,IAAK,qBAAsBC,UAAW,mBACzCC,MAAK,SAAUC,aAEVC,aAAe5B,aAAa6B,OAAO,CACnCC,KAAM9B,aAAa+B,MAAMgB,MACzBd,MAAON,QAAQ,GACfO,KAAMP,QAAQ,KAGlB7B,EAAEqC,KAAKP,cAAcQ,MAAK,SAAUC,QAChCA,OAAOW,WACHC,KAAOZ,OAAOE,iBAGlBU,KAAK/B,GAAGjB,YAAYiD,QAAQ,WACxBC,SAASC,YAIbH,KAAK/B,GAAGjB,YAAYoD,OAAO,WACvBJ,KAAKK,KAAK,2BAA2BC,KAAK5B,QAAQ,IAClDsB,KAAKK,KAAK,2BAA2BE,KAAK,YAAY,GAEtDtD,KAAKuD,KAAK,CAAC,CACPC,WAAY,iDACZC,KAAM,CACF3C,KAAMA,KACN4C,KAAMlB,KAAKmB,UAAUpB,WAEzBf,KAAM,SAAUoC,UACDpB,KAAKC,MAAMmB,UAEtBb,KAAKK,KAAK,2BAA2BC,KAAK5B,QAAQ,IAClDsB,KAAKK,KAAK,2BAA2BE,KAAK,YAAY,IAE1DO,KAAM3D,aAAa4D,gBAKpB3B,UACR0B,KAAK3D,aAAa4D,eAKzBjE,IAAIwB,YAAY,CACZ,CAAEC,IAAK,wBAAyBC,UAAW,iBAC3C,CAAED,IAAK,0BAA2BC,UAAW,mBAC9CC,MAAK,SAAUC,aAEVC,aAAe5B,aAAa6B,OAAO,CACnCC,KAAM9B,aAAa+B,MAAMgB,MACzBd,MAAON,QAAQ,GACfO,KAAMP,QAAQ,KAGlB7B,EAAEqC,KAAKP,cAAcQ,MAAK,SAAUC,eAChCA,OAAOW,OACAX,UACR0B,KAAK3D,aAAa4D,iBAMjC3B,OAAO4B,WAAWC,SAAS,aAC3B7B,OAAO4B,WAAWC,SAAS,yDACvBjB,KAAOZ,OAAOE,iBAClBU,KAAK/B,GAAGjB,YAAYoD,OAAO,eAI3BJ,KAAK/B,GAAGjB,YAAYkE,QAAQ,WACxB9B,OAAOS,aAGJT,UACRX,MAAK,SAAU0C,OACdA,MAAMpB,UACPe,KAAK3D,aAAa4D,kBAMxC"}