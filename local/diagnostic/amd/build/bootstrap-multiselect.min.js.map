{"version":3,"file":"bootstrap-multiselect.min.js","sources":["../src/bootstrap-multiselect.js"],"sourcesContent":["/**\n * Bootstrap Multiselect (http://davidstutz.de/bootstrap-multiselect/)\n *\n * Apache License, Version 2.0:\n * Copyright (c) 2012 - 2021 David Stutz\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a\n * copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n *\n * BSD 3-Clause License:\n * Copyright (c) 2012 - 2021 David Stutz\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *    - Redistributions of source code must retain the above copyright notice,\n *      this list of conditions and the following disclaimer.\n *    - Redistributions in binary form must reproduce the above copyright notice,\n *      this list of conditions and the following disclaimer in the documentation\n *      and/or other materials provided with the distribution.\n *    - Neither the name of David Stutz nor the names of its contributors may be\n *      used to endorse or promote products derived from this software without\n *      specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n(function (root, factory) {\n    // check to see if 'knockout' AMD module is specified if using requirejs\n    if (typeof define === 'function' && define.amd) {\n\n        // AMD. Register as an anonymous module.\n        define(['jquery'], factory);\n    } else {\n        // Browser globals\n        factory(root.jQuery, root.ko);\n    }\n})(this, function ($, ko) {\n    \"use strict\";// jshint ;_;\n\n    if (typeof ko !== 'undefined' && ko.bindingHandlers && !ko.bindingHandlers.multiselect) {\n        ko.bindingHandlers.multiselect = {\n            after: ['options', 'value', 'selectedOptions', 'enable', 'disable'],\n\n            init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {\n                var $element = $(element);\n                var config = ko.toJS(valueAccessor());\n\n                $element.multiselect(config);\n\n                if (allBindings.has('options')) {\n                    var options = allBindings.get('options');\n                    if (ko.isObservable(options)) {\n                        ko.computed({\n                            read: function () {\n                                options();\n                                setTimeout(function () {\n                                    var ms = $element.data('multiselect');\n                                    if (ms)\n                                        ms.updateOriginalOptions();//Not sure how beneficial this is.\n                                    $element.multiselect('rebuild');\n                                }, 1);\n                            },\n                            disposeWhenNodeIsRemoved: element\n                        });\n                    }\n                }\n\n                //value and selectedOptions are two-way, so these will be triggered even by our own actions.\n                //It needs some way to tell if they are triggered because of us or because of outside change.\n                //It doesn't loop but it's a waste of processing.\n                if (allBindings.has('value')) {\n                    var value = allBindings.get('value');\n                    if (ko.isObservable(value)) {\n                        ko.computed({\n                            read: function () {\n                                value();\n                                setTimeout(function () {\n                                    $element.multiselect('refresh');\n                                }, 1);\n                            },\n                            disposeWhenNodeIsRemoved: element\n                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\n                    }\n                }\n\n                //Switched from arrayChange subscription to general subscription using 'refresh'.\n                //Not sure performance is any better using 'select' and 'deselect'.\n                if (allBindings.has('selectedOptions')) {\n                    var selectedOptions = allBindings.get('selectedOptions');\n                    if (ko.isObservable(selectedOptions)) {\n                        ko.computed({\n                            read: function () {\n                                selectedOptions();\n                                setTimeout(function () {\n                                    $element.multiselect('refresh');\n                                }, 1);\n                            },\n                            disposeWhenNodeIsRemoved: element\n                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\n                    }\n                }\n\n                var setEnabled = function (enable) {\n                    setTimeout(function () {\n                        if (enable)\n                            $element.multiselect('enable');\n                        else\n                            $element.multiselect('disable');\n                    });\n                };\n\n                if (allBindings.has('enable')) {\n                    var enable = allBindings.get('enable');\n                    if (ko.isObservable(enable)) {\n                        ko.computed({\n                            read: function () {\n                                setEnabled(enable());\n                            },\n                            disposeWhenNodeIsRemoved: element\n                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\n                    } else {\n                        setEnabled(enable);\n                    }\n                }\n\n                if (allBindings.has('disable')) {\n                    var disable = allBindings.get('disable');\n                    if (ko.isObservable(disable)) {\n                        ko.computed({\n                            read: function () {\n                                setEnabled(!disable());\n                            },\n                            disposeWhenNodeIsRemoved: element\n                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\n                    } else {\n                        setEnabled(!disable);\n                    }\n                }\n\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\n                    $element.multiselect('destroy');\n                });\n            },\n\n            update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {\n                var $element = $(element);\n                var config = ko.toJS(valueAccessor());\n\n                $element.multiselect('setOptions', config);\n                $element.multiselect('rebuild');\n            }\n        };\n    }\n\n    function forEach(array, callback) {\n        for (var index = 0; index < array.length; ++index) {\n            callback(array[index], index);\n        }\n    }\n\n    /**\n     * Constructor to create a new multiselect using the given select.\n     *\n     * @param {jQuery} select\n     * @param {Object} options\n     * @returns {Multiselect}\n     */\n    function Multiselect(select, options) {\n\n        this.$select = $(select);\n        this.options = this.mergeOptions($.extend({}, options, this.$select.data()));\n\n        // Placeholder via data attributes\n        if (this.$select.attr(\"data-placeholder\")) {\n            this.options.nonSelectedText = this.$select.data(\"placeholder\");\n        }\n\n        // Initialization.\n        // We have to clone to create a new reference.\n        this.originalOptions = this.$select.clone()[0].options;\n        this.query = '';\n        this.searchTimeout = null;\n        this.lastToggledInput = null;\n\n        this.options.multiple = this.$select.attr('multiple') === \"multiple\";\n        this.options.onChange = $.proxy(this.options.onChange, this);\n        this.options.onSelectAll = $.proxy(this.options.onSelectAll, this);\n        this.options.onDeselectAll = $.proxy(this.options.onDeselectAll, this);\n        this.options.onDropdownShow = $.proxy(this.options.onDropdownShow, this);\n        this.options.onDropdownHide = $.proxy(this.options.onDropdownHide, this);\n        this.options.onDropdownShown = $.proxy(this.options.onDropdownShown, this);\n        this.options.onDropdownHidden = $.proxy(this.options.onDropdownHidden, this);\n        this.options.onInitialized = $.proxy(this.options.onInitialized, this);\n        this.options.onFiltering = $.proxy(this.options.onFiltering, this);\n\n        // Build select all if enabled.\n        this.buildContainer();\n        this.buildButton();\n        this.buildDropdown();\n        this.buildReset();\n        this.buildSelectAll();\n        this.buildDropdownOptions();\n        this.buildFilter();\n        this.buildSubmit();\n        this.updateButtonText();\n        this.updateSelectAll(true);\n\n        if (this.options.enableClickableOptGroups && this.options.multiple) {\n            this.updateOptGroups();\n        }\n\n        this.options.wasDisabled = this.$select.prop('disabled');\n        if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {\n            this.disable();\n        }\n\n        this.$select.wrap('<span class=\"multiselect-native-select\" />').after(this.$container);\n        this.$select.prop('tabindex', '-1');\n\n        if (this.options.widthSynchronizationMode !== 'never') {\n            this.synchronizeButtonAndPopupWidth();\n        }\n\n        this.options.onInitialized(this.$select, this.$container);\n    }\n\n    Multiselect.prototype = {\n\n        defaults: {\n            /**\n             * Default text function will either print 'None selected' in case no\n             * option is selected or a list of the selected options up to a length\n             * of 3 selected options.\n             *\n             * @param {jQuery} options\n             * @param {jQuery} select\n             * @returns {String}\n             */\n            buttonText: function (selectedOptions, select) {\n                if (this.disabledText.length > 0 && select.prop('disabled')) {\n                    return this.disabledText;\n                }\n                else if (selectedOptions.length === 0) {\n                    return this.nonSelectedText;\n                }\n                else if (this.allSelectedText\n                    && selectedOptions.length === $('option', $(select)).length\n                    && $('option', $(select)).length !== 1\n                    && this.multiple) {\n\n                    if (this.selectAllNumber) {\n                        return this.allSelectedText + ' (' + selectedOptions.length + ')';\n                    }\n                    else {\n                        return this.allSelectedText;\n                    }\n                }\n                else if (this.numberDisplayed != 0 && selectedOptions.length > this.numberDisplayed) {\n                    return selectedOptions.length + ' ' + this.nSelectedText;\n                }\n                else {\n                    var selected = '';\n                    var delimiter = this.delimiterText;\n\n                    selectedOptions.each(function () {\n                        var label = ($(this).attr('label') !== undefined) ? $(this).attr('label') : $(this).text();\n                        selected += label + delimiter;\n                    });\n\n                    return selected.substr(0, selected.length - this.delimiterText.length);\n                }\n            },\n            /**\n             * Updates the title of the button similar to the buttonText function.\n             *\n             * @param {jQuery} options\n             * @param {jQuery} select\n             * @returns {@exp;selected@call;substr}\n             */\n            buttonTitle: function (options, select) {\n                if (options.length === 0) {\n                    return this.nonSelectedText;\n                }\n                else {\n                    var selected = '';\n                    var delimiter = this.delimiterText;\n\n                    options.each(function () {\n                        var label = ($(this).attr('label') !== undefined) ? $(this).attr('label') : $(this).text();\n                        selected += label + delimiter;\n                    });\n                    return selected.substr(0, selected.length - this.delimiterText.length);\n                }\n            },\n            checkboxName: function (option) {\n                return false; // no checkbox name\n            },\n            /**\n             * Create a label.\n             *\n             * @param {jQuery} element\n             * @returns {String}\n             */\n            optionLabel: function (element) {\n                return $(element).attr('label') || $(element).text();\n            },\n            /**\n             * Create a class.\n             *\n             * @param {jQuery} element\n             * @returns {String}\n             */\n            optionClass: function (element) {\n                return $(element).attr('class') || '';\n            },\n            /**\n             * Triggered on change of the multiselect.\n             *\n             * Not triggered when selecting/deselecting options manually.\n             *\n             * @param {jQuery} option\n             * @param {Boolean} checked\n             */\n            onChange: function (option, checked) {\n\n            },\n            /**\n             * Triggered when the dropdown is shown.\n             *\n             * @param {jQuery} event\n             */\n            onDropdownShow: function (event) {\n\n            },\n            /**\n             * Triggered when the dropdown is hidden.\n             *\n             * @param {jQuery} event\n             */\n            onDropdownHide: function (event) {\n\n            },\n            /**\n             * Triggered after the dropdown is shown.\n             *\n             * @param {jQuery} event\n             */\n            onDropdownShown: function (event) {\n\n            },\n            /**\n             * Triggered after the dropdown is hidden.\n             *\n             * @param {jQuery} event\n             */\n            onDropdownHidden: function (event) {\n\n            },\n            /**\n             * Triggered on select all.\n             */\n            onSelectAll: function () {\n\n            },\n            /**\n             * Triggered on deselect all.\n             */\n            onDeselectAll: function () {\n\n            },\n            /**\n             * Triggered after initializing.\n             *\n             * @param {jQuery} $select\n             * @param {jQuery} $container\n             */\n            onInitialized: function ($select, $container) {\n\n            },\n            /**\n             * Triggered on filtering.\n             *\n             * @param {jQuery} $filter\n             */\n            onFiltering: function ($filter) {\n\n            },\n            enableHTML: false,\n            buttonClass: 'custom-select',\n            inheritClass: false,\n            buttonWidth: 'auto',\n            buttonContainer: '<div class=\"btn-group\" />',\n            dropRight: false,\n            dropUp: false,\n            selectedClass: 'active',\n            // Maximum height of the dropdown menu.\n            // If maximum height is exceeded a scrollbar will be displayed.\n            maxHeight: false,\n            includeSelectAllOption: false,\n            includeSelectAllIfMoreThan: 0,\n            selectAllText: ' Select all',\n            selectAllValue: 'multiselect-all',\n            selectAllName: false,\n            selectAllNumber: true,\n            selectAllJustVisible: true,\n            enableFiltering: false,\n            enableCaseInsensitiveFiltering: false,\n            enableFullValueFiltering: false,\n            enableClickableOptGroups: false,\n            enableCollapsibleOptGroups: false,\n            collapseOptGroupsByDefault: false,\n            filterPlaceholder: 'Search',\n            // possible options: 'text', 'value', 'both'\n            filterBehavior: 'text',\n            includeFilterClearBtn: true,\n            preventInputChangeEvent: false,\n            nonSelectedText: 'None selected',\n            nSelectedText: 'selected',\n            allSelectedText: 'All selected',\n            numberDisplayed: 3,\n            disableIfEmpty: false,\n            disabledText: '',\n            delimiterText: ', ',\n            includeResetOption: false,\n            includeSubmitOption: false,\n            includeResetDivider: false,\n            includeSubmitDivider: false,\n            resetText: 'Reset',\n            submitText: 'Submit',\n            indentGroupOptions: true,\n            // possible options: 'never', 'always', 'ifPopupIsSmaller', 'ifPopupIsWider'\n            widthSynchronizationMode: 'never',\n            buttonTextAlignment: 'center',\n            templates: {\n                button: '<button type=\"button\" class=\"multiselect btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"multiselect-selected-text\"></span></button>',\n                popupContainer: '<div class=\"multiselect-container dropdown-menu\"></div>',\n                filter: '<div class=\"multiselect-filter d-flex align-items-center\"><i class=\"fas fa-sm fa-search text-muted\"></i><input type=\"search\" class=\"multiselect-search form-control\" /></div>',\n                option: '<button type=\"button\" class=\"multiselect-option dropdown-item\"></button>',\n                divider: '<div class=\"dropdown-divider\"></div>',\n                optionGroup: '<button type=\"button\" class=\"multiselect-group dropdown-item\"></button>',\n                resetButton: '<div class=\"multiselect-reset text-center p-2\"><button type=\"button\" class=\"btn btn-sm btn-block btn-outline-secondary\"></button></div>',\n                submitButton: ''\n            }\n        },\n\n        constructor: Multiselect,\n\n        /**\n         * Builds the container of the multiselect.\n         */\n        buildContainer: function () {\n            this.$container = $(this.options.buttonContainer);\n            if (this.options.widthSynchronizationMode !== 'never') {\n                this.$container.on('show.bs.dropdown', $.proxy(function () {\n                    // the width needs to be synchronized again in case the width of the button changed in between\n                    this.synchronizeButtonAndPopupWidth();\n                    this.options.onDropdownShow();\n                }, this));\n            }\n            else {\n                this.$container.on('show.bs.dropdown', this.options.onDropdownShow);\n            }\n            this.$container.on('hide.bs.dropdown', this.options.onDropdownHide);\n            this.$container.on('shown.bs.dropdown', this.options.onDropdownShown);\n            this.$container.on('hidden.bs.dropdown', this.options.onDropdownHidden);\n        },\n\n        /**\n         * Builds the button of the multiselect.\n         */\n        buildButton: function () {\n            this.$button = $(this.options.templates.button).addClass(this.options.buttonClass);\n            if (this.$select.attr('class') && this.options.inheritClass) {\n                this.$button.addClass(this.$select.attr('class'));\n            }\n            // Adopt active state.\n            if (this.$select.prop('disabled')) {\n                this.disable();\n            }\n            else {\n                this.enable();\n            }\n\n            // Manually add button width if set.\n            if (this.options.buttonWidth && this.options.buttonWidth !== 'auto') {\n                this.$button.css({\n                    'width': '100%' //this.options.buttonWidth,\n                });\n                this.$container.css({\n                    'width': this.options.buttonWidth\n                });\n            }\n\n            if (this.options.buttonTextAlignment) {\n                switch (this.options.buttonTextAlignment) {\n                    case 'left':\n                        this.$button.addClass('text-left');\n                        break;\n                    case 'center':\n                        this.$button.addClass('text-center');\n                        break;\n                    case 'right':\n                        this.$button.addClass('text-right');\n                        break;\n                }\n            }\n\n            // Keep the tab index from the select.\n            var tabindex = this.$select.attr('tabindex');\n            if (tabindex) {\n                this.$button.attr('tabindex', tabindex);\n            }\n\n            this.$container.prepend(this.$button);\n        },\n\n        /**\n         * Builds the popup container representing the dropdown menu.\n         */\n        buildDropdown: function () {\n\n            // Build popup container.\n            this.$popupContainer = $(this.options.templates.popupContainer);\n\n            if (this.options.dropRight) {\n                this.$container.addClass('dropright');\n            }\n            else if (this.options.dropUp) {\n                this.$container.addClass(\"dropup\");\n            }\n\n            // Set max height of dropdown menu to activate auto scrollbar.\n            if (this.options.maxHeight) {\n                // TODO: Add a class for this option to move the css declarations.\n                this.$popupContainer.css({\n                    'max-height': this.options.maxHeight + 'px',\n                    'overflow-y': 'auto',\n                    'overflow-x': 'hidden'\n                });\n            }\n\n            if (this.options.widthSynchronizationMode !== 'never') {\n                this.$popupContainer.css('overflow-x', 'hidden');\n            }\n\n            this.$popupContainer.on(\"touchstart click\", function (e) {\n                e.stopPropagation();\n            });\n\n            this.$container.append(this.$popupContainer);\n        },\n\n        synchronizeButtonAndPopupWidth: function () {\n            if (!this.$popupContainer || this.options.widthSynchronizationMode === 'never') {\n                return;\n            }\n\n            var buttonWidth = this.$button.outerWidth();\n            switch (this.options.widthSynchronizationMode) {\n                case 'always':\n                    this.$popupContainer.css('min-width', buttonWidth);\n                    this.$popupContainer.css('max-width', buttonWidth);\n                    break;\n                case 'ifPopupIsSmaller':\n                    this.$popupContainer.css('min-width', buttonWidth);\n                    break;\n                case 'ifPopupIsWider':\n                    this.$popupContainer.css('max-width', buttonWidth);\n                    break;\n            }\n        },\n\n        /**\n         * Build the dropdown options and binds all necessary events.\n         *\n         * Uses createDivider and createOptionValue to create the necessary options.\n         */\n        buildDropdownOptions: function () {\n\n            this.$select.children().each($.proxy(function (index, element) {\n\n                var $element = $(element);\n                // Support optgroups and options without a group simultaneously.\n                var tag = $element.prop('tagName')\n                    .toLowerCase();\n\n                if ($element.prop('value') === this.options.selectAllValue) {\n                    return;\n                }\n\n                if (tag === 'optgroup') {\n                    this.createOptgroup(element);\n                }\n                else if (tag === 'option') {\n\n                    if ($element.data('role') === 'divider') {\n                        this.createDivider();\n                    }\n                    else {\n                        this.createOptionValue(element, false);\n                    }\n\n                }\n\n                // Other illegal tags will be ignored.\n            }, this));\n\n            // Bind the change event on the dropdown elements.\n            $(this.$popupContainer).off('change', '> *:not(.multiselect-group) input[type=\"checkbox\"], > *:not(.multiselect-group) input[type=\"radio\"]');\n            $(this.$popupContainer).on('change', '> *:not(.multiselect-group) input[type=\"checkbox\"], > *:not(.multiselect-group) input[type=\"radio\"]', $.proxy(function (event) {\n                var $target = $(event.target);\n\n                var checked = $target.prop('checked') || false;\n                var isSelectAllOption = $target.val() === this.options.selectAllValue;\n\n                // Apply or unapply the configured selected class.\n                if (this.options.selectedClass) {\n                    if (checked) {\n                        $target.closest('.multiselect-option')\n                            .addClass(this.options.selectedClass);\n                    }\n                    else {\n                        $target.closest('.multiselect-option')\n                            .removeClass(this.options.selectedClass);\n                    }\n                }\n\n                // Get the corresponding option.\n                var value = $target.val();\n                var $option = this.getOptionByValue(value);\n\n                var $optionsNotThis = $('option', this.$select).not($option);\n                var $checkboxesNotThis = $('input', this.$container).not($target);\n\n                if (isSelectAllOption) {\n\n                    if (checked) {\n                        this.selectAll(this.options.selectAllJustVisible, true);\n                    }\n                    else {\n                        this.deselectAll(this.options.selectAllJustVisible, true);\n                    }\n                }\n                else {\n                    if (checked) {\n                        $option.prop('selected', true);\n\n                        if (this.options.multiple) {\n                            // Simply select additional option.\n                            $option.prop('selected', true);\n                        }\n                        else {\n                            // Unselect all other options and corresponding checkboxes.\n                            if (this.options.selectedClass) {\n                                $($checkboxesNotThis).closest('.dropdown-item').removeClass(this.options.selectedClass);\n                            }\n\n                            $($checkboxesNotThis).prop('checked', false);\n                            $optionsNotThis.prop('selected', false);\n\n                            // It's a single selection, so close.\n                            this.$button.click();\n                        }\n\n                        if (this.options.selectedClass === \"active\") {\n                            $optionsNotThis.closest(\".dropdown-item\").css(\"outline\", \"\");\n                        }\n                    }\n                    else {\n                        // Unselect option.\n                        $option.prop('selected', false);\n                    }\n\n                    // To prevent select all from firing onChange: #575\n                    this.options.onChange($option, checked);\n\n                    // Do not update select all or optgroups on select all change!\n                    this.updateSelectAll();\n\n                    if (this.options.enableClickableOptGroups && this.options.multiple) {\n                        this.updateOptGroups();\n                    }\n                }\n\n                this.$select.change();\n                this.updateButtonText();\n\n                if (this.options.preventInputChangeEvent) {\n                    return false;\n                }\n            }, this));\n\n            $('.multiselect-option', this.$popupContainer).off('mousedown');\n            $('.multiselect-option', this.$popupContainer).on('mousedown', function (e) {\n                if (e.shiftKey) {\n                    // Prevent selecting text by Shift+click\n                    return false;\n                }\n            });\n\n            $(this.$popupContainer).off('touchstart click', '.multiselect-option, .multiselect-all, .multiselect-group');\n            $(this.$popupContainer).on('touchstart click', '.multiselect-option, .multiselect-all, .multiselect-group', $.proxy(function (event) {\n                event.stopPropagation();\n\n                var $target = $(event.target);\n\n                if (event.shiftKey && this.options.multiple) {\n                    if (!$target.is(\"input\")) { // Handles checkbox selection manually (see https://github.com/davidstutz/bootstrap-multiselect/issues/431)\n                        event.preventDefault();\n                        $target = $target.closest(\".multiselect-option\").find(\"input\");\n                        $target.prop(\"checked\", !$target.prop(\"checked\"));\n                    }\n                    var checked = $target.prop('checked') || false;\n\n                    if (this.lastToggledInput !== null && this.lastToggledInput !== $target) { // Make sure we actually have a range\n                        var from = this.$popupContainer.find(\".multiselect-option:visible\").index($target.closest(\".multiselect-option\"));\n                        var to = this.$popupContainer.find(\".multiselect-option:visible\").index(this.lastToggledInput.closest(\".multiselect-option\"));\n\n                        if (from > to) { // Swap the indices\n                            var tmp = to;\n                            to = from;\n                            from = tmp;\n                        }\n\n                        // Make sure we grab all elements since slice excludes the last index\n                        ++to;\n\n                        // Change the checkboxes and underlying options\n                        var range = this.$popupContainer.find(\".multiselect-option:not(.multiselect-filter-hidden)\").slice(from, to).find(\"input\");\n\n                        range.prop('checked', checked);\n\n                        if (this.options.selectedClass) {\n                            range.closest('.multiselect-option')\n                                .toggleClass(this.options.selectedClass, checked);\n                        }\n\n                        for (var i = 0, j = range.length; i < j; i++) {\n                            var $checkbox = $(range[i]);\n\n                            var $option = this.getOptionByValue($checkbox.val());\n\n                            $option.prop('selected', checked);\n                        }\n                    }\n\n                    // Trigger the select \"change\" event\n                    $target.trigger(\"change\");\n                }\n                else if (!$target.is('input')) {\n                    var $checkbox = $target.closest('.multiselect-option, .multiselect-all').find('.form-check-input');\n                    if ($checkbox.length > 0) {\n                        if (this.options.multiple || !$checkbox.prop('checked')) {\n                        $checkbox.prop('checked', !$checkbox.prop('checked'));\n                        $checkbox.change();\n                    }\n                    }\n                    else if (this.options.enableClickableOptGroups && this.options.multiple && !$target.hasClass(\"caret-container\")) {\n                        var groupItem = $target;\n                        if (!groupItem.hasClass(\"multiselect-group\")) {\n                            groupItem = $target.closest('.multiselect-group');\n                        }\n                        $checkbox = groupItem.find(\".form-check-input\");\n                        if ($checkbox.length > 0) {\n                            $checkbox.prop('checked', !$checkbox.prop('checked'));\n                            $checkbox.change();\n                        }\n                    }\n\n                    event.preventDefault();\n                }\n\n                // Remembers last clicked option\n                var $input = $target.closest(\".multiselect-option\").find(\"input[type='checkbox'], input[type='radio']\");\n                if ($input.length > 0) {\n                    this.lastToggledInput = $target;\n                }\n                else {\n                    this.lastToggledInput = null;\n                }\n\n                $target.blur();\n            }, this));\n\n            //Keyboard support.\n            this.$container.off('keydown.multiselect').on('keydown.multiselect', $.proxy(function (event) {\n                if ($('input.multiselect-search', this.$container).is(':focus')) {\n                    return;\n                }\n\n                // keyCode 9 == Tab\n                if (event.keyCode === 9 && this.$container.hasClass('show')) {\n                    this.$button.click();\n                }\n                else {\n                    var $items = $(this.$container).find(\".multiselect-option:not(.disabled), .multiselect-group:not(.disabled), .multiselect-all\").filter(\":visible\");\n\n                    if (!$items.length) {\n                        return;\n                    }\n\n                    var index = $items.index($items.filter(':focus'));\n\n                    var $current = $items.eq(index);\n\n                    // keyCode 32 = Space\n                    if (event.keyCode === 32) {\n                        var $checkbox = $current.find('input');\n\n                        $checkbox.prop(\"checked\", !$checkbox.prop(\"checked\"));\n                        $checkbox.change();\n\n                        event.preventDefault();\n                    }\n\n                    // keyCode 13 = Enter\n                    if (event.keyCode === 13) {\n                        setTimeout(function () {\n                            $current.focus();\n                        }, 0);\n                    }\n                }\n            }, this));\n\n            if (this.options.enableClickableOptGroups && this.options.multiple) {\n                $(\".multiselect-group input\", this.$popupContainer).off(\"change\");\n                $(\".multiselect-group input\", this.$popupContainer).on(\"change\", $.proxy(function (event) {\n                    event.stopPropagation();\n\n                    var $target = $(event.target);\n                    var checked = $target.prop('checked') || false;\n\n                    var $item = $(event.target).closest('.dropdown-item');\n                    var $group = $item.nextUntil(\".multiselect-group\")\n                        .not('.multiselect-filter-hidden')\n                        .not('.disabled');\n\n                    var $inputs = $group.find(\"input\");\n\n                    var $options = [];\n\n                    if (this.options.selectedClass) {\n                        if (checked) {\n                            $item.addClass(this.options.selectedClass);\n                        }\n                        else {\n                            $item.removeClass(this.options.selectedClass);\n                        }\n                    }\n\n                    $.each($inputs, $.proxy(function (index, input) {\n                        var $input = $(input);\n                        var value = $input.val();\n                        var $option = this.getOptionByValue(value);\n\n                        if (checked) {\n                            $input.prop('checked', true);\n                            $input.closest('.dropdown-item')\n                                .addClass(this.options.selectedClass);\n\n                            $option.prop('selected', true);\n                        }\n                        else {\n                            $input.prop('checked', false);\n                            $input.closest('.dropdown-item')\n                                .removeClass(this.options.selectedClass);\n\n                            $option.prop('selected', false);\n                        }\n\n                        $options.push(this.getOptionByValue(value));\n                    }, this))\n\n                    // Cannot use select or deselect here because it would call updateOptGroups again.\n\n                    this.options.onChange($options, checked);\n\n                    this.$select.change();\n                    this.updateButtonText();\n                    this.updateSelectAll();\n                }, this));\n            }\n\n            if (this.options.enableCollapsibleOptGroups && this.options.multiple) {\n                $(\".multiselect-group .caret-container\", this.$popupContainer).off(\"click\");\n                $(\".multiselect-group .caret-container\", this.$popupContainer).on(\"click\", $.proxy(function (event) {\n                    var $group = $(event.target).closest('.multiselect-group');\n                    var $inputs = $group.nextUntil(\".multiselect-group\")\n                        .not('.multiselect-filter-hidden');\n\n                    var visible = true;\n                    $inputs.each(function () {\n                        visible = visible && !$(this).hasClass('multiselect-collapsible-hidden');\n                    });\n\n                    if (visible) {\n                        $inputs.hide()\n                            .addClass('multiselect-collapsible-hidden');\n                    }\n                    else {\n                        $inputs.show()\n                            .removeClass('multiselect-collapsible-hidden');\n                    }\n                }, this));\n            }\n        },\n\n        /**\n         * Create a checkbox container with input and label based on given values\n         * @param {JQuery} $item \n         * @param {String} label \n         * @param {String} name \n         * @param {String} value \n         * @param {String} inputType \n         * @returns {JQuery}\n         */\n        createCheckbox: function ($item, label, name, value, title, inputType) {\n            var $wrapper = $('<span />');\n            $wrapper.addClass(\"form-check\");\n\n            if (this.options.enableHTML && $(label).length > 0) {\n                $wrapper.append($(label));\n            }\n            else {\n                var $checkboxLabel = $('<label class=\"form-check-label\" />');\n                $checkboxLabel.text(label);\n                $wrapper.append($checkboxLabel);\n            }\n\n            var $checkbox = $('<input class=\"form-check-input\"/>').attr('type', inputType);\n            $checkbox.val(value);\n            $wrapper.prepend($checkbox);\n\n            if (name) {\n                $checkbox.attr('name', name);\n            }\n\n            $item.prepend($wrapper);\n            $item.attr(\"title\", title || label);\n\n            return $checkbox;\n        },\n\n        /**\n         * Create an option using the given select option.\n         *\n         * @param {jQuery} element\n         */\n        createOptionValue: function (element, isGroupOption) {\n            var $element = $(element);\n            if ($element.is(':selected')) {\n                $element.prop('selected', true);\n            }\n\n            // Support the label attribute on options.\n            var label = this.options.optionLabel(element);\n            var classes = this.options.optionClass(element);\n            var value = $element.val();\n            var inputType = this.options.multiple ? \"checkbox\" : \"radio\";\n            var title = $element.attr('title');\n\n            var $option = $(this.options.templates.option);\n            $option.addClass(classes);\n\n            if (isGroupOption && this.options.indentGroupOptions) {\n                $option.addClass(\"multiselect-group-option-indented\")\n            }\n\n            // Hide all children items when collapseOptGroupsByDefault is true\n            if (this.options.collapseOptGroupsByDefault && $(element).parent().prop(\"tagName\").toLowerCase() === \"optgroup\") {\n                $option.addClass(\"multiselect-collapsible-hidden\");\n                $option.hide();\n            }\n\n            var name = this.options.checkboxName($element);\n            var $checkbox = this.createCheckbox($option, label, name, value, title, inputType);\n\n            var selected = $element.prop('selected') || false;\n\n            if (value === this.options.selectAllValue) {\n                $option.addClass(\"multiselect-all\");\n                $option.removeClass(\"multiselect-option\");\n                $checkbox.parent().parent()\n                    .addClass('multiselect-all');\n            }\n\n            this.$popupContainer.append($option);\n\n            if ($element.is(':disabled')) {\n                $checkbox.attr('disabled', 'disabled')\n                    .prop('disabled', true)\n                    .closest('.dropdown-item')\n                    .addClass('disabled');\n            }\n\n            $checkbox.prop('checked', selected);\n\n            if (selected && this.options.selectedClass) {\n                $checkbox.closest('.dropdown-item')\n                    .addClass(this.options.selectedClass);\n            }\n        },\n\n        /**\n         * Creates a divider using the given select option.\n         *\n         * @param {jQuery} element\n         */\n        createDivider: function (element) {\n            var $divider = $(this.options.templates.divider);\n            this.$popupContainer.append($divider);\n        },\n\n        /**\n         * Creates an optgroup.\n         *\n         * @param {jQuery} group\n         */\n        createOptgroup: function (group) {\n            var $group = $(group);\n            var label = $group.attr(\"label\");\n            var value = $group.attr(\"value\");\n            var title = $group.attr('title');\n\n            var $groupOption = $(\"<span class='multiselect-group dropdown-item-text'></span>\");\n\n            if (this.options.enableClickableOptGroups && this.options.multiple) {\n                $groupOption = $(this.options.templates.optionGroup);\n                var $checkbox = this.createCheckbox($groupOption, label, null, value, title, \"checkbox\");\n            }\n            else {\n                if (this.options.enableHTML) {\n                    $groupOption.html(\" \" + label);\n                }\n                else {\n                    $groupOption.text(\" \" + label);\n                }\n            }\n\n            var classes = this.options.optionClass(group);\n            $groupOption.addClass(classes);\n\n            if (this.options.enableCollapsibleOptGroups && this.options.multiple) {\n                $groupOption.find('.form-check').addClass('d-inline-block');\n                $groupOption.append('<span class=\"caret-container dropdown-toggle pl-1\"></span>');\n            }\n\n            if ($group.is(':disabled')) {\n                $groupOption.addClass('disabled');\n            }\n\n            this.$popupContainer.append($groupOption);\n\n            $(\"option\", group).each($.proxy(function ($, group) {\n                this.createOptionValue(group, true);\n            }, this));\n        },\n\n        /**\n         * Build the reset.\n         *\n         */\n        buildReset: function () {\n            if (this.options.includeResetOption) {\n\n                // Check whether to add a divider after the reset.\n                if (this.options.includeResetDivider) {\n                    var divider = $(this.options.templates.divider);\n                    divider.addClass(\"mt-0\");\n                    this.$popupContainer.prepend(divider);\n                }\n\n                var $resetButton = $(this.options.templates.resetButton);\n\n                if (this.options.enableHTML) {\n                    $('button', $resetButton).html(this.options.resetText);\n                }\n                else {\n                    $('button', $resetButton).text(this.options.resetText);\n                }\n\n                $('button', $resetButton).click($.proxy(function () {\n                    this.clearSelection();\n                }, this));\n\n                this.$popupContainer.prepend($resetButton);\n            }\n        },\n\n        buildSubmit: function () {\n            if (this.options.includeSubmitOption) {\n\n                // Check whether to add a divider after the reset.\n                if (this.options.includeSubmitDivider) {\n                    var divider = $(this.options.templates.divider);\n                    divider.addClass(\"mb-0\");\n                    this.$popupContainer.append(divider);\n                }\n\n                var $submitButton = $(this.options.templates.submitButton);\n\n                if (this.options.enableHTML) {\n                    $('a', $submitButton).html(this.options.submitText);\n                }\n                else {\n                    $('a', $submitButton).text(this.options.submitText);\n                }\n\n                this.$popupContainer.append($submitButton);\n            }\n        },\n\n        /**\n         * Build the select all.\n         *\n         * Checks if a select all has already been created.\n         */\n        buildSelectAll: function () {\n            if (typeof this.options.selectAllValue === 'number') {\n                this.options.selectAllValue = this.options.selectAllValue.toString();\n            }\n\n            var alreadyHasSelectAll = this.hasSelectAll();\n\n            if (!alreadyHasSelectAll && this.options.includeSelectAllOption && this.options.multiple\n                && $('option', this.$select).length > this.options.includeSelectAllIfMoreThan) {\n\n                // Check whether to add a divider after the select all.\n                if (this.options.includeSelectAllDivider) {\n                    this.$popupContainer.prepend($(this.options.templates.divider));\n                }\n\n                var $option = $(this.options.templates.li || this.options.templates.option);\n                var $checkbox = this.createCheckbox($option, this.options.selectAllText, this.options.selectAllName, this.options.selectAllValue, this.options.selectAllText, \"checkbox\");\n\n                $option.addClass(\"multiselect-all\");\n                $option.removeClass(\"multiselect-option\");\n                $option.find(\".form-check-label\").addClass(\"font-weight-bold\");\n\n                this.$popupContainer.prepend($option);\n\n                $checkbox.prop('checked', false);\n            }\n        },\n\n        /**\n         * Builds the filter.\n         */\n        buildFilter: function () {\n\n            // Build filter if filtering OR case insensitive filtering is enabled and the number of options exceeds (or equals) enableFilterLength.\n            if (this.options.enableFiltering || this.options.enableCaseInsensitiveFiltering) {\n                var enableFilterLength = Math.max(this.options.enableFiltering, this.options.enableCaseInsensitiveFiltering);\n\n                if (this.$select.find('option').length >= enableFilterLength) {\n\n                    this.$filter = $(this.options.templates.filter);\n                    $('input', this.$filter).attr('placeholder', this.options.filterPlaceholder);\n\n                    // Handles optional filter clear button                        \n                    if (!this.options.includeFilterClearBtn) {\n                        this.$filter.find(\".multiselect-search\").attr(\"type\", \"text\");\n\n                        // Remove clear button if the old design of the filter with input groups and separated clear button is used\n                        this.$filter.find(\".multiselect-clear-filter\").remove();\n                    }\n                    else {\n                        // Firefox does not support a clear button in search inputs right now therefore it must be added manually\n                        if (this.isFirefox() && this.$filter.find(\".multiselect-clear-filter\").length === 0) {\n                            this.$filter.append(\"<i class='fas fa-times text-muted multiselect-clear-filter multiselect-moz-clear-filter'></i>\");\n                        }\n\n                        this.$filter.find(\".multiselect-clear-filter\").on('click', $.proxy(function (event) {\n                            clearTimeout(this.searchTimeout);\n\n                            this.query = '';\n                            this.$filter.find('.multiselect-search').val('');\n                            $('.dropdown-item', this.$popupContainer).show().removeClass('multiselect-filter-hidden');\n\n                            this.updateSelectAll();\n\n                            if (this.options.enableClickableOptGroups && this.options.multiple) {\n                                this.updateOptGroups();\n                            }\n\n                        }, this));\n                    }\n\n                    this.$popupContainer.prepend(this.$filter);\n\n                    this.$filter.val(this.query).on('click', function (event) {\n                        event.stopPropagation();\n                    }).on('input keydown', $.proxy(function (event) {\n                        // Cancel enter key default behaviour\n                        if (event.which === 13) {\n                            event.preventDefault();\n                        }\n\n                        if (this.isFirefox() && this.options.includeFilterClearBtn) {\n                            if (event.target.value) {\n                                this.$filter.find(\".multiselect-moz-clear-filter\").show();\n                            }\n                            else {\n                                this.$filter.find(\".multiselect-moz-clear-filter\").hide();\n                            }\n                        }\n\n                        // This is useful to catch \"keydown\" events after the browser has updated the control.\n                        clearTimeout(this.searchTimeout);\n\n                        this.searchTimeout = this.asyncFunction($.proxy(function () {\n\n                            if (this.query !== event.target.value) {\n                                this.query = event.target.value;\n\n                                var currentGroup, currentGroupVisible;\n                                $.each($('.multiselect-option, .multiselect-group', this.$popupContainer), $.proxy(function (index, element) {\n                                    var value = $('input', element).length > 0 ? $('input', element).val() : \"\";\n                                    var text = $('.form-check-label', element).text();\n\n                                    var filterCandidate = '';\n                                    if ((this.options.filterBehavior === 'text')) {\n                                        filterCandidate = text;\n                                    }\n                                    else if ((this.options.filterBehavior === 'value')) {\n                                        filterCandidate = value;\n                                    }\n                                    else if (this.options.filterBehavior === 'both') {\n                                        filterCandidate = text + '\\n' + value;\n                                    }\n\n                                    if (value !== this.options.selectAllValue && text) {\n\n                                        // By default lets assume that element is not\n                                        // interesting for this search.\n                                        var showElement = false;\n\n                                        if (this.options.enableCaseInsensitiveFiltering) {\n                                            filterCandidate = filterCandidate.toLowerCase();\n                                            this.query = this.query.toLowerCase();\n                                        }\n\n                                        if (this.options.enableFullValueFiltering && this.options.filterBehavior !== 'both') {\n                                            var valueToMatch = filterCandidate.trim().substring(0, this.query.length);\n                                            if (this.query.indexOf(valueToMatch) > -1) {\n                                                showElement = true;\n                                            }\n                                        }\n                                        else if (filterCandidate.indexOf(this.query) > -1) {\n                                            showElement = true;\n                                        }\n\n                                        // Toggle current element (group or group item) according to showElement boolean.\n                                        if (!showElement) {\n                                            $(element).css('display', 'none');\n                                            $(element).addClass('multiselect-filter-hidden');\n                                        }\n                                        if (showElement) {\n                                            $(element).css('display', 'block');\n                                            $(element).removeClass('multiselect-filter-hidden');\n                                        }\n\n                                        // Differentiate groups and group items.\n                                        if ($(element).hasClass('multiselect-group')) {\n                                            // Remember group status.\n                                            currentGroup = element;\n                                            currentGroupVisible = showElement;\n                                        }\n                                        else {\n                                            // Show group name when at least one of its items is visible.\n                                            if (showElement) {\n                                                $(currentGroup).show()\n                                                    .removeClass('multiselect-filter-hidden');\n                                            }\n\n                                            // Show all group items when group name satisfies filter.\n                                            if (!showElement && currentGroupVisible) {\n                                                $(element).show()\n                                                    .removeClass('multiselect-filter-hidden');\n                                            }\n                                        }\n                                    }\n                                }, this));\n                            }\n\n                            this.updateSelectAll();\n\n                            if (this.options.enableClickableOptGroups && this.options.multiple) {\n                                this.updateOptGroups();\n                            }\n\n                            this.options.onFiltering(event.target);\n\n                        }, this), 300, this);\n                    }, this));\n                }\n            }\n        },\n\n        /**\n         * Unbinds the whole plugin.\n         */\n        destroy: function () {\n            this.$container.remove();\n            this.$select.show();\n\n            // reset original state\n            this.$select.prop('disabled', this.options.wasDisabled);\n\n            this.$select.data('multiselect', null);\n        },\n\n        /**\n         * Refreshs the multiselect based on the selected options of the select.\n         */\n        refresh: function () {\n            var inputs = {};\n            $('.multiselect-option input', this.$popupContainer).each(function () {\n                inputs[$(this).val()] = $(this);\n            });\n\n            $('option', this.$select).each($.proxy(function (index, element) {\n                var $elem = $(element);\n                var $input = inputs[$(element).val()];\n\n                if ($elem.is(':selected')) {\n                    $input.prop('checked', true);\n\n                    if (this.options.selectedClass) {\n                        $input.closest('.multiselect-option')\n                            .addClass(this.options.selectedClass);\n                    }\n                }\n                else {\n                    $input.prop('checked', false);\n\n                    if (this.options.selectedClass) {\n                        $input.closest('.multiselect-option')\n                            .removeClass(this.options.selectedClass);\n                    }\n                }\n\n                if ($elem.is(\":disabled\")) {\n                    $input.attr('disabled', 'disabled')\n                        .prop('disabled', true)\n                        .closest('.multiselect-option')\n                        .addClass('disabled');\n                }\n                else {\n                    $input.prop('disabled', false)\n                        .closest('.multiselect-option')\n                        .removeClass('disabled');\n                }\n            }, this));\n\n            this.updateButtonText();\n            this.updateSelectAll();\n\n            if (this.options.enableClickableOptGroups && this.options.multiple) {\n                this.updateOptGroups();\n            }\n        },\n\n        /**\n         * Select all options of the given values.\n         *\n         * If triggerOnChange is set to true, the on change event is triggered if\n         * and only if one value is passed.\n         *\n         * @param {Array} selectValues\n         * @param {Boolean} triggerOnChange\n         */\n        select: function (selectValues, triggerOnChange) {\n            if (!$.isArray(selectValues)) {\n                selectValues = [selectValues];\n            }\n\n            for (var i = 0; i < selectValues.length; i++) {\n                var value = selectValues[i];\n\n                if (value === null || value === undefined) {\n                    continue;\n                }\n\n                var $option = this.getOptionByValue(value);\n                var $checkbox = this.getInputByValue(value);\n\n                if ($option === undefined || $checkbox === undefined) {\n                    continue;\n                }\n\n                if (!this.options.multiple) {\n                    this.deselectAll(false);\n                }\n\n                if (this.options.selectedClass) {\n                    $checkbox.closest('.dropdown-item')\n                        .addClass(this.options.selectedClass);\n                }\n\n                $checkbox.prop('checked', true);\n                $option.prop('selected', true);\n\n                if (triggerOnChange) {\n                    this.options.onChange($option, true);\n                }\n            }\n\n            this.updateButtonText();\n            this.updateSelectAll();\n\n            if (this.options.enableClickableOptGroups && this.options.multiple) {\n                this.updateOptGroups();\n            }\n        },\n\n        /**\n         * Clears all selected items.\n         */\n        clearSelection: function () {\n            this.deselectAll(false);\n            this.updateButtonText();\n            this.updateSelectAll();\n\n            if (this.options.enableClickableOptGroups && this.options.multiple) {\n                this.updateOptGroups();\n            }\n        },\n\n        /**\n         * Deselects all options of the given values.\n         *\n         * If triggerOnChange is set to true, the on change event is triggered, if\n         * and only if one value is passed.\n         *\n         * @param {Array} deselectValues\n         * @param {Boolean} triggerOnChange\n         */\n        deselect: function (deselectValues, triggerOnChange) {\n            if (!$.isArray(deselectValues)) {\n                deselectValues = [deselectValues];\n            }\n\n            for (var i = 0; i < deselectValues.length; i++) {\n                var value = deselectValues[i];\n\n                if (value === null || value === undefined) {\n                    continue;\n                }\n\n                var $option = this.getOptionByValue(value);\n                var $checkbox = this.getInputByValue(value);\n\n                if ($option === undefined || $checkbox === undefined) {\n                    continue;\n                }\n\n                if (this.options.selectedClass) {\n                    $checkbox.closest('.dropdown-item')\n                        .removeClass(this.options.selectedClass);\n                }\n\n                $checkbox.prop('checked', false);\n                $option.prop('selected', false);\n\n                if (triggerOnChange) {\n                    this.options.onChange($option, false);\n                }\n            }\n\n            this.updateButtonText();\n            this.updateSelectAll();\n\n            if (this.options.enableClickableOptGroups && this.options.multiple) {\n                this.updateOptGroups();\n            }\n        },\n\n        /**\n         * Selects all enabled & visible options.\n         *\n         * If justVisible is true or not specified, only visible options are selected.\n         *\n         * @param {Boolean} justVisible\n         * @param {Boolean} triggerOnSelectAll\n         */\n        selectAll: function (justVisible, triggerOnSelectAll) {\n\n            var justVisible = typeof justVisible === 'undefined' ? true : justVisible;\n\n            if (justVisible) {\n                var visibleOptions = $(\".multiselect-option:not(.disabled):not(.multiselect-filter-hidden)\", this.$popupContainer);\n                $('input:enabled', visibleOptions).prop('checked', true);\n                visibleOptions.addClass(this.options.selectedClass);\n\n                $('input:enabled', visibleOptions).each($.proxy(function (index, element) {\n                    var value = $(element).val();\n                    var option = this.getOptionByValue(value);\n                    $(option).prop('selected', true);\n                }, this));\n            }\n            else {\n                var allOptions = $(\".multiselect-option:not(.disabled)\", this.$popupContainer);\n                $('input:enabled', allOptions).prop('checked', true);\n                allOptions.addClass(this.options.selectedClass);\n\n                $('input:enabled', allOptions).each($.proxy(function (index, element) {\n                    var value = $(element).val();\n                    var option = this.getOptionByValue(value);\n                    $(option).prop('selected', true);\n                }, this));\n            }\n\n            $('.multiselect-option input[value=\"' + this.options.selectAllValue + '\"]', this.$popupContainer).prop('checked', true);\n\n            if (this.options.enableClickableOptGroups && this.options.multiple) {\n                this.updateOptGroups();\n            }\n\n            this.updateButtonText();\n            this.updateSelectAll();\n\n            if (triggerOnSelectAll) {\n                this.options.onSelectAll();\n            }\n        },\n\n        /**\n         * Deselects all options.\n         *\n         * If justVisible is true or not specified, only visible options are deselected.\n         *\n         * @param {Boolean} justVisible\n         */\n        deselectAll: function (justVisible, triggerOnDeselectAll) {\n\n            var justVisible = typeof justVisible === 'undefined' ? true : justVisible;\n\n            if (justVisible) {\n                var visibleOptions = $(\".multiselect-option:not(.disabled):not(.multiselect-filter-hidden)\", this.$popupContainer);\n                $('input[type=\"checkbox\"]:enabled', visibleOptions).prop('checked', false);\n                visibleOptions.removeClass(this.options.selectedClass);\n\n                $('input[type=\"checkbox\"]:enabled', visibleOptions).each($.proxy(function (index, element) {\n                    var value = $(element).val();\n                    var option = this.getOptionByValue(value);\n                    $(option).prop('selected', false);\n                }, this));\n            }\n            else {\n                var allOptions = $(\".multiselect-option:not(.disabled):not(.multiselect-group)\", this.$popupContainer);\n                $('input[type=\"checkbox\"]:enabled', allOptions).prop('checked', false);\n                allOptions.removeClass(this.options.selectedClass);\n\n                $('input[type=\"checkbox\"]:enabled', allOptions).each($.proxy(function (index, element) {\n                    var value = $(element).val();\n                    var option = this.getOptionByValue(value);\n                    $(option).prop('selected', false);\n                }, this));\n            }\n\n            $('.multiselect-all input[value=\"' + this.options.selectAllValue + '\"]', this.$popupContainer).prop('checked', false);\n\n            if (this.options.enableClickableOptGroups && this.options.multiple) {\n                this.updateOptGroups();\n            }\n\n            this.updateButtonText();\n            this.updateSelectAll();\n\n            if (triggerOnDeselectAll) {\n                this.options.onDeselectAll();\n            }\n        },\n\n        /**\n         * Rebuild the plugin.\n         *\n         * Rebuilds the dropdown, the filter and the select all option.\n         */\n        rebuild: function () {\n            this.$popupContainer.html('');\n\n            // Important to distinguish between radios and checkboxes.\n            this.options.multiple = this.$select.attr('multiple') === \"multiple\";\n\n            this.buildSelectAll();\n            this.buildDropdownOptions();\n            this.buildFilter();\n\n            this.updateButtonText();\n            this.updateSelectAll(true);\n\n            if (this.options.enableClickableOptGroups && this.options.multiple) {\n                this.updateOptGroups();\n            }\n\n            if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {\n                this.disable();\n            }\n            else {\n                this.enable();\n            }\n\n            if (this.options.dropRight) {\n                this.$container.addClass('dropright');\n            }\n            else if (this.options.dropUp) {\n                this.$container.addClass('dropup');\n            }\n\n            if (this.options.widthSynchronizationMode !== 'never') {\n                this.synchronizeButtonAndPopupWidth();\n            }\n        },\n\n        /**\n         * The provided data will be used to build the dropdown.\n         */\n        dataprovider: function (dataprovider) {\n\n            var groupCounter = 0;\n            var $select = this.$select.empty();\n\n            $.each(dataprovider, function (index, option) {\n                var $tag;\n\n                if ($.isArray(option.children)) { // create optiongroup tag\n                    groupCounter++;\n\n                    $tag = $('<optgroup/>').attr({\n                        label: option.label || 'Group ' + groupCounter,\n                        disabled: !!option.disabled,\n                        value: option.value\n                    });\n\n                    forEach(option.children, function (subOption) { // add children option tags\n                        var attributes = {\n                            value: subOption.value,\n                            label: subOption.label || subOption.value,\n                            title: subOption.title,\n                            selected: !!subOption.selected,\n                            disabled: !!subOption.disabled\n                        };\n\n                        //Loop through attributes object and add key-value for each attribute\n                        for (var key in subOption.attributes) {\n                            attributes['data-' + key] = subOption.attributes[key];\n                        }\n                        //Append original attributes + new data attributes to option\n                        $tag.append($('<option/>').attr(attributes));\n                    });\n                }\n                else {\n\n                    var attributes = {\n                        'value': option.value,\n                        'label': option.label || option.value,\n                        'title': option.title,\n                        'class': option['class'],\n                        'selected': !!option['selected'],\n                        'disabled': !!option['disabled']\n                    };\n                    //Loop through attributes object and add key-value for each attribute\n                    for (var key in option.attributes) {\n                        attributes['data-' + key] = option.attributes[key];\n                    }\n                    //Append original attributes + new data attributes to option\n                    $tag = $('<option/>').attr(attributes);\n\n                    $tag.text(option.label || option.value);\n                }\n\n                $select.append($tag);\n            });\n\n            this.rebuild();\n        },\n\n        /**\n         * Enable the multiselect.\n         */\n        enable: function () {\n            this.$select.prop('disabled', false);\n            this.$button.prop('disabled', false)\n                .removeClass('disabled');\n\n            this.updateButtonText();\n        },\n\n        /**\n         * Disable the multiselect.\n         */\n        disable: function () {\n            this.$select.prop('disabled', true);\n            this.$button.prop('disabled', true)\n                .addClass('disabled');\n\n            this.updateButtonText();\n        },\n\n        /**\n         * Set the options.\n         *\n         * @param {Array} options\n         */\n        setOptions: function (options) {\n            this.options = this.mergeOptions(options);\n        },\n\n        /**\n         * Merges the given options with the default options.\n         *\n         * @param {Array} options\n         * @returns {Array}\n         */\n        mergeOptions: function (options) {\n            return $.extend(true, {}, this.defaults, this.options, options);\n        },\n\n        /**\n         * Checks whether a select all checkbox is present.\n         *\n         * @returns {Boolean}\n         */\n        hasSelectAll: function () {\n            return $('.multiselect-all', this.$popupContainer).length > 0;\n        },\n\n        /**\n         * Update opt groups.\n         */\n        updateOptGroups: function () {\n            var $groups = $('.multiselect-group', this.$popupContainer)\n            var selectedClass = this.options.selectedClass;\n\n            $groups.each(function () {\n                var $options = $(this).nextUntil('.multiselect-group')\n                    .not('.multiselect-filter-hidden')\n                    .not('.disabled');\n\n                var checked = true;\n                $options.each(function () {\n                    var $input = $('input', this);\n\n                    if (!$input.prop('checked')) {\n                        checked = false;\n                    }\n                });\n\n                if (selectedClass) {\n                    if (checked) {\n                        $(this).addClass(selectedClass);\n                    }\n                    else {\n                        $(this).removeClass(selectedClass);\n                    }\n                }\n\n                $('input', this).prop('checked', checked);\n            });\n        },\n\n        /**\n         * Updates the select all checkbox based on the currently displayed and selected checkboxes.\n         */\n        updateSelectAll: function (notTriggerOnSelectAll) {\n            if (this.hasSelectAll()) {\n                var allBoxes = $(\".multiselect-option:not(.multiselect-filter-hidden):not(.multiselect-group):not(.disabled) input:enabled\", this.$popupContainer);\n                var allBoxesLength = allBoxes.length;\n                var checkedBoxesLength = allBoxes.filter(\":checked\").length;\n                var selectAllItem = $(\".multiselect-all\", this.$popupContainer);\n                var selectAllInput = selectAllItem.find(\"input\");\n\n                if (checkedBoxesLength > 0 && checkedBoxesLength === allBoxesLength) {\n                    selectAllInput.prop(\"checked\", true);\n                    selectAllItem.addClass(this.options.selectedClass);\n                }\n                else {\n                    selectAllInput.prop(\"checked\", false);\n                    selectAllItem.removeClass(this.options.selectedClass);\n                }\n            }\n        },\n\n        /**\n         * Update the button text and its title based on the currently selected options.\n         */\n        updateButtonText: function () {\n            var options = this.getSelected();\n\n            // First update the displayed button text.\n            if (this.options.enableHTML) {\n                $('.multiselect .multiselect-selected-text', this.$container).html(this.options.buttonText(options, this.$select));\n            }\n            else {\n                $('.multiselect .multiselect-selected-text', this.$container).text(this.options.buttonText(options, this.$select));\n            }\n\n            // Now update the title attribute of the button.\n            $('.multiselect', this.$container).attr('title', this.options.buttonTitle(options, this.$select));\n            this.$button.trigger('change');\n        },\n\n        /**\n         * Get all selected options.\n         *\n         * @returns {jQUery}\n         */\n        getSelected: function () {\n            return $('option', this.$select).filter(\":selected\");\n        },\n\n        /**\n         * Gets a select option by its value.\n         *\n         * @param {String} value\n         * @returns {jQuery}\n         */\n        getOptionByValue: function (value) {\n\n            var options = $('option', this.$select);\n            var valueToCompare = value.toString();\n\n            for (var i = 0; i < options.length; i = i + 1) {\n                var option = options[i];\n                if (option.value === valueToCompare) {\n                    return $(option);\n                }\n            }\n        },\n\n        /**\n         * Get the input (radio/checkbox) by its value.\n         *\n         * @param {String} value\n         * @returns {jQuery}\n         */\n        getInputByValue: function (value) {\n\n            var checkboxes = $('.multiselect-option input:not(.multiselect-search)', this.$popupContainer);\n            var valueToCompare = value.toString();\n\n            for (var i = 0; i < checkboxes.length; i = i + 1) {\n                var checkbox = checkboxes[i];\n                if (checkbox.value === valueToCompare) {\n                    return $(checkbox);\n                }\n            }\n        },\n\n        /**\n         * Used for knockout integration.\n         */\n        updateOriginalOptions: function () {\n            this.originalOptions = this.$select.clone()[0].options;\n        },\n\n        asyncFunction: function (callback, timeout, self) {\n            var args = Array.prototype.slice.call(arguments, 3);\n            return setTimeout(function () {\n                callback.apply(self || window, args);\n            }, timeout);\n        },\n\n        setAllSelectedText: function (allSelectedText) {\n            this.options.allSelectedText = allSelectedText;\n            this.updateButtonText();\n        },\n\n        isFirefox: function () {\n            var firefoxIdentifier = 'firefox';\n            var valueNotFoundIndex = -1;\n\n            if (navigator && navigator.userAgent) {\n                return navigator.userAgent.toLocaleLowerCase().indexOf(firefoxIdentifier) > valueNotFoundIndex;\n            }\n\n            return false;\n        }\n    };\n\n    $.fn.multiselect = function (option, parameter, extraOptions) {\n        return this.each(function () {\n            var data = $(this).data('multiselect');\n            var options = typeof option === 'object' && option;\n\n            // Initialize the multiselect.\n            if (!data) {\n                data = new Multiselect(this, options);\n                $(this).data('multiselect', data);\n            }\n\n            // Call multiselect method.\n            if (typeof option === 'string') {\n                data[option](parameter, extraOptions);\n\n                if (option === 'destroy') {\n                    $(this).data('multiselect', false);\n                }\n            }\n        });\n    };\n\n    $.fn.multiselect.Constructor = Multiselect;\n\n    $(function () {\n        $(\"select[data-role=multiselect]\").multiselect();\n    });\n\n});\n"],"names":["root","factory","this","$","ko","Multiselect","select","options","$select","mergeOptions","extend","data","attr","nonSelectedText","originalOptions","clone","query","searchTimeout","lastToggledInput","multiple","onChange","proxy","onSelectAll","onDeselectAll","onDropdownShow","onDropdownHide","onDropdownShown","onDropdownHidden","onInitialized","onFiltering","buildContainer","buildButton","buildDropdown","buildReset","buildSelectAll","buildDropdownOptions","buildFilter","buildSubmit","updateButtonText","updateSelectAll","enableClickableOptGroups","updateOptGroups","wasDisabled","prop","disableIfEmpty","length","disable","wrap","after","$container","widthSynchronizationMode","synchronizeButtonAndPopupWidth","bindingHandlers","multiselect","init","element","valueAccessor","allBindings","viewModel","bindingContext","$element","config","toJS","has","get","isObservable","computed","read","setTimeout","ms","updateOriginalOptions","disposeWhenNodeIsRemoved","value","rateLimit","notifyWhenChangesStop","selectedOptions","setEnabled","enable","utils","domNodeDisposal","addDisposeCallback","update","prototype","defaults","buttonText","disabledText","allSelectedText","selectAllNumber","numberDisplayed","nSelectedText","selected","delimiter","delimiterText","each","label","undefined","text","substr","buttonTitle","checkboxName","option","optionLabel","optionClass","checked","event","$filter","enableHTML","buttonClass","inheritClass","buttonWidth","buttonContainer","dropRight","dropUp","selectedClass","maxHeight","includeSelectAllOption","includeSelectAllIfMoreThan","selectAllText","selectAllValue","selectAllName","selectAllJustVisible","enableFiltering","enableCaseInsensitiveFiltering","enableFullValueFiltering","enableCollapsibleOptGroups","collapseOptGroupsByDefault","filterPlaceholder","filterBehavior","includeFilterClearBtn","preventInputChangeEvent","includeResetOption","includeSubmitOption","includeResetDivider","includeSubmitDivider","resetText","submitText","indentGroupOptions","buttonTextAlignment","templates","button","popupContainer","filter","divider","optionGroup","resetButton","submitButton","constructor","on","$button","addClass","css","tabindex","prepend","$popupContainer","e","stopPropagation","append","outerWidth","children","index","tag","toLowerCase","createOptgroup","createDivider","createOptionValue","off","$target","target","isSelectAllOption","val","closest","removeClass","$option","getOptionByValue","$optionsNotThis","not","$checkboxesNotThis","selectAll","deselectAll","click","change","shiftKey","is","preventDefault","find","from","to","tmp","range","slice","toggleClass","i","j","$checkbox","trigger","hasClass","groupItem","blur","keyCode","$items","$current","eq","focus","$item","$inputs","nextUntil","$options","input","$input","push","visible","hide","show","createCheckbox","name","title","inputType","$wrapper","$checkboxLabel","isGroupOption","classes","parent","$divider","group","$group","$groupOption","html","$resetButton","clearSelection","$submitButton","toString","hasSelectAll","includeSelectAllDivider","li","enableFilterLength","Math","max","isFirefox","clearTimeout","remove","which","asyncFunction","currentGroup","currentGroupVisible","filterCandidate","showElement","valueToMatch","trim","substring","indexOf","destroy","refresh","inputs","$elem","selectValues","triggerOnChange","isArray","getInputByValue","deselect","deselectValues","justVisible","triggerOnSelectAll","visibleOptions","allOptions","triggerOnDeselectAll","rebuild","dataprovider","groupCounter","empty","$tag","disabled","array","callback","forEach","subOption","attributes","key","setOptions","$groups","notTriggerOnSelectAll","allBoxes","allBoxesLength","checkedBoxesLength","selectAllItem","selectAllInput","getSelected","valueToCompare","checkboxes","checkbox","timeout","self","args","Array","call","arguments","apply","window","setAllSelectedText","navigator","userAgent","toLocaleLowerCase","fn","parameter","extraOptions","Constructor","define","amd","jQuery"],"mappings":"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"}