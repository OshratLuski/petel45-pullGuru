{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["define(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/templates', 'core/ajax', 'core/yui', 'core/notification', 'local_diagnostic/buuble-animation', 'local_diagnostic/ufo-filter', 'local_diagnostic/document-read', 'local_diagnostic/daterangepicker', 'local_diagnostic/bootstrap-multiselect'],\r\n    function($, Str, ModalFactory, ModalEvents, Templates, Ajax, Y, Notification, BuubleAnimation, ufoFilter) {\r\n\r\n        /**\r\n         * Constructor\r\n         *\r\n         * @param {String} selector used to find triggers for the new modal.\r\n         *\r\n         * Each call to init gets it's own instance of this class.\r\n         * @param courseid\r\n         */\r\n        var Diagnostic = function(selector, courseid, adParams) {\r\n            //this.stage = stage;\r\n           // this.stage1 = stage;\r\n            //this.stage2 = stage2;\r\n            this.courseid = courseid;\r\n\r\n            // console.log('adParams ', adParams);\r\n\r\n            this.adParams = adParams;\r\n            this.init(selector);\r\n        };\r\n\r\n        /**\r\n         * @var {Modal} modal\r\n         * @private\r\n         */\r\n        Diagnostic.prototype.modal = null;\r\n        Diagnostic.prototype.courseid = 0;\r\n        Diagnostic.prototype.stage = '';\r\n        Diagnostic.prototype.stage1 = '';\r\n        Diagnostic.prototype.stage2 = '';\r\n        Diagnostic.prototype.formdata = {};\r\n        Diagnostic.prototype.daterangePlaceholder = true;\r\n\r\n        /**\r\n         * Initialise the class.\r\n         *\r\n         * @param {String} selector used to find triggers for the new group modal.\r\n         * @private\r\n         * @return {Promise}\r\n         */\r\n        Diagnostic.prototype.init = function(selector) {\r\n            let self = this;\r\n            var triggers = $(selector);\r\n\r\n            return Str.get_strings([\r\n                {\r\n                    key: 'pluginname',\r\n                    component: 'local_diagnostic'\r\n                },\r\n                {\r\n                    key: 'cancel',\r\n                    component: 'local_diagnostic'\r\n                },\r\n                {\r\n                    key: 'submit',\r\n                    component: 'local_diagnostic'\r\n                },\r\n            ]).then(function(translateArr) {\r\n                // Create the modal.\r\n                return ModalFactory.create({\r\n                    title: translateArr[0],\r\n                    footer: `\r\n                    <button id=\"main_cancel\" data-dismiss=\"modal\" type=\"button\" class=\"btn btn-primary m-1\">${translateArr[1]}</button><button type=\"button\" id=\"main_submit\" class=\"btn btn-success btn-save m-1\">${translateArr[2]}</button>\r\n                    `\r\n                }, triggers);\r\n            }.bind(this)).then(function(modal) {\r\n                // Keep a reference to the modal.\r\n                this.modal = modal;\r\n\r\n                modal.root.addClass('popup-local-diagnostic-main-modal');\r\n\r\n                modal.modal.addClass('popup-local-diagnostic popup-local-diagnostic-main-p');\r\n\r\n                this.modal.getRoot().on('cancel.daterangepicker', '.daterange', { diagnostic:this }, function(e) {\r\n                    let dateNow = e.data.diagnostic.dateFormat(new Date());\r\n                    Str.get_string('daterange','local_diagnostic').then((string) => {\r\n                        $(\".diagnostic input.daterange\").val(string);\r\n                    });\r\n                    Diagnostic.prototype.daterangePlaceholder = true;\r\n\r\n                    var formData = {\r\n                        courseid: e.data.diagnostic.courseid,\r\n                        daterange: `${dateNow} - ${dateNow}`,\r\n                    };\r\n\r\n                    e.data.diagnostic.getQuizzes(formData);\r\n                });\r\n\r\n                this.modal.getRoot().on('apply.daterangepicker', '.daterange', { diagnostic:this }, function(e) {\r\n\r\n                    let startDate = e.data.diagnostic.dateFormat($(this).data('daterangepicker').startDate._d);\r\n                    let endDate = e.data.diagnostic.dateFormat($(this).data('daterangepicker').endDate._d);\r\n\r\n                    var formData = {\r\n                        courseid: e.data.diagnostic.courseid,\r\n                        daterange: `${startDate} - ${endDate}`\r\n                        // daterange: $(this).val()\r\n                    };\r\n\r\n                    Diagnostic.prototype.daterangePlaceholder = false;\r\n\r\n                    e.data.diagnostic.getQuizzes(formData);\r\n                });\r\n\r\n                this.modal.getRoot().on(ModalEvents.shown, { diagnostic:this }, async function(e) {\r\n                    var formdata = {\r\n                        courseid: e.data.diagnostic.courseid\r\n                    };\r\n\r\n                    e.data.diagnostic.getQuizzes(formdata);\r\n\r\n                    if ($('div.local-diagnostic-base-block').length){\r\n                        $('div.local-diagnostic-base-block').html('');\r\n                    } else {\r\n                        $(\"body .popup-local-diagnostic-main-modal\").after('<div class=\"local-diagnostic-base-block\"><div/>');\r\n                    }\r\n\r\n                    await Templates.render('local_diagnostic/base', {}).done(function(data) {\r\n                        $(\"body .local-diagnostic-base-block\").html(data);\r\n                    });\r\n                });\r\n\r\n                // We want to reset the form every time it is opened.\r\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\r\n                    if (typeof this.modal.getRoot().find('.daterange').data('daterangepicker') !== 'undefined') {\r\n                        this.modal.getRoot().find('.daterange').data('daterangepicker').remove();\r\n                    }\r\n\r\n                    this.modal.setBody('');\r\n                }.bind(this));\r\n\r\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\r\n                // We also catch the form submit event and use it to submit the form with ajax.\r\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\r\n\r\n                return this.modal;\r\n            }.bind(this));\r\n        };\r\n\r\n        Diagnostic.prototype.dateFormat = function(date){\r\n            var d = new Date(date),\r\n                month = '' + (d.getMonth() + 1),\r\n                day = '' + d.getDate(),\r\n                year = d.getFullYear();\r\n\r\n            if (month.length < 2)\r\n                month = '0' + month;\r\n            if (day.length < 2)\r\n                day = '0' + day;\r\n\r\n            return [month, day, year].join('/');\r\n        }\r\n\r\n        /**\r\n         * @method getBody\r\n         * @private\r\n         * @return {Promise}\r\n         */\r\n        Diagnostic.prototype.getBody = function(formdata) {\r\n            if (typeof formdata === \"undefined\") {\r\n                formdata = {};\r\n            }\r\n\r\n            formdata.imageTop = M.util.image_url('a/ufo_t', 'local_diagnostic');\r\n            formdata.imageContent = M.util.image_url('a/ufo_100', 'local_diagnostic');\r\n            formdata.secondarycolor = this.adParams[1].secondarylight;\r\n\r\n            // Get the content of the modal.\r\n            return Templates.render('local_diagnostic/popup', formdata);\r\n        };\r\n\r\n        /**\r\n         * @method handleFormSubmissionResponse\r\n         * @private\r\n         * @return {Promise}\r\n         */\r\n\r\n        Diagnostic.prototype.handleFormSubmissionResponse = function(formData, response) {\r\n            if (response.result) {\r\n                let startDate = new Date();\r\n                let endDate = new Date();\r\n                if ('daterange' in formData) {\r\n                    startDate = new Date(formData.daterange.substr(0, 10));\r\n                    endDate = new Date(formData.daterange.substr(13));\r\n                }\r\n                this.formdata = response.templatedata;\r\n                let diag = this;\r\n                this.getBody(response.templatedata).then(function(result){\r\n                    diag.modal.setBody(result);\r\n                    ufoFilter();\r\n\r\n                    const bodyEl = $('.popup-local-diagnostic-main-p .modal-body').first();\r\n                    if (bodyEl){\r\n                        bodyEl.addClass('modal-body-main');\r\n                    }\r\n\r\n                    diag.modal.getRoot().find('.modal-dialog').removeClass('modal-dialog-scrollable');\r\n                    diag.modal.getRoot().find('.daterange').daterangepicker({\r\n                        parentEl: \".popup-local-diagnostic-main-p .modal-body-main\",\r\n                        startDate,\r\n                        endDate,\r\n                        locale: {\r\n                            format: \"DD MMMM\",\r\n                            direction: 'daterange-custom',\r\n                        },\r\n                    });\r\n\r\n                    diag.initQuizzes(response.templatedata.sections);\r\n                });\r\n            } else {\r\n                this.modal.hide();\r\n                Notification.addNotification({\r\n                    message: response.message,\r\n                    type: 'error'\r\n                });\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @method handleFormSubmissionFailure\r\n         * @private\r\n         * @return {Promise}\r\n         */\r\n        Diagnostic.prototype.initQuizzes = function(activitiesNow) {\r\n            let diag = this;\r\n            Str.get_strings([\r\n                {\r\n                    key: 'submittext',\r\n                    component: 'local_diagnostic'\r\n                }, {\r\n                    key: 'events',\r\n                    component: 'local_diagnostic'\r\n                }, {\r\n                    key: 'noselection',\r\n                    component: 'local_diagnostic'\r\n                }, {\r\n                    key: 'daterange',\r\n                    component: 'local_diagnostic'\r\n                }, {\r\n                    key: 'activities',\r\n                    component: 'local_diagnostic'\r\n                }\r\n            ]).then(function(arr) {\r\n                if (Diagnostic.prototype.daterangePlaceholder){\r\n                    $(\".diagnostic input.daterange\").val(arr[3]);\r\n                }\r\n\r\n                diag.modal.getRoot().find('.cmids').multiselect(\r\n                    {\r\n                        enableClickableOptGroups: true,\r\n                        enableCollapsibleOptGroups: false,\r\n                        disableIfEmpty: true,\r\n                        includeSubmitOption: true,\r\n                        submitText: arr[0],\r\n                        includeSubmitDivider: true,\r\n                        nonSelectedText: arr[1],\r\n                        buttonWidth: '258px',\r\n                        templates: {\r\n                            popupContainer:\r\n                                `<div class=\"multiselect-container dropdown-menu\">\r\n                                        <div class=\"multiselect-container-text\">\r\n                                        </div>\r\n                                    </div>`\r\n                        },\r\n                        onInitialized: function() {\r\n                            let btnActivities = diag.modal.getRoot().find('button.multiselect');\r\n                            if (!activitiesNow || activitiesNow.length === 0){\r\n                                // activities is empty\r\n                                btnActivities.attr('disabled', true);\r\n                            } else {\r\n                                btnActivities.removeAttr('disabled');\r\n                            }\r\n                        },\r\n                        onChange: function(e) {\r\n                            console.log('CHANGED');\r\n                            console.log('REGISTER');\r\n\r\n                            if (!e[0] || !e[0].value) {\r\n                                return;\r\n                            }\r\n\r\n                            let value = e[0].value;\r\n\r\n                            var formData = {\r\n                                courseid: diag.courseid,\r\n                                cmids: value ? [value] : []\r\n                            };\r\n\r\n                            diag.getClusters(formData);\r\n\r\n                            let parent = diag.modal.getRoot().find('.multiselect-container.dropdown-menu');\r\n                            parent.removeClass('show');\r\n                        },\r\n                        buttonText: function(options, select) {\r\n                            // let value = options[0].firstChild.data;\r\n                            if (options &&\r\n                                options.length > 0 &&\r\n                                options[0] &&\r\n                                options[0].firstChild &&\r\n                                options[0].firstChild.data\r\n                                ){\r\n                                return options[0].firstChild.data\r\n                            } else {\r\n                                return arr[4];\r\n                            }\r\n                        },\r\n                        onDropdownShown: function(options, select) {\r\n                            // div.modal-body\r\n                            let popupEl = $(\"div.popup-local-diagnostic-main-p div.modal-body\");\r\n                            let menu = $(\".diagnostic .dropdown-menu\");\r\n\r\n                            menu.css(\"width\", popupEl.width());\r\n                        },\r\n                    }\r\n                );\r\n            });\r\n        };\r\n\r\n        /**\r\n         * @method handleFormSubmissionFailure\r\n         * @private\r\n         * @return {Promise}\r\n         */\r\n        Diagnostic.prototype.getSelectedOptions = function(select) {\r\n            return select.val();\r\n        };\r\n\r\n        /**\r\n         * @method handleFormSubmissionFailure\r\n         * @private\r\n         * @return {Promise}\r\n         */\r\n        Diagnostic.prototype.handleFormSubmissionFailure = function(stage, data) {\r\n            // Oh noes! Epic fail :(\r\n            // Ah wait - this is normal. We need to re-display the form with errors!\r\n            this.modal.setBody(this.getBody(stage, data));\r\n        };\r\n\r\n        /**\r\n         * Private method\r\n         *\r\n         * @method submitFormAjax\r\n         * @private\r\n         * @param {Event} e Form submission event.\r\n         */\r\n        Diagnostic.prototype.submitFormAjax = function(e) {\r\n            // We don't want to do a real form submission.\r\n            e.preventDefault();\r\n            let submitbtn = this.modal.getRoot().find('button.btn-primary');\r\n            submitbtn.attr('disabled', true);\r\n\r\n            var changeEvent = document.createEvent('HTMLEvents');\r\n            changeEvent.initEvent('change', true, true);\r\n\r\n            // Prompt all inputs to run their validation functions.\r\n            // Normally this would happen when the form is submitted, but\r\n            // since we aren't submitting the form normally we need to run client side\r\n            // validation.\r\n            this.modal.getRoot().find(':input').each(function (index, element) {\r\n                element.dispatchEvent(changeEvent);\r\n            });\r\n\r\n            // Now the change events have run, see if there are any \"invalid\" form fields.\r\n            var invalid = $.merge(\r\n                this.modal.getRoot().find('[aria-invalid=\"true\"]'),\r\n                this.modal.getRoot().find('.error')\r\n            );\r\n\r\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\r\n            if (invalid.length) {\r\n                invalid.first().focus();\r\n                return;\r\n            }\r\n\r\n            this.modal.getRoot().find('input[type=\"checkbox\"]').each(function (i, checkbox) {\r\n                if ($(checkbox).is(':checked')) {\r\n                    $(checkbox).prop('checked', true);\r\n                } else {\r\n                    $(checkbox).prop('checked', false);\r\n                }\r\n            });\r\n            // Convert all the form elements values to a serialised string.\r\n            var formData = this.modal.getRoot().find('form');\r\n            var objectData = {};\r\n\r\n            $.each(formData, function () {\r\n                var self = this,\r\n                    json = {},\r\n                    push_counters = {},\r\n                    patterns = {\r\n                        \"validate\": /^[a-zA-Z][a-zA-Z0-9_]*(?:\\[(?:\\d*|[a-zA-Z0-9_]+)\\])*$/,\r\n                        \"key\": /[a-zA-Z0-9_]+|(?=\\[\\])/g,\r\n                        \"push\": /^$/,\r\n                        \"fixed\": /^\\d+$/,\r\n                        \"named\": /^[a-zA-Z0-9_]+$/\r\n                    };\r\n\r\n\r\n                this.build = function (base, key, value) {\r\n                    base[key] = value;\r\n                    return base;\r\n                };\r\n\r\n                this.push_counter = function (key) {\r\n                    if (push_counters[key] === undefined) {\r\n                        push_counters[key] = 0;\r\n                    }\r\n                    return push_counters[key]++;\r\n                };\r\n\r\n                $.each($(this).serializeArray(), function () {\r\n\r\n                    // Skip invalid keys\r\n                    if (!patterns.validate.test(this.name)) {\r\n                        return;\r\n                    }\r\n\r\n                    var k,\r\n                        keys = this.name.match(patterns.key),\r\n                        merge = this.value,\r\n                        reverse_key = this.name;\r\n\r\n                    while ((k = keys.pop()) !== undefined) {\r\n\r\n                        // Adjust reverse_key\r\n                        reverse_key = reverse_key.replace(new RegExp(\"\\\\[\" + k + \"\\\\]$\"), '');\r\n\r\n\r\n\r\n                        // Push\r\n                        if (k.match(patterns.push)) {\r\n                            merge = self.build([], self.push_counter(reverse_key), merge);\r\n                        } else {\r\n                            merge = self.build({}, k, merge);\r\n                        }\r\n                        /*\r\n                        // Fixed\r\n                        else if (k.match(patterns.fixed)) {\r\n                            merge = self.build([], k, merge);\r\n                        }\r\n\r\n                        // Named\r\n                        else if (k.match(patterns.named)) {\r\n                            merge = self.build({}, k, merge);\r\n                        }\r\n                        */\r\n                    }\r\n\r\n                    json = $.extend(true, json, merge);\r\n                });\r\n\r\n                objectData = json;\r\n            });\r\n\r\n            var submitData = {\r\n                jsonformdata: JSON.stringify(objectData)\r\n            };\r\n\r\n            var submit = true;\r\n\r\n            if (submit) {\r\n                Ajax.call([{\r\n                    methodname: 'local_diagnostic_submit_' + this.stage + '_form',\r\n                    args: submitData,\r\n                    done: this.handleFormSubmissionResponse.bind(this, submitData),\r\n                    fail: Notification.exception\r\n                }]);\r\n            }\r\n\r\n            submitbtn.prop('disabled', false);\r\n        };\r\n\r\n        Diagnostic.prototype.getQuizzes = function(submitData) {\r\n            Ajax.call([{\r\n                methodname: 'local_diagnostic_get_quizzes',\r\n                args: submitData,\r\n                done: this.handleFormSubmissionResponse.bind(this, submitData),\r\n                fail: Notification.exception\r\n            }]);\r\n        };\r\n\r\n        Diagnostic.prototype.getClusters = function(submitData) {\r\n            /*\r\n            Ajax.call([{\r\n                methodname: 'local_diagnostic_get_quizzes',\r\n                args: submitData,\r\n                done: this.handleFormSubmissionResponse.bind(this, submitData),\r\n                fail: Notification.exception\r\n            }]);\r\n            */\r\n\r\n            let self = this;\r\n            let loadingIcon = this.modal.getRoot().find('[data-region=\"loading-icon-container\"]');\r\n            let svgСhartsEl = this.modal.getRoot().find('.svgСharts');\r\n            svgСhartsEl.html('');\r\n            loadingIcon.removeClass('hidden');\r\n\r\n            // http://m39.petel.learnapp.io/dev2/clusters.php\r\n            var request = {\r\n                methodname: 'local_diagnostic_get_clusters',\r\n                args: submitData\r\n            };\r\n\r\n            Ajax.call([request])[0].done(function(data) {\r\n                if (data.result) {\r\n                    loadingIcon.addClass('hidden');\r\n                    let jsondata = JSON.parse(data.json);\r\n\r\n                    // console.log('jsondata ', jsondata);\r\n                    BuubleAnimation(\".svgСharts\", jsondata, \"div.popup-local-diagnostic\", self.adParams, self.courseid, jsondata.attempt, jsondata.mid, jsondata.cmid);\r\n                } else {\r\n                    Notification.addNotification({\r\n                        message: data.message,\r\n                        type: 'error'\r\n                    });\r\n                }\r\n            }).fail(Notification.exception);\r\n        };\r\n\r\n        /**\r\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\r\n         *\r\n         * @method submitForm\r\n         * @param {Event} e Form submission event.\r\n         * @private\r\n         */\r\n        Diagnostic.prototype.submitForm = function(e) {\r\n            e.preventDefault();\r\n            this.modal.getRoot().find('form').submit();\r\n        };\r\n\r\n        Diagnostic.prototype.object_build = function(base, key, value){\r\n            base[key] = value;\r\n            return base;\r\n        };\r\n\r\n        Diagnostic.prototype.push_counter = function(key){\r\n            if(push_counters[key] === undefined){\r\n                push_counters[key] = 0;\r\n            }\r\n            return push_counters[key]++;\r\n        };\r\n\r\n        return /** @alias module:core_group/newgroup */ {\r\n            // Public variables and functions.\r\n            /**\r\n             * Attach event listeners to initialise this module.\r\n             *\r\n             * @method init\r\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\r\n             * @param courseid\r\n             * @return {Promise}\r\n             */\r\n            init: function(selector, courseid, adParams) {\r\n                var DiagnosticInstance = new Diagnostic($(selector), courseid, adParams);\r\n            }\r\n        };\r\n    });\r\n"],"names":["define","$","Str","ModalFactory","ModalEvents","Templates","Ajax","Y","Notification","BuubleAnimation","ufoFilter","Diagnostic","selector","courseid","adParams","this","init","prototype","modal","stage","stage1","stage2","formdata","daterangePlaceholder","triggers","get_strings","key","component","then","translateArr","create","title","footer","bind","root","addClass","getRoot","on","diagnostic","e","dateNow","data","dateFormat","Date","get_string","string","val","formData","daterange","getQuizzes","startDate","_d","endDate","shown","async","length","html","after","render","done","hidden","find","remove","setBody","save","submitForm","submitFormAjax","date","d","month","getMonth","day","getDate","year","getFullYear","join","getBody","imageTop","M","util","image_url","imageContent","secondarycolor","secondarylight","handleFormSubmissionResponse","response","result","substr","templatedata","diag","bodyEl","first","removeClass","daterangepicker","parentEl","locale","format","direction","initQuizzes","sections","hide","addNotification","message","type","activitiesNow","arr","multiselect","enableClickableOptGroups","enableCollapsibleOptGroups","disableIfEmpty","includeSubmitOption","submitText","includeSubmitDivider","nonSelectedText","buttonWidth","templates","popupContainer","onInitialized","btnActivities","removeAttr","attr","onChange","console","log","value","cmids","getClusters","buttonText","options","select","firstChild","onDropdownShown","popupEl","css","width","getSelectedOptions","handleFormSubmissionFailure","preventDefault","submitbtn","changeEvent","document","createEvent","initEvent","each","index","element","dispatchEvent","invalid","merge","focus","i","checkbox","is","prop","objectData","self","json","push_counters","patterns","validate","push","fixed","named","build","base","push_counter","undefined","serializeArray","test","name","k","keys","match","reverse_key","pop","replace","RegExp","extend","submitData","jsonformdata","JSON","stringify","call","methodname","args","fail","exception","loadingIcon","request","jsondata","parse","attempt","mid","cmid","submit","object_build"],"mappings":"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"}