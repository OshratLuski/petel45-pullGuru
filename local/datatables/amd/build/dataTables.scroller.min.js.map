{"version":3,"sources":["../src/dataTables.scroller.js"],"names":["factory","define","amd","$","window","document","exports","module","root","fn","dataTable","require","jQuery","DataTable","Scroller","dt","opts","alert","dtApi","Api","s","settings","tableTop","tableBottom","redrawTop","redrawBottom","autoHeight","viewportRows","stateTO","stateSaveThrottle","drawTO","heights","jump","page","virtual","scroll","row","viewport","labelFactor","topRowFloat","scrollDrawDiff","loaderVisible","forceReposition","baseRowTop","baseScrollTop","mousedown","lastScrollTop","extend","oDefaults","rowHeight","dom","createElement","oScroller","construct","prototype","measure","redraw","_calcRowHeight","_parseHeight","scroller","css","parseInt","_iDisplayLength","displayBuffer","label","outerHeight","oInstance","fnDraw","pageInfo","iScrollTop","scrollTop","iTotal","fnRecordsDisplay","iPossibleEnd","Math","ceil","pixelsToRow","ani","start","floor","end","pixels","intParse","diff","_domain","rowToPixels","rowIdx","scrollToRow","animate","that","px","preRows","drawRow","_iDisplayStart","setTimeout","oFeatures","bPaginate","oApi","_fnLog","force","style","position","top","left","width","oClasses","sScrollBody","nTableWrapper","appendChild","table","container","addClass","loadingIndicator","loader","oLanguage","sLoadingRecords","parentNode","append","appendTo","ingnoreScroll","on","_scroll","call","labelVisible","_info","initialStateSave","loadedState","state","loaded","e","data","topRow","_fnThrottle","save","scrollType","_draw","_scrollForce","off","nTable","removeClass","remove","origTable","cloneNode","tbody","sWrapper","sScrollWrapper","clone","rowsCount","length","prepend","insertEl","nHolding","is","find","removeAttr","eq","iTableHeight","height","displayStart","displayLen","displayEnd","skip","bSorted","bFiltered","_drawHold","boundaryPx","boundaryScale","bStateSave","oLoadedState","ajaxSourced","sAjaxSource","ajax","bServerSide","iDraw","bInfo","dir","val","magic","m","c","language","iStart","iMax","fnRecordsTotal","iEnd","sStart","fnFormatNumber","sEnd","sMax","sTotal","sOut","sInfoEmpty","sInfoPostFix","sInfoFiltered","replace","sInfo","callback","fnInfoCallback","n","aanFeatures","i","iLen","html","triggerHandler","cssHeight","matches","exec","value","parseFloat","unit","iTopRow","clearTimeout","abs","targetTop","offset","draw","_fnDraw","serverWait","max","defaults","version","namespace","init","oInit","register","ctx","context","idx","iterator","displayIdx","rows","order","search","indexes","indexOf"],"mappings":"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","sourcesContent":["/*! Scroller 2.0.3\n * ©2011-2020 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * @summary     Scroller\n * @description Virtual rendering for DataTables\n * @version     2.0.3\n * @file        dataTables.scroller.js\n * @author      SpryMedia Ltd (www.sprymedia.co.uk)\n * @contact     www.sprymedia.co.uk/contact\n * @copyright   Copyright 2011-2020 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license/mit\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n\n(function( factory ){\n\t\"use strict\";\n\n\tif ( typeof define === 'function' && define.amd ) {\n\t\t// AMD\n\t\tdefine( ['jquery', 'local_datatables/jquery.dataTables'], function ( $ ) {\n\t\t\treturn factory( $, window, document );\n\t\t} );\n\t}\n\telse if ( typeof exports === 'object' ) {\n\t\t// CommonJS\n\t\tmodule.exports = function (root, $) {\n\t\t\tif ( ! root ) {\n\t\t\t\troot = window;\n\t\t\t}\n\n\t\t\tif ( ! $ || ! $.fn.dataTable ) {\n\t\t\t\t$ = require('local_datatables/jquery.dataTables')(root, $).$;\n\t\t\t}\n\n\t\t\treturn factory( $, root, root.document );\n\t\t};\n\t}\n\telse {\n\t\t// Browser\n\t\tfactory( jQuery, window, document );\n\t}\n}(function( $, window, document, undefined ) {\n'use strict';\nvar DataTable = $.fn.dataTable;\n\n\n/**\n * Scroller is a virtual rendering plug-in for DataTables which allows large\n * datasets to be drawn on screen every quickly. What the virtual rendering means\n * is that only the visible portion of the table (and a bit to either side to make\n * the scrolling smooth) is drawn, while the scrolling container gives the\n * visual impression that the whole table is visible. This is done by making use\n * of the pagination abilities of DataTables and moving the table around in the\n * scrolling container DataTables adds to the page. The scrolling container is\n * forced to the height it would be for the full table display using an extra\n * element.\n *\n * Note that rows in the table MUST all be the same height. Information in a cell\n * which expands on to multiple lines will cause some odd behaviour in the scrolling.\n *\n * Scroller is initialised by simply including the letter 'S' in the sDom for the\n * table you want to have this feature enabled on. Note that the 'S' must come\n * AFTER the 't' parameter in `dom`.\n *\n * Key features include:\n *   <ul class=\"limit_length\">\n *     <li>Speed! The aim of Scroller for DataTables is to make rendering large data sets fast</li>\n *     <li>Full compatibility with deferred rendering in DataTables for maximum speed</li>\n *     <li>Display millions of rows</li>\n *     <li>Integration with state saving in DataTables (scrolling position is saved)</li>\n *     <li>Easy to use</li>\n *   </ul>\n *\n *  @class\n *  @constructor\n *  @global\n *  @param {object} dt DataTables settings object or API instance\n *  @param {object} [opts={}] Configuration object for FixedColumns. Options \n *    are defined by {@link Scroller.defaults}\n *\n *  @requires jQuery 1.7+\n *  @requires DataTables 1.10.0+\n *\n *  @example\n *    $(document).ready(function() {\n *        $('#example').DataTable( {\n *            \"scrollY\": \"200px\",\n *            \"ajax\": \"media/dataset/large.txt\",\n *            \"scroller\": true,\n *            \"deferRender\": true\n *        } );\n *    } );\n */\nvar Scroller = function ( dt, opts ) {\n\t/* Sanity check - you just know it will happen */\n\tif ( ! (this instanceof Scroller) ) {\n\t\talert( \"Scroller warning: Scroller must be initialised with the 'new' keyword.\" );\n\t\treturn;\n\t}\n\n\tif ( opts === undefined ) {\n\t\topts = {};\n\t}\n\n\tvar dtApi = $.fn.dataTable.Api( dt );\n\n\t/**\n\t * Settings object which contains customisable information for the Scroller instance\n\t * @namespace\n\t * @private\n\t * @extends Scroller.defaults\n\t */\n\tthis.s = {\n\t\t/**\n\t\t * DataTables settings object\n\t\t *  @type     object\n\t\t *  @default  Passed in as first parameter to constructor\n\t\t */\n\t\tdt: dtApi.settings()[0],\n\n\t\t/**\n\t\t * DataTables API instance\n\t\t *  @type     DataTable.Api\n\t\t */\n\t\tdtApi: dtApi,\n\n\t\t/**\n\t\t * Pixel location of the top of the drawn table in the viewport\n\t\t *  @type     int\n\t\t *  @default  0\n\t\t */\n\t\ttableTop: 0,\n\n\t\t/**\n\t\t * Pixel location of the bottom of the drawn table in the viewport\n\t\t *  @type     int\n\t\t *  @default  0\n\t\t */\n\t\ttableBottom: 0,\n\n\t\t/**\n\t\t * Pixel location of the boundary for when the next data set should be loaded and drawn\n\t\t * when scrolling up the way.\n\t\t *  @type     int\n\t\t *  @default  0\n\t\t *  @private\n\t\t */\n\t\tredrawTop: 0,\n\n\t\t/**\n\t\t * Pixel location of the boundary for when the next data set should be loaded and drawn\n\t\t * when scrolling down the way. Note that this is actually calculated as the offset from\n\t\t * the top.\n\t\t *  @type     int\n\t\t *  @default  0\n\t\t *  @private\n\t\t */\n\t\tredrawBottom: 0,\n\n\t\t/**\n\t\t * Auto row height or not indicator\n\t\t *  @type     bool\n\t\t *  @default  0\n\t\t */\n\t\tautoHeight: true,\n\n\t\t/**\n\t\t * Number of rows calculated as visible in the visible viewport\n\t\t *  @type     int\n\t\t *  @default  0\n\t\t */\n\t\tviewportRows: 0,\n\n\t\t/**\n\t\t * setTimeout reference for state saving, used when state saving is enabled in the DataTable\n\t\t * and when the user scrolls the viewport in order to stop the cookie set taking too much\n\t\t * CPU!\n\t\t *  @type     int\n\t\t *  @default  0\n\t\t */\n\t\tstateTO: null,\n\n\t\tstateSaveThrottle: function () {},\n\n\t\t/**\n\t\t * setTimeout reference for the redraw, used when server-side processing is enabled in the\n\t\t * DataTables in order to prevent DoSing the server\n\t\t *  @type     int\n\t\t *  @default  null\n\t\t */\n\t\tdrawTO: null,\n\n\t\theights: {\n\t\t\tjump: null,\n\t\t\tpage: null,\n\t\t\tvirtual: null,\n\t\t\tscroll: null,\n\n\t\t\t/**\n\t\t\t * Height of rows in the table\n\t\t\t *  @type     int\n\t\t\t *  @default  0\n\t\t\t */\n\t\t\trow: null,\n\n\t\t\t/**\n\t\t\t * Pixel height of the viewport\n\t\t\t *  @type     int\n\t\t\t *  @default  0\n\t\t\t */\n\t\t\tviewport: null,\n\t\t\tlabelFactor: 1\n\t\t},\n\n\t\ttopRowFloat: 0,\n\t\tscrollDrawDiff: null,\n\t\tloaderVisible: false,\n\t\tforceReposition: false,\n\t\tbaseRowTop: 0,\n\t\tbaseScrollTop: 0,\n\t\tmousedown: false,\n\t\tlastScrollTop: 0\n\t};\n\n\t// @todo The defaults should extend a `c` property and the internal settings\n\t// only held in the `s` property. At the moment they are mixed\n\tthis.s = $.extend( this.s, Scroller.oDefaults, opts );\n\n\t// Workaround for row height being read from height object (see above comment)\n\tthis.s.heights.row = this.s.rowHeight;\n\n\t/**\n\t * DOM elements used by the class instance\n\t * @private\n\t * @namespace\n\t *\n\t */\n\tthis.dom = {\n\t\t\"force\":    document.createElement('div'),\n\t\t\"label\":    $('<div class=\"dts_label\">0</div>'),\n\t\t\"scroller\": null,\n\t\t\"table\":    null,\n\t\t\"loader\":   null\n\t};\n\n\t// Attach the instance to the DataTables instance so it can be accessed in\n\t// future. Don't initialise Scroller twice on the same table\n\tif ( this.s.dt.oScroller ) {\n\t\treturn;\n\t}\n\n\tthis.s.dt.oScroller = this;\n\n\t/* Let's do it */\n\tthis.construct();\n};\n\n\n\n$.extend( Scroller.prototype, {\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Public methods - to be exposed via the DataTables API\n\t */\n\n\t/**\n\t * Calculate and store information about how many rows are to be displayed\n\t * in the scrolling viewport, based on current dimensions in the browser's\n\t * rendering. This can be particularly useful if the table is initially\n\t * drawn in a hidden element - for example in a tab.\n\t *  @param {bool} [redraw=true] Redraw the table automatically after the recalculation, with\n\t *    the new dimensions forming the basis for the draw.\n\t *  @returns {void}\n\t */\n\tmeasure: function ( redraw )\n\t{\n\t\tif ( this.s.autoHeight )\n\t\t{\n\t\t\tthis._calcRowHeight();\n\t\t}\n\n\t\tvar heights = this.s.heights;\n\n\t\tif ( heights.row ) {\n\t\t\theights.viewport = this._parseHeight($(this.dom.scroller).css('max-height'));\n\n\t\t\tthis.s.viewportRows = parseInt( heights.viewport / heights.row, 10 )+1;\n\t\t\tthis.s.dt._iDisplayLength = this.s.viewportRows * this.s.displayBuffer;\n\t\t}\n\n\t\tvar label = this.dom.label.outerHeight();\n\t\theights.labelFactor = (heights.viewport-label) / heights.scroll;\n\n\t\tif ( redraw === undefined || redraw )\n\t\t{\n\t\t\tthis.s.dt.oInstance.fnDraw( false );\n\t\t}\n\t},\n\n\t/**\n\t * Get information about current displayed record range. This corresponds to\n\t * the information usually displayed in the \"Info\" block of the table.\n\t *\n\t * @returns {object} info as an object:\n\t *  {\n\t *      start: {int}, // the 0-indexed record at the top of the viewport\n\t *      end:   {int}, // the 0-indexed record at the bottom of the viewport\n\t *  }\n\t*/\n\tpageInfo: function()\n\t{\n\t\tvar \n\t\t\tdt = this.s.dt,\n\t\t\tiScrollTop = this.dom.scroller.scrollTop,\n\t\t\tiTotal = dt.fnRecordsDisplay(),\n\t\t\tiPossibleEnd = Math.ceil(this.pixelsToRow(iScrollTop + this.s.heights.viewport, false, this.s.ani));\n\n\t\treturn {\n\t\t\tstart: Math.floor(this.pixelsToRow(iScrollTop, false, this.s.ani)),\n\t\t\tend: iTotal < iPossibleEnd ? iTotal-1 : iPossibleEnd-1\n\t\t};\n\t},\n\n\t/**\n\t * Calculate the row number that will be found at the given pixel position\n\t * (y-scroll).\n\t *\n\t * Please note that when the height of the full table exceeds 1 million\n\t * pixels, Scroller switches into a non-linear mode for the scrollbar to fit\n\t * all of the records into a finite area, but this function returns a linear\n\t * value (relative to the last non-linear positioning).\n\t *  @param {int} pixels Offset from top to calculate the row number of\n\t *  @param {int} [intParse=true] If an integer value should be returned\n\t *  @param {int} [virtual=false] Perform the calculations in the virtual domain\n\t *  @returns {int} Row index\n\t */\n\tpixelsToRow: function ( pixels, intParse, virtual )\n\t{\n\t\tvar diff = pixels - this.s.baseScrollTop;\n\t\tvar row = virtual ?\n\t\t\t(this._domain( 'physicalToVirtual', this.s.baseScrollTop ) + diff) / this.s.heights.row :\n\t\t\t( diff / this.s.heights.row ) + this.s.baseRowTop;\n\n\t\treturn intParse || intParse === undefined ?\n\t\t\tparseInt( row, 10 ) :\n\t\t\trow;\n\t},\n\n\t/**\n\t * Calculate the pixel position from the top of the scrolling container for\n\t * a given row\n\t *  @param {int} iRow Row number to calculate the position of\n\t *  @returns {int} Pixels\n\t */\n\trowToPixels: function ( rowIdx, intParse, virtual )\n\t{\n\t\tvar pixels;\n\t\tvar diff = rowIdx - this.s.baseRowTop;\n\n\t\tif ( virtual ) {\n\t\t\tpixels = this._domain( 'virtualToPhysical', this.s.baseScrollTop );\n\t\t\tpixels += diff * this.s.heights.row;\n\t\t}\n\t\telse {\n\t\t\tpixels = this.s.baseScrollTop;\n\t\t\tpixels += diff * this.s.heights.row;\n\t\t}\n\n\t\treturn intParse || intParse === undefined ?\n\t\t\tparseInt( pixels, 10 ) :\n\t\t\tpixels;\n\t},\n\n\n\t/**\n\t * Calculate the row number that will be found at the given pixel position (y-scroll)\n\t *  @param {int} row Row index to scroll to\n\t *  @param {bool} [animate=true] Animate the transition or not\n\t *  @returns {void}\n\t */\n\tscrollToRow: function ( row, animate )\n\t{\n\t\tvar that = this;\n\t\tvar ani = false;\n\t\tvar px = this.rowToPixels( row );\n\n\t\t// We need to know if the table will redraw or not before doing the\n\t\t// scroll. If it will not redraw, then we need to use the currently\n\t\t// displayed table, and scroll with the physical pixels. Otherwise, we\n\t\t// need to calculate the table's new position from the virtual\n\t\t// transform.\n\t\tvar preRows = ((this.s.displayBuffer-1)/2) * this.s.viewportRows;\n\t\tvar drawRow = row - preRows;\n\t\tif ( drawRow < 0 ) {\n\t\t\tdrawRow = 0;\n\t\t}\n\n\t\tif ( (px > this.s.redrawBottom || px < this.s.redrawTop) && this.s.dt._iDisplayStart !== drawRow ) {\n\t\t\tani = true;\n\t\t\tpx = this._domain( 'virtualToPhysical', row * this.s.heights.row );\n\n\t\t\t// If we need records outside the current draw region, but the new\n\t\t\t// scrolling position is inside that (due to the non-linear nature\n\t\t\t// for larger numbers of records), we need to force position update.\n\t\t\tif ( this.s.redrawTop < px && px < this.s.redrawBottom ) {\n\t\t\t\tthis.s.forceReposition = true;\n\t\t\t\tanimate = false;\n\t\t\t}\n\t\t}\n\n\t\tif ( animate === undefined || animate )\n\t\t{\n\t\t\tthis.s.ani = ani;\n\t\t\t$(this.dom.scroller).animate( {\n\t\t\t\t\"scrollTop\": px\n\t\t\t}, function () {\n\t\t\t\t// This needs to happen after the animation has completed and\n\t\t\t\t// the final scroll event fired\n\t\t\t\tsetTimeout( function () {\n\t\t\t\t\tthat.s.ani = false;\n\t\t\t\t}, 250 );\n\t\t\t} );\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$(this.dom.scroller).scrollTop( px );\n\t\t}\n\t},\n\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Constructor\n\t */\n\n\t/**\n\t * Initialisation for Scroller\n\t *  @returns {void}\n\t *  @private\n\t */\n\tconstruct: function ()\n\t{\n\t\tvar that = this;\n\t\tvar dt = this.s.dtApi;\n\n\t\t/* Sanity check */\n\t\tif ( !this.s.dt.oFeatures.bPaginate ) {\n\t\t\tthis.s.dt.oApi._fnLog( this.s.dt, 0, 'Pagination must be enabled for Scroller' );\n\t\t\treturn;\n\t\t}\n\n\t\t/* Insert a div element that we can use to force the DT scrolling container to\n\t\t * the height that would be required if the whole table was being displayed\n\t\t */\n\t\tthis.dom.force.style.position = \"relative\";\n\t\tthis.dom.force.style.top = \"0px\";\n\t\tthis.dom.force.style.left = \"0px\";\n\t\tthis.dom.force.style.width = \"1px\";\n\n\t\tthis.dom.scroller = $('div.'+this.s.dt.oClasses.sScrollBody, this.s.dt.nTableWrapper)[0];\n\t\tthis.dom.scroller.appendChild( this.dom.force );\n\t\tthis.dom.scroller.style.position = \"relative\";\n\n\t\tthis.dom.table = $('>table', this.dom.scroller)[0];\n\t\tthis.dom.table.style.position = \"absolute\";\n\t\tthis.dom.table.style.top = \"0px\";\n\t\tthis.dom.table.style.left = \"0px\";\n\n\t\t// Add class to 'announce' that we are a Scroller table\n\t\t$(dt.table().container()).addClass('dts DTS');\n\n\t\t// Add a 'loading' indicator\n\t\tif ( this.s.loadingIndicator )\n\t\t{\n\t\t\tthis.dom.loader = $('<div class=\"dataTables_processing dts_loading\">'+this.s.dt.oLanguage.sLoadingRecords+'</div>')\n\t\t\t\t.css('display', 'none');\n\n\t\t\t$(this.dom.scroller.parentNode)\n\t\t\t\t.css('position', 'relative')\n\t\t\t\t.append( this.dom.loader );\n\t\t}\n\n\t\tthis.dom.label.appendTo(this.dom.scroller);\n\n\t\t/* Initial size calculations */\n\t\tif ( this.s.heights.row && this.s.heights.row != 'auto' )\n\t\t{\n\t\t\tthis.s.autoHeight = false;\n\t\t}\n\n\t\t// Scrolling callback to see if a page change is needed\n\t\tthis.s.ingnoreScroll = true;\n\t\t$(this.dom.scroller).on( 'scroll.dt-scroller', function (e) {\n\t\t\tthat._scroll.call( that );\n\t\t} );\n\n\t\t// In iOS we catch the touchstart event in case the user tries to scroll\n\t\t// while the display is already scrolling\n\t\t$(this.dom.scroller).on('touchstart.dt-scroller', function () {\n\t\t\tthat._scroll.call( that );\n\t\t} );\n\n\t\t$(this.dom.scroller)\n\t\t\t.on('mousedown.dt-scroller', function () {\n\t\t\t\tthat.s.mousedown = true;\n\t\t\t})\n\t\t\t.on('mouseup.dt-scroller', function () {\n\t\t\t\tthat.s.labelVisible = false;\n\t\t\t\tthat.s.mousedown = false;\n\t\t\t\tthat.dom.label.css('display', 'none');\n\t\t\t});\n\n\t\t// On resize, update the information element, since the number of rows shown might change\n\t\t$(window).on( 'resize.dt-scroller', function () {\n\t\t\tthat.measure( false );\n\t\t\tthat._info();\n\t\t} );\n\n\t\t// Add a state saving parameter to the DT state saving so we can restore the exact\n\t\t// position of the scrolling.\n\t\tvar initialStateSave = true;\n\t\tvar loadedState = dt.state.loaded();\n\n\t\tdt.on( 'stateSaveParams.scroller', function ( e, settings, data ) {\n\t\t\tif ( initialStateSave && loadedState ) {\n\t\t\t\tdata.scroller = loadedState.scroller;\n\t\t\t\tinitialStateSave = false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Need to used the saved position on init\n\t\t\t\tdata.scroller = {\n\t\t\t\t\ttopRow: that.s.topRowFloat,\n\t\t\t\t\tbaseScrollTop: that.s.baseScrollTop,\n\t\t\t\t\tbaseRowTop: that.s.baseRowTop,\n\t\t\t\t\tscrollTop: that.s.lastScrollTop\n\t\t\t\t};\n\t\t\t}\n\t\t} );\n\n\t\tif ( loadedState && loadedState.scroller ) {\n\t\t\tthis.s.topRowFloat = loadedState.scroller.topRow;\n\t\t\tthis.s.baseScrollTop = loadedState.scroller.baseScrollTop;\n\t\t\tthis.s.baseRowTop = loadedState.scroller.baseRowTop;\n\t\t}\n\n\t\tthis.measure( false );\n\t\n\t\tthat.s.stateSaveThrottle = that.s.dt.oApi._fnThrottle( function () {\n\t\t\tthat.s.dtApi.state.save();\n\t\t}, 500 );\n\n\t\tdt.on( 'init.scroller', function () {\n\t\t\tthat.measure( false );\n\n\t\t\t// Setting to `jump` will instruct _draw to calculate the scroll top\n\t\t\t// position\n\t\t\tthat.s.scrollType = 'jump';\n\t\t\tthat._draw();\n\n\t\t\t// Update the scroller when the DataTable is redrawn\n\t\t\tdt.on( 'draw.scroller', function () {\n\t\t\t\tthat._draw();\n\t\t\t});\n\t\t} );\n\n\t\t// Set height before the draw happens, allowing everything else to update\n\t\t// on draw complete without worry for roder.\n\t\tdt.on( 'preDraw.dt.scroller', function () {\n\t\t\tthat._scrollForce();\n\t\t} );\n\n\t\t// Destructor\n\t\tdt.on( 'destroy.scroller', function () {\n\t\t\t$(window).off( 'resize.dt-scroller' );\n\t\t\t$(that.dom.scroller).off('.dt-scroller');\n\t\t\t$(that.s.dt.nTable).off( '.scroller' );\n\n\t\t\t$(that.s.dt.nTableWrapper).removeClass('DTS');\n\t\t\t$('div.DTS_Loading', that.dom.scroller.parentNode).remove();\n\n\t\t\tthat.dom.table.style.position = \"\";\n\t\t\tthat.dom.table.style.top = \"\";\n\t\t\tthat.dom.table.style.left = \"\";\n\t\t} );\n\t},\n\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Private methods\n\t */\n\n\t/**\n\t * Automatic calculation of table row height. This is just a little tricky here as using\n\t * initialisation DataTables has tale the table out of the document, so we need to create\n\t * a new table and insert it into the document, calculate the row height and then whip the\n\t * table out.\n\t *  @returns {void}\n\t *  @private\n\t */\n\t_calcRowHeight: function ()\n\t{\n\t\tvar dt = this.s.dt;\n\t\tvar origTable = dt.nTable;\n\t\tvar nTable = origTable.cloneNode( false );\n\t\tvar tbody = $('<tbody/>').appendTo( nTable );\n\t\tvar container = $(\n\t\t\t'<div class=\"'+dt.oClasses.sWrapper+' DTS\">'+\n\t\t\t\t'<div class=\"'+dt.oClasses.sScrollWrapper+'\">'+\n\t\t\t\t\t'<div class=\"'+dt.oClasses.sScrollBody+'\"></div>'+\n\t\t\t\t'</div>'+\n\t\t\t'</div>'\n\t\t);\n\n\t\t// Want 3 rows in the sizing table so :first-child and :last-child\n\t\t// CSS styles don't come into play - take the size of the middle row\n\t\t$('tbody tr:lt(4)', origTable).clone().appendTo( tbody );\n        var rowsCount = $('tr', tbody).length;\n\n        if ( rowsCount === 1 ) {\n            tbody.prepend('<tr><td>&#160;</td></tr>');\n            tbody.append('<tr><td>&#160;</td></tr>');\n\t\t}\n\t\telse {\n            for (; rowsCount < 3; rowsCount++) {\n                tbody.append('<tr><td>&#160;</td></tr>');\n            }\n\t\t}\n\t\n\t\t$('div.'+dt.oClasses.sScrollBody, container).append( nTable );\n\n\t\t// If initialised using `dom`, use the holding element as the insert point\n\t\tvar insertEl = this.s.dt.nHolding || origTable.parentNode;\n\n\t\tif ( ! $(insertEl).is(':visible') ) {\n\t\t\tinsertEl = 'body';\n\t\t}\n\n\t\t// Remove form element links as they might select over others (particularly radio and checkboxes)\n\t\tcontainer.find(\"input\").removeAttr(\"name\");\n\n\t\tcontainer.appendTo( insertEl );\n\t\tthis.s.heights.row = $('tr', tbody).eq(1).outerHeight();\n\n\t\tcontainer.remove();\n\t},\n\n\t/**\n\t * Draw callback function which is fired when the DataTable is redrawn. The main function of\n\t * this method is to position the drawn table correctly the scrolling container for the rows\n\t * that is displays as a result of the scrolling position.\n\t *  @returns {void}\n\t *  @private\n\t */\n\t_draw: function ()\n\t{\n\t\tvar\n\t\t\tthat = this,\n\t\t\theights = this.s.heights,\n\t\t\tiScrollTop = this.dom.scroller.scrollTop,\n\t\t\tiTableHeight = $(this.s.dt.nTable).height(),\n\t\t\tdisplayStart = this.s.dt._iDisplayStart,\n\t\t\tdisplayLen = this.s.dt._iDisplayLength,\n\t\t\tdisplayEnd = this.s.dt.fnRecordsDisplay();\n\n\t\t// Disable the scroll event listener while we are updating the DOM\n\t\tthis.s.skip = true;\n\n\t\t// If paging is reset\n\t\tif ( (this.s.dt.bSorted || this.s.dt.bFiltered) && displayStart === 0 && !this.s.dt._drawHold ) {\n\t\t\tthis.s.topRowFloat = 0;\n\t\t}\n\n\t\tiScrollTop = this.s.scrollType === 'jump' ?\n\t\t\tthis._domain( 'virtualToPhysical', this.s.topRowFloat * heights.row ) :\n\t\t\tiScrollTop;\n\n\t\t// Store positional information so positional calculations can be based\n\t\t// upon the current table draw position\n\t\tthis.s.baseScrollTop = iScrollTop;\n\t\tthis.s.baseRowTop = this.s.topRowFloat;\n\n\t\t// Position the table in the virtual scroller\n\t\tvar tableTop = iScrollTop - ((this.s.topRowFloat - displayStart) * heights.row);\n\t\tif ( displayStart === 0 ) {\n\t\t\ttableTop = 0;\n\t\t}\n\t\telse if ( displayStart + displayLen >= displayEnd ) {\n\t\t\ttableTop = heights.scroll - iTableHeight;\n\t\t}\n\n\t\tthis.dom.table.style.top = tableTop+'px';\n\n\t\t/* Cache some information for the scroller */\n\t\tthis.s.tableTop = tableTop;\n\t\tthis.s.tableBottom = iTableHeight + this.s.tableTop;\n\n\t\t// Calculate the boundaries for where a redraw will be triggered by the\n\t\t// scroll event listener\n\t\tvar boundaryPx = (iScrollTop - this.s.tableTop) * this.s.boundaryScale;\n\t\tthis.s.redrawTop = iScrollTop - boundaryPx;\n\t\tthis.s.redrawBottom = iScrollTop + boundaryPx > heights.scroll - heights.viewport - heights.row ?\n\t\t\theights.scroll - heights.viewport - heights.row :\n\t\t\tiScrollTop + boundaryPx;\n\n\t\tthis.s.skip = false;\n\n\t\t// Restore the scrolling position that was saved by DataTable's state\n\t\t// saving Note that this is done on the second draw when data is Ajax\n\t\t// sourced, and the first draw when DOM soured\n\t\tif ( this.s.dt.oFeatures.bStateSave && this.s.dt.oLoadedState !== null &&\n\t\t\t typeof this.s.dt.oLoadedState.scroller != 'undefined' )\n\t\t{\n\t\t\t// A quirk of DataTables is that the draw callback will occur on an\n\t\t\t// empty set if Ajax sourced, but not if server-side processing.\n\t\t\tvar ajaxSourced = (this.s.dt.sAjaxSource || that.s.dt.ajax) && ! this.s.dt.oFeatures.bServerSide ?\n\t\t\t\ttrue :\n\t\t\t\tfalse;\n\n\t\t\tif ( ( ajaxSourced && this.s.dt.iDraw == 2) ||\n\t\t\t     (!ajaxSourced && this.s.dt.iDraw == 1) )\n\t\t\t{\n\t\t\t\tsetTimeout( function () {\n\t\t\t\t\t$(that.dom.scroller).scrollTop( that.s.dt.oLoadedState.scroller.scrollTop );\n\n\t\t\t\t\t// In order to prevent layout thrashing we need another\n\t\t\t\t\t// small delay\n\t\t\t\t\tsetTimeout( function () {\n\t\t\t\t\t\tthat.s.ingnoreScroll = false;\n\t\t\t\t\t}, 0 );\n\t\t\t\t}, 0 );\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthat.s.ingnoreScroll = false;\n\t\t}\n\n\t\t// Because of the order of the DT callbacks, the info update will\n\t\t// take precedence over the one we want here. So a 'thread' break is\n\t\t// needed.  Only add the thread break if bInfo is set\n\t\tif ( this.s.dt.oFeatures.bInfo ) {\n\t\t\tsetTimeout( function () {\n\t\t\t\tthat._info.call( that );\n\t\t\t}, 0 );\n\t\t}\n\n\t\t// Hide the loading indicator\n\t\tif ( this.dom.loader && this.s.loaderVisible ) {\n\t\t\tthis.dom.loader.css( 'display', 'none' );\n\t\t\tthis.s.loaderVisible = false;\n\t\t}\n\t},\n\n\t/**\n\t * Convert from one domain to another. The physical domain is the actual\n\t * pixel count on the screen, while the virtual is if we had browsers which\n\t * had scrolling containers of infinite height (i.e. the absolute value)\n\t *\n\t *  @param {string} dir Domain transform direction, `virtualToPhysical` or\n\t *    `physicalToVirtual` \n\t *  @returns {number} Calculated transform\n\t *  @private\n\t */\n\t_domain: function ( dir, val )\n\t{\n\t\tvar heights = this.s.heights;\n\t\tvar diff;\n\t\tvar magic = 10000; // the point at which the non-linear calculations start to happen\n\n\t\t// If the virtual and physical height match, then we use a linear\n\t\t// transform between the two, allowing the scrollbar to be linear\n\t\tif ( heights.virtual === heights.scroll ) {\n\t\t\treturn val;\n\t\t}\n\n\t\t// In the first 10k pixels and the last 10k pixels, we want the scrolling\n\t\t// to be linear. After that it can be non-linear. It would be unusual for\n\t\t// anyone to mouse wheel through that much.\n\t\tif ( val < magic ) {\n\t\t\treturn val;\n\t\t}\n\t\telse if ( dir === 'virtualToPhysical' && val >= heights.virtual - magic ) {\n\t\t\tdiff = heights.virtual - val;\n\t\t\treturn heights.scroll - diff;\n\t\t}\n\t\telse if ( dir === 'physicalToVirtual' && val >= heights.scroll - magic ) {\n\t\t\tdiff = heights.scroll - val;\n\t\t\treturn heights.virtual - diff;\n\t\t}\n\n\t\t// Otherwise, we want a non-linear scrollbar to take account of the\n\t\t// redrawing regions at the start and end of the table, otherwise these\n\t\t// can stutter badly - on large tables 30px (for example) scroll might\n\t\t// be hundreds of rows, so the table would be redrawing every few px at\n\t\t// the start and end. Use a simple linear eq. to stop this, effectively\n\t\t// causing a kink in the scrolling ratio. It does mean the scrollbar is\n\t\t// non-linear, but with such massive data sets, the scrollbar is going\n\t\t// to be a best guess anyway\n\t\tvar m = (heights.virtual - magic - magic) / (heights.scroll - magic - magic);\n\t\tvar c = magic - (m*magic);\n\n\t\treturn dir === 'virtualToPhysical' ?\n\t\t\t(val-c) / m :\n\t\t\t(m*val) + c;\n\t},\n\n\t/**\n\t * Update any information elements that are controlled by the DataTable based on the scrolling\n\t * viewport and what rows are visible in it. This function basically acts in the same way as\n\t * _fnUpdateInfo in DataTables, and effectively replaces that function.\n\t *  @returns {void}\n\t *  @private\n\t */\n\t_info: function ()\n\t{\n\t\tif ( !this.s.dt.oFeatures.bInfo )\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tvar\n\t\t\tdt = this.s.dt,\n\t\t\tlanguage = dt.oLanguage,\n\t\t\tiScrollTop = this.dom.scroller.scrollTop,\n\t\t\tiStart = Math.floor( this.pixelsToRow(iScrollTop, false, this.s.ani)+1 ),\n\t\t\tiMax = dt.fnRecordsTotal(),\n\t\t\tiTotal = dt.fnRecordsDisplay(),\n\t\t\tiPossibleEnd = Math.ceil( this.pixelsToRow(iScrollTop+this.s.heights.viewport, false, this.s.ani) ),\n\t\t\tiEnd = iTotal < iPossibleEnd ? iTotal : iPossibleEnd,\n\t\t\tsStart = dt.fnFormatNumber( iStart ),\n\t\t\tsEnd = dt.fnFormatNumber( iEnd ),\n\t\t\tsMax = dt.fnFormatNumber( iMax ),\n\t\t\tsTotal = dt.fnFormatNumber( iTotal ),\n\t\t\tsOut;\n\n\t\tif ( dt.fnRecordsDisplay() === 0 &&\n\t\t\t   dt.fnRecordsDisplay() == dt.fnRecordsTotal() )\n\t\t{\n\t\t\t/* Empty record set */\n\t\t\tsOut = language.sInfoEmpty+ language.sInfoPostFix;\n\t\t}\n\t\telse if ( dt.fnRecordsDisplay() === 0 )\n\t\t{\n\t\t\t/* Empty record set after filtering */\n\t\t\tsOut = language.sInfoEmpty +' '+\n\t\t\t\tlanguage.sInfoFiltered.replace('_MAX_', sMax)+\n\t\t\t\t\tlanguage.sInfoPostFix;\n\t\t}\n\t\telse if ( dt.fnRecordsDisplay() == dt.fnRecordsTotal() )\n\t\t{\n\t\t\t/* Normal record set */\n\t\t\tsOut = language.sInfo.\n\t\t\t\t\treplace('_START_', sStart).\n\t\t\t\t\treplace('_END_',   sEnd).\n\t\t\t\t\treplace('_MAX_',   sMax).\n\t\t\t\t\treplace('_TOTAL_', sTotal)+\n\t\t\t\tlanguage.sInfoPostFix;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/* Record set after filtering */\n\t\t\tsOut = language.sInfo.\n\t\t\t\t\treplace('_START_', sStart).\n\t\t\t\t\treplace('_END_',   sEnd).\n\t\t\t\t\treplace('_MAX_',   sMax).\n\t\t\t\t\treplace('_TOTAL_', sTotal) +' '+\n\t\t\t\tlanguage.sInfoFiltered.replace(\n\t\t\t\t\t'_MAX_',\n\t\t\t\t\tdt.fnFormatNumber(dt.fnRecordsTotal())\n\t\t\t\t)+\n\t\t\t\tlanguage.sInfoPostFix;\n\t\t}\n\n\t\tvar callback = language.fnInfoCallback;\n\t\tif ( callback ) {\n\t\t\tsOut = callback.call( dt.oInstance,\n\t\t\t\tdt, iStart, iEnd, iMax, iTotal, sOut\n\t\t\t);\n\t\t}\n\n\t\tvar n = dt.aanFeatures.i;\n\t\tif ( typeof n != 'undefined' )\n\t\t{\n\t\t\tfor ( var i=0, iLen=n.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\t$(n[i]).html( sOut );\n\t\t\t}\n\t\t}\n\n\t\t// DT doesn't actually (yet) trigger this event, but it will in future\n\t\t$(dt.nTable).triggerHandler( 'info.dt' );\n\t},\n\n\t/**\n\t * Parse CSS height property string as number\n\t *\n\t * An attempt is made to parse the string as a number. Currently supported units are 'px',\n\t * 'vh', and 'rem'. 'em' is partially supported; it works as long as the parent element's\n\t * font size matches the body element. Zero is returned for unrecognized strings.\n\t *  @param {string} cssHeight CSS height property string\n\t *  @returns {number} height\n\t *  @private\n\t */\n\t_parseHeight: function(cssHeight) {\n\t\tvar height;\n\t\tvar matches = /^([+-]?(?:\\d+(?:\\.\\d+)?|\\.\\d+))(px|em|rem|vh)$/.exec(cssHeight);\n\n\t\tif (matches === null) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar value = parseFloat(matches[1]);\n\t\tvar unit = matches[2];\n\n\t\tif ( unit === 'px' ) {\n\t\t\theight = value;\n\t\t}\n\t\telse if ( unit === 'vh' ) {\n\t\t\theight = ( value / 100 ) * $(window).height();\n\t\t}\n\t\telse if ( unit === 'rem' ) {\n\t\t\theight = value * parseFloat($(':root').css('font-size'));\n\t\t}\n\t\telse if ( unit === 'em' ) {\n\t\t\theight = value * parseFloat($('body').css('font-size'));\n\t\t}\n\n\t\treturn height ?\n\t\t\theight :\n\t\t\t0;\n\t},\n\n\t/**\n\t * Scrolling function - fired whenever the scrolling position is changed.\n\t * This method needs to use the stored values to see if the table should be\n\t * redrawn as we are moving towards the end of the information that is\n\t * currently drawn or not. If needed, then it will redraw the table based on\n\t * the new position.\n\t *  @returns {void}\n\t *  @private\n\t */\n\t_scroll: function ()\n\t{\n\t\tvar\n\t\t\tthat = this,\n\t\t\theights = this.s.heights,\n\t\t\tiScrollTop = this.dom.scroller.scrollTop,\n\t\t\tiTopRow;\n\n\t\tif ( this.s.skip ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this.s.ingnoreScroll ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( iScrollTop === this.s.lastScrollTop ) {\n\t\t\treturn;\n\t\t}\n\n\t\t/* If the table has been sorted or filtered, then we use the redraw that\n\t\t * DataTables as done, rather than performing our own\n\t\t */\n\t\tif ( this.s.dt.bFiltered || this.s.dt.bSorted ) {\n\t\t\tthis.s.lastScrollTop = 0;\n\t\t\treturn;\n\t\t}\n\n\t\t/* Update the table's information display for what is now in the viewport */\n\t\tthis._info();\n\n\t\t/* We don't want to state save on every scroll event - that's heavy\n\t\t * handed, so use a timeout to update the state saving only when the\n\t\t * scrolling has finished\n\t\t */\n\t\tclearTimeout( this.s.stateTO );\n\t\tthis.s.stateTO = setTimeout( function () {\n\t\t\tthat.s.dtApi.state.save();\n\t\t}, 250 );\n\n\t\tthis.s.scrollType = Math.abs(iScrollTop - this.s.lastScrollTop) > heights.viewport ?\n\t\t\t'jump' :\n\t\t\t'cont';\n\n\t\tthis.s.topRowFloat = this.s.scrollType === 'cont' ?\n\t\t\tthis.pixelsToRow( iScrollTop, false, false ) :\n\t\t\tthis._domain( 'physicalToVirtual', iScrollTop ) / heights.row;\n\n\t\tif ( this.s.topRowFloat < 0 ) {\n\t\t\tthis.s.topRowFloat = 0;\n\t\t}\n\n\t\t/* Check if the scroll point is outside the trigger boundary which would required\n\t\t * a DataTables redraw\n\t\t */\n\t\tif ( this.s.forceReposition || iScrollTop < this.s.redrawTop || iScrollTop > this.s.redrawBottom ) {\n\t\t\tvar preRows = Math.ceil( ((this.s.displayBuffer-1)/2) * this.s.viewportRows );\n\n\t\t\tiTopRow = parseInt(this.s.topRowFloat, 10) - preRows;\n\t\t\tthis.s.forceReposition = false;\n\n\t\t\tif ( iTopRow <= 0 ) {\n\t\t\t\t/* At the start of the table */\n\t\t\t\tiTopRow = 0;\n\t\t\t}\n\t\t\telse if ( iTopRow + this.s.dt._iDisplayLength > this.s.dt.fnRecordsDisplay() ) {\n\t\t\t\t/* At the end of the table */\n\t\t\t\tiTopRow = this.s.dt.fnRecordsDisplay() - this.s.dt._iDisplayLength;\n\t\t\t\tif ( iTopRow < 0 ) {\n\t\t\t\t\tiTopRow = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( iTopRow % 2 !== 0 ) {\n\t\t\t\t// For the row-striping classes (odd/even) we want only to start\n\t\t\t\t// on evens otherwise the stripes will change between draws and\n\t\t\t\t// look rubbish\n\t\t\t\tiTopRow++;\n\t\t\t}\n\n\t\t\t// Store calcuated value, in case the following condition is not met, but so\n\t\t\t// that the draw function will still use it.\n\t\t\tthis.s.targetTop = iTopRow;\n\n\t\t\tif ( iTopRow != this.s.dt._iDisplayStart ) {\n\t\t\t\t/* Cache the new table position for quick lookups */\n\t\t\t\tthis.s.tableTop = $(this.s.dt.nTable).offset().top;\n\t\t\t\tthis.s.tableBottom = $(this.s.dt.nTable).height() + this.s.tableTop;\n\n\t\t\t\tvar draw = function () {\n\t\t\t\t\tthat.s.dt._iDisplayStart = that.s.targetTop;\n\t\t\t\t\tthat.s.dt.oApi._fnDraw( that.s.dt );\n\t\t\t\t};\n\n\t\t\t\t/* Do the DataTables redraw based on the calculated start point - note that when\n\t\t\t\t * using server-side processing we introduce a small delay to not DoS the server...\n\t\t\t\t */\n\t\t\t\tif ( this.s.dt.oFeatures.bServerSide ) {\n\t\t\t\t\tthis.s.forceReposition = true;\n\n\t\t\t\t\tclearTimeout( this.s.drawTO );\n\t\t\t\t\tthis.s.drawTO = setTimeout( draw, this.s.serverWait );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdraw();\n\t\t\t\t}\n\n\t\t\t\tif ( this.dom.loader && ! this.s.loaderVisible ) {\n\t\t\t\t\tthis.dom.loader.css( 'display', 'block' );\n\t\t\t\t\tthis.s.loaderVisible = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.s.topRowFloat = this.pixelsToRow( iScrollTop, false, true );\n\t\t}\n\n\t\tthis.s.lastScrollTop = iScrollTop;\n\t\tthis.s.stateSaveThrottle();\n\n\t\tif ( this.s.scrollType === 'jump' && this.s.mousedown ) {\n\t\t\tthis.s.labelVisible = true;\n\t\t}\n\t\tif (this.s.labelVisible) {\n\t\t\tthis.dom.label\n\t\t\t\t.html( this.s.dt.fnFormatNumber( parseInt( this.s.topRowFloat, 10 )+1 ) )\n\t\t\t\t.css( 'top', iScrollTop + (iScrollTop * heights.labelFactor ) )\n\t\t\t\t.css( 'display', 'block' );\n\t\t}\n\t},\n\n\t/**\n\t * Force the scrolling container to have height beyond that of just the\n\t * table that has been drawn so the user can scroll the whole data set.\n\t *\n\t * Note that if the calculated required scrolling height exceeds a maximum\n\t * value (1 million pixels - hard-coded) the forcing element will be set\n\t * only to that maximum value and virtual / physical domain transforms will\n\t * be used to allow Scroller to display tables of any number of records.\n\t *  @returns {void}\n\t *  @private\n\t */\n\t_scrollForce: function ()\n\t{\n\t\tvar heights = this.s.heights;\n\t\tvar max = 1000000;\n\n\t\theights.virtual = heights.row * this.s.dt.fnRecordsDisplay();\n\t\theights.scroll = heights.virtual;\n\n\t\tif ( heights.scroll > max ) {\n\t\t\theights.scroll = max;\n\t\t}\n\n\t\t// Minimum height so there is always a row visible (the 'no rows found'\n\t\t// if reduced to zero filtering)\n\t\tthis.dom.force.style.height = heights.scroll > this.s.heights.row ?\n\t\t\theights.scroll+'px' :\n\t\t\tthis.s.heights.row+'px';\n\t}\n} );\n\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Statics\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n\n/**\n * Scroller default settings for initialisation\n *  @namespace\n *  @name Scroller.defaults\n *  @static\n */\nScroller.defaults = {\n\t/**\n\t * Scroller uses the boundary scaling factor to decide when to redraw the table - which it\n\t * typically does before you reach the end of the currently loaded data set (in order to\n\t * allow the data to look continuous to a user scrolling through the data). If given as 0\n\t * then the table will be redrawn whenever the viewport is scrolled, while 1 would not\n\t * redraw the table until the currently loaded data has all been shown. You will want\n\t * something in the middle - the default factor of 0.5 is usually suitable.\n\t *  @type     float\n\t *  @default  0.5\n\t *  @static\n\t */\n\tboundaryScale: 0.5,\n\n\t/**\n\t * The display buffer is what Scroller uses to calculate how many rows it should pre-fetch\n\t * for scrolling. Scroller automatically adjusts DataTables' display length to pre-fetch\n\t * rows that will be shown in \"near scrolling\" (i.e. just beyond the current display area).\n\t * The value is based upon the number of rows that can be displayed in the viewport (i.e.\n\t * a value of 1), and will apply the display range to records before before and after the\n\t * current viewport - i.e. a factor of 3 will allow Scroller to pre-fetch 1 viewport's worth\n\t * of rows before the current viewport, the current viewport's rows and 1 viewport's worth\n\t * of rows after the current viewport. Adjusting this value can be useful for ensuring\n\t * smooth scrolling based on your data set.\n\t *  @type     int\n\t *  @default  7\n\t *  @static\n\t */\n\tdisplayBuffer: 9,\n\n\t/**\n\t * Show (or not) the loading element in the background of the table. Note that you should\n\t * include the dataTables.scroller.css file for this to be displayed correctly.\n\t *  @type     boolean\n\t *  @default  false\n\t *  @static\n\t */\n\tloadingIndicator: false,\n\n\t/**\n\t * Scroller will attempt to automatically calculate the height of rows for it's internal\n\t * calculations. However the height that is used can be overridden using this parameter.\n\t *  @type     int|string\n\t *  @default  auto\n\t *  @static\n\t */\n\trowHeight: \"auto\",\n\n\t/**\n\t * When using server-side processing, Scroller will wait a small amount of time to allow\n\t * the scrolling to finish before requesting more data from the server. This prevents\n\t * you from DoSing your own server! The wait time can be configured by this parameter.\n\t *  @type     int\n\t *  @default  200\n\t *  @static\n\t */\n\tserverWait: 200\n};\n\nScroller.oDefaults = Scroller.defaults;\n\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Constants\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n/**\n * Scroller version\n *  @type      String\n *  @default   See code\n *  @name      Scroller.version\n *  @static\n */\nScroller.version = \"2.0.3\";\n\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Initialisation\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n// Attach a listener to the document which listens for DataTables initialisation\n// events so we can automatically initialise\n$(document).on( 'preInit.dt.dtscroller', function (e, settings) {\n\tif ( e.namespace !== 'dt' ) {\n\t\treturn;\n\t}\n\n\tvar init = settings.oInit.scroller;\n\tvar defaults = DataTable.defaults.scroller;\n\n\tif ( init || defaults ) {\n\t\tvar opts = $.extend( {}, init, defaults );\n\n\t\tif ( init !== false ) {\n\t\t\tnew Scroller( settings, opts  );\n\t\t}\n\t}\n} );\n\n\n// Attach Scroller to DataTables so it can be accessed as an 'extra'\n$.fn.dataTable.Scroller = Scroller;\n$.fn.DataTable.Scroller = Scroller;\n\n\n// DataTables 1.10 API method aliases\nvar Api = $.fn.dataTable.Api;\n\nApi.register( 'scroller()', function () {\n\treturn this;\n} );\n\n// Undocumented and deprecated - is it actually useful at all?\nApi.register( 'scroller().rowToPixels()', function ( rowIdx, intParse, virtual ) {\n\tvar ctx = this.context;\n\n\tif ( ctx.length && ctx[0].oScroller ) {\n\t\treturn ctx[0].oScroller.rowToPixels( rowIdx, intParse, virtual );\n\t}\n\t// undefined\n} );\n\n// Undocumented and deprecated - is it actually useful at all?\nApi.register( 'scroller().pixelsToRow()', function ( pixels, intParse, virtual ) {\n\tvar ctx = this.context;\n\n\tif ( ctx.length && ctx[0].oScroller ) {\n\t\treturn ctx[0].oScroller.pixelsToRow( pixels, intParse, virtual );\n\t}\n\t// undefined\n} );\n\n// `scroller().scrollToRow()` is undocumented and deprecated. Use `scroller.toPosition()\nApi.register( ['scroller().scrollToRow()', 'scroller.toPosition()'], function ( idx, ani ) {\n\tthis.iterator( 'table', function ( ctx ) {\n\t\tif ( ctx.oScroller ) {\n\t\t\tctx.oScroller.scrollToRow( idx, ani );\n\t\t}\n\t} );\n\n\treturn this;\n} );\n\nApi.register( 'row().scrollTo()', function ( ani ) {\n\tvar that = this;\n\n\tthis.iterator( 'row', function ( ctx, rowIdx ) {\n\t\tif ( ctx.oScroller ) {\n\t\t\tvar displayIdx = that\n\t\t\t\t.rows( { order: 'applied', search: 'applied' } )\n\t\t\t\t.indexes()\n\t\t\t\t.indexOf( rowIdx );\n\n\t\t\tctx.oScroller.scrollToRow( displayIdx, ani );\n\t\t}\n\t} );\n\n\treturn this;\n} );\n\nApi.register( 'scroller.measure()', function ( redraw ) {\n\tthis.iterator( 'table', function ( ctx ) {\n\t\tif ( ctx.oScroller ) {\n\t\t\tctx.oScroller.measure( redraw );\n\t\t}\n\t} );\n\n\treturn this;\n} );\n\nApi.register( 'scroller.page()', function() {\n\tvar ctx = this.context;\n\n\tif ( ctx.length && ctx[0].oScroller ) {\n\t\treturn ctx[0].oScroller.pageInfo();\n\t}\n\t// undefined\n} );\n\nreturn Scroller;\n}));\n"],"file":"dataTables.scroller.min.js"}