{"version":3,"file":"action_participants_custom.min.js","sources":["../src/action_participants_custom.js"],"sourcesContent":["/* eslint-disable no-debugger */\r\n/* eslint-disable no-console */\r\n/* eslint-disable no-trailing-spaces */\r\n/* eslint-disable max-len */\r\n/* eslint-disable no-unused-vars */\r\n// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Some UI stuff for participants page.\r\n * This is also used by the report/participants/index.php because it has the same functionality.\r\n *\r\n * @module     local_petel/action_participants_custom\r\n * @copyright  2023 devlion.co\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport * as DynamicTable from 'core_table/dynamic';\r\nimport * as Str from 'core/str';\r\nimport CheckboxToggleAll from 'core/checkbox-toggleall';\r\nimport CustomEvents from 'core/custom_interaction_events';\r\nimport DynamicTableSelectors from 'core_table/local/dynamic/selectors';\r\nimport ModalEvents from 'core/modal_events';\r\nimport Notification from 'core/notification';\r\nimport Pending from 'core/pending';\r\nimport jQuery from 'jquery';\r\nimport { showAddNote, showSendMessage } from 'core_user/local/participants/bulkactions';\r\nimport 'core/inplace_editable';\r\n\r\nimport ModalFactory from 'core/modal_factory';\r\nimport Templates from 'core/templates';\r\nimport * as Toast from 'core/toast';\r\n\r\nimport * as Ajax from 'core/ajax';\r\n\r\nconst Selectors = {\r\n    bulkActionSelect: \"#formactionid\",\r\n    bulkUserSelectedCheckBoxes: \"input[data-togglegroup='participants-table'][data-toggle='slave']:checked\",\r\n    checkCountButton: \"#checkall\",\r\n    showCountText: '[data-region=\"participant-count\"]',\r\n    showCountToggle: '[data-action=\"showcount\"]',\r\n    stateHelpIcon: '[data-region=\"state-help-icon\"]',\r\n    tableForm: uniqueId => `form[data-table-unique-id=\"${uniqueId}\"]`,\r\n};\r\n\r\nexport const init = ({\r\n    uniqueid,\r\n    noteStateNames = {},\r\n    currentcourseid,\r\n    currentuserid,\r\n    defaults }) => {\r\n\r\n    const root = document.querySelector(Selectors.tableForm(uniqueid));\r\n    const getTableFromUniqueId = uniqueId => root.querySelector(DynamicTableSelectors.main.fromRegionId(uniqueId));\r\n\r\n    /**\r\n     * Private method.\r\n     *\r\n     * @method registerEventListeners\r\n     * @private\r\n     */\r\n    const registerEventListeners = () => {\r\n        CustomEvents.define(Selectors.bulkActionSelect, [CustomEvents.events.accessibleChange]);\r\n\r\n        Str.get_strings([\r\n            { key: 'buttoncreatecourse', component: 'local_petel' },\r\n            { key: 'buttonaddsystemgroups', component: 'local_petel' }\r\n        ]).done(function (strings) {\r\n\r\n            jQuery(\"#formactionid option\").each(function (index) {\r\n                if (index === 2) {\r\n                    let name = strings[0];\r\n                    var newOption = '<option id=\"participants-createcourse\" value=\"#createcourse\">' + name + '</option>';\r\n                    jQuery(newOption).insertAfter(jQuery(this));\r\n\r\n                    name = strings[1];\r\n                    newOption = '<option id=\"participants-addsystemgroups\" value=\"#addsystemgroups\">' + name + '</option>';\r\n                    jQuery(newOption).insertAfter(jQuery(this));\r\n                }\r\n            });\r\n\r\n        });\r\n        jQuery(Selectors.bulkActionSelect).on(CustomEvents.events.accessibleChange, e => {\r\n\r\n\r\n            console.log(uniqueid, 'uniqueid');\r\n            const bulkActionSelect = e.target.closest('select');\r\n            const action = bulkActionSelect.value;\r\n            const tableRoot = getTableFromUniqueId(uniqueid);\r\n            const checkboxes = tableRoot.querySelectorAll(Selectors.bulkUserSelectedCheckBoxes);\r\n            const pendingPromise = new Pending('core_user/participants:bulkActionSelect');\r\n            if (action.indexOf('#') !== -1) {\r\n                e.preventDefault();\r\n\r\n                const ids = [];\r\n                checkboxes.forEach(checkbox => {\r\n                    ids.push(checkbox.getAttribute('name').replace('user', ''));\r\n                });\r\n\r\n                let bulkAction;\r\n                if (action === '#messageselect') {\r\n                    bulkAction = showSendMessage(ids);\r\n                } else if (action === '#addgroupnote') {\r\n                    bulkAction = showAddNote(\r\n                        root.dataset.courseId,\r\n                        ids,\r\n                        noteStateNames,\r\n                        root.querySelector(Selectors.stateHelpIcon)\r\n                    );\r\n                }\r\n                if (action === '#addsystemgroups') {\r\n                    bulkAction = openPopupAddSystemGroups(currentcourseid, currentuserid, defaults);\r\n\r\n                }\r\n                if (action === '#createcourse') {\r\n                    bulkAction = openPopupCourseCreate(currentcourseid, currentuserid, defaults);\r\n\r\n                }\r\n\r\n                if (bulkAction) {\r\n                    const pendingBulkAction = new Pending('core_user/participants:bulkActionSelected');\r\n                    bulkAction\r\n                        .then(modal => {\r\n                            modal.getRoot().on(ModalEvents.hidden, () => {\r\n                                // Focus on the action select when the dialog is closed.\r\n                                bulkActionSelect.focus();\r\n                            });\r\n\r\n                            pendingBulkAction.resolve();\r\n                            return modal;\r\n                        })\r\n                        .catch(Notification.exception);\r\n                }\r\n            } else if (action !== '' && checkboxes.length) {\r\n                bulkActionSelect.form.submit();\r\n            }\r\n\r\n            resetBulkAction(bulkActionSelect);\r\n            pendingPromise.resolve();\r\n        });\r\n\r\n        root.addEventListener('click', e => {\r\n            // Handle clicking of the \"Select all\" actions.\r\n            const checkCountButton = root.querySelector(Selectors.checkCountButton);\r\n            const checkCountButtonClicked = checkCountButton && checkCountButton.contains(e.target);\r\n\r\n            if (checkCountButtonClicked) {\r\n                e.preventDefault();\r\n\r\n                const tableRoot = getTableFromUniqueId(uniqueid);\r\n\r\n                DynamicTable.setPageSize(tableRoot, checkCountButton.dataset.targetPageSize)\r\n                    .then(tableRoot => {\r\n                        // Update the toggle state.\r\n                        CheckboxToggleAll.setGroupState(root, 'participants-table', true);\r\n\r\n                        return tableRoot;\r\n                    })\r\n                    .catch(Notification.exception);\r\n            }\r\n        });\r\n\r\n        // When the content is refreshed, update the row counts in various places.\r\n        root.addEventListener(DynamicTable.Events.tableContentRefreshed, e => {\r\n            const checkCountButton = root.querySelector(Selectors.checkCountButton);\r\n            const tableRoot = e.target;\r\n            const defaultPageSize = parseInt(tableRoot.dataset.tableDefaultPerPage, 10);\r\n            const currentPageSize = parseInt(tableRoot.dataset.tablePageSize, 10);\r\n            const totalRowCount = parseInt(tableRoot.dataset.tableTotalRows, 10);\r\n\r\n            CheckboxToggleAll.updateSlavesFromMasterState(root, 'participants-table');\r\n\r\n            const pageCountStrings = [\r\n                {\r\n                    key: 'countparticipantsfound',\r\n                    component: 'core_user',\r\n                    param: totalRowCount,\r\n                },\r\n            ];\r\n\r\n            if (totalRowCount <= defaultPageSize) {\r\n                if (checkCountButton) {\r\n                    checkCountButton.classList.add('hidden');\r\n                }\r\n            } else if (totalRowCount <= currentPageSize) {\r\n                // The are fewer than the current page size.\r\n                pageCountStrings.push({\r\n                    key: 'selectalluserswithcount',\r\n                    component: 'core',\r\n                    param: defaultPageSize,\r\n                });\r\n\r\n                if (checkCountButton) {\r\n                    // The 'Check all [x]' button is only visible when there are values to set.\r\n                    checkCountButton.classList.add('hidden');\r\n                }\r\n            } else {\r\n                pageCountStrings.push({\r\n                    key: 'selectalluserswithcount',\r\n                    component: 'core',\r\n                    param: totalRowCount,\r\n                });\r\n\r\n                if (checkCountButton) {\r\n                    checkCountButton.classList.remove('hidden');\r\n                }\r\n            }\r\n\r\n            Str.get_strings(pageCountStrings)\r\n                .then(([showingParticipantCountString, selectCountString]) => {\r\n                    const showingParticipantCount = root.querySelector(Selectors.showCountText);\r\n                    showingParticipantCount.innerHTML = showingParticipantCountString;\r\n\r\n                    if (selectCountString && checkCountButton) {\r\n                        checkCountButton.value = selectCountString;\r\n                    }\r\n\r\n                    return;\r\n                })\r\n                .catch(Notification.exception);\r\n        });\r\n    };\r\n\r\n    const resetBulkAction = bulkActionSelect => {\r\n        bulkActionSelect.value = '';\r\n    };\r\n\r\n    registerEventListeners();\r\n\r\n\r\n    const openPopupAddSystemGroups = function (currentcourseid, currentuserid, defaults) {\r\n\r\n        // Set new uniqueid.\r\n        const openPopupAddSystemGroupsUniqueid = Date.now();\r\n\r\n        // Get selected users.\r\n        var users = [];\r\n        jQuery('#participants tbody tr input:checked').each(function (index) {\r\n            users.push(jQuery(this).attr(\"name\").replace('user', ''));\r\n        });\r\n\r\n        let titlePromise = null;\r\n        if (users.length > 1) {\r\n            titlePromise = Str.get_string('titleaddsystemgroups', 'local_petel', users.length);\r\n        } else {\r\n            titlePromise = Str.get_string('titleaddsystemgroups1', 'local_petel');\r\n        }\r\n\r\n        Str.get_strings([\r\n            { key: 'selectgroups', component: 'local_petel' }\r\n        ]).done(function (strings) {\r\n\r\n            const systemgroupsac = {\r\n                title: strings[0],\r\n                inputid: 'system_groups_ac' + openPopupAddSystemGroupsUniqueid,\r\n                methodname: 'get_system_groups_ac',\r\n            };\r\n\r\n            const context = {\r\n\r\n                autocompletemultiplefields: [\r\n                    systemgroupsac\r\n                ],\r\n            };\r\n\r\n            return ModalFactory.create({\r\n                type: ModalFactory.types.SAVE_CANCEL,\r\n                body: Templates.render('local_petel/popup_action_participants', context),\r\n                title: titlePromise,\r\n                buttons: {\r\n                    save: titlePromise,\r\n                },\r\n                removeOnClose: true,\r\n            })\r\n                .then(modal => {\r\n                    modal.getRoot().on(ModalEvents.save, () => submitPopupAddSystemGroups(currentcourseid, currentuserid, users, openPopupAddSystemGroupsUniqueid));\r\n                    modal.show();\r\n                    return modal;\r\n                });\r\n        });\r\n    };\r\n\r\n    const submitPopupAddSystemGroups = function (currentcourseid, currentuserid, users, openPopupAddSystemGroupsUniqueid) {\r\n\r\n        var Selector = {\r\n            GROUPS_SELECT: '.modal.show #system_groups_ac' + openPopupAddSystemGroupsUniqueid,\r\n        };\r\n\r\n        // Check data.\r\n        jQuery(Selector.GROUPS_SELECT).parent().find('.error-block').hide();\r\n\r\n        let groupids = jQuery(Selector.GROUPS_SELECT).val();\r\n\r\n        if (groupids.length !== 0) {\r\n            var data = {\r\n                groupids: JSON.stringify(groupids),\r\n                currentuserid: currentuserid,\r\n                users: JSON.stringify(users)\r\n            };\r\n\r\n            Ajax.call([{\r\n                methodname: 'local_petel_create_system_groups_for_teachers',\r\n                args: data,\r\n                done: function (response) {\r\n\r\n                    if (response.result) {\r\n                        Str.get_strings([\r\n                            { key: 'coursescreated', component: 'local_petel' }\r\n                        ]).done(function (strings) {\r\n                            debugger;\r\n                            Toast.add(strings[0]);\r\n                        });\r\n                    }\r\n                },\r\n                fail: Notification.exception\r\n            }]);\r\n        } else {\r\n            if (groupids.length === 0) {\r\n                jQuery(Selector.GROUPS_SELECT).parent().find('.error-block').show();\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const openPopupCourseCreate = function (currentcourseid, currentuserid, defaults) {\r\n       \r\n        // Set new uniqueid.\r\n        const popupCourseCreateUniqueid = Date.now();\r\n\r\n        // Get selected users.\r\n        var users = [];\r\n        jQuery('#participants tbody tr input:checked').each(function (index) {\r\n            users.push(jQuery(this).attr(\"name\").replace('user', ''));\r\n        });\r\n\r\n        let titlePromise = null;\r\n        if (users.length > 1) {\r\n            titlePromise = Str.get_string('titlecreatecourse', 'local_petel', users.length);\r\n        } else {\r\n            titlePromise = Str.get_string('titlecreatecourse1', 'local_petel');\r\n        }\r\n\r\n        Str.get_strings([\r\n            { key: 'selectmaincategory', component: 'local_petel' },\r\n            { key: 'selecttemplatecourse', component: 'local_petel' },\r\n            { key: 'selectrole', component: 'local_petel' },\r\n            { key: 'selectgroups', component: 'local_petel' },\r\n            { key: 'keynull', component: 'local_petel' },\r\n        ]).done(function (strings) {\r\n\r\n            const categoriesac = {\r\n                title: strings[0],\r\n                placeholder: strings[0],\r\n                inputid: 'categories_ac' + popupCourseCreateUniqueid,\r\n                methodname: 'get_categories_ac',\r\n                paramname: 'main-category',\r\n                paramid: 'main-category' + popupCourseCreateUniqueid,\r\n                paramvalue: defaults.categories_ac.value,\r\n                paramdesc: defaults.categories_ac.name,\r\n            };\r\n            const coursesac = {\r\n                title: strings[1],\r\n                placeholder: strings[1],\r\n                inputid: 'courses_ac' + popupCourseCreateUniqueid,\r\n                methodname: 'get_courses_ac',\r\n                paramname: 'template-course',\r\n                paramid: 'template-course' + popupCourseCreateUniqueid,\r\n                paramvalue: defaults.courses_ac.value,\r\n                paramdesc: defaults.courses_ac.name,\r\n            };\r\n            const rolesac = {\r\n                title: strings[2],\r\n                placeholder: strings[2],\r\n                inputid: 'roles_ac' + popupCourseCreateUniqueid,\r\n                methodname: 'get_roles_ac',\r\n                paramname: 'template-role',\r\n                paramid: 'template-role' + popupCourseCreateUniqueid,\r\n                paramvalue: defaults.roles_ac.value,\r\n                paramdesc: defaults.roles_ac.name,\r\n            };\r\n            const groupsac = {\r\n                title: strings[3],\r\n                inputid: 'system_groups_ac' + popupCourseCreateUniqueid,\r\n                methodname: 'get_system_groups_ac',\r\n            };\r\n            const keynull = {\r\n                title: strings[4],\r\n                paramname: 'template-keynull',\r\n                inputid: 'keynull' + popupCourseCreateUniqueid,\r\n                paramvalue: defaults.roles_ac.value,\r\n            };\r\n\r\n            const context = {\r\n                autocompletefields: [\r\n                    categoriesac,\r\n                    coursesac,\r\n                    rolesac\r\n                ],\r\n\r\n                autocompletemultiplefields: [\r\n                    groupsac\r\n                ],\r\n\r\n                // checkbox: [\r\n                //     keynull\r\n                // ],\r\n            };\r\n\r\n            return ModalFactory.create({\r\n                type: ModalFactory.types.SAVE_CANCEL,\r\n                body: Templates.render('local_petel/popup_action_participants', context),\r\n                title: titlePromise,\r\n                buttons: {\r\n                    save: titlePromise,\r\n                },\r\n                removeOnClose: true,\r\n            })\r\n                .then(modal => {\r\n                    modal.getRoot().on(ModalEvents.save, () => submitPopupCourseCreate(currentcourseid, currentuserid, users, popupCourseCreateUniqueid));\r\n                    modal.show();\r\n                    return modal;\r\n                });\r\n        });\r\n    };\r\n\r\n    const submitPopupCourseCreate = function (currentcourseid, currentuserid, users, popupCourseCreateUniqueid) {\r\n\r\n        var Selector = {\r\n            CATEGORY_SELECT: '.modal.show #main-category' + popupCourseCreateUniqueid,\r\n            COURSE_SELECT: '.modal.show #template-course' + popupCourseCreateUniqueid,\r\n            ROLE_SELECT: '.modal.show #template-role' + popupCourseCreateUniqueid,\r\n            GROUPS_SELECT: '.modal.show #system_groups_ac' + popupCourseCreateUniqueid,\r\n            NULL_CHECKBOX: '.modal.show #keynull' + popupCourseCreateUniqueid,\r\n        };\r\n\r\n        // Check data.\r\n        jQuery(Selector.CATEGORY_SELECT).parent().find('.error-block').hide();\r\n        jQuery(Selector.COURSE_SELECT).parent().find('.error-block').hide();\r\n        jQuery(Selector.ROLE_SELECT).parent().find('.error-block').hide();\r\n        jQuery(Selector.GROUPS_SELECT).parent().find('.error-block').hide();\r\n        jQuery(Selector.NULL_CHECKBOX).parent().find('.error-block').hide();\r\n\r\n        let categoryid = jQuery(Selector.CATEGORY_SELECT).val();\r\n        let courseid = jQuery(Selector.COURSE_SELECT).val();\r\n        let roleid = jQuery(Selector.ROLE_SELECT).val();\r\n        let groups = jQuery(Selector.GROUPS_SELECT).val();\r\n\r\n        //let nullcheck = jQuery(Selector.NULL_CHECKBOX).is(':checked');\r\n        let nullcheck = true;\r\n\r\n        if (categoryid.length !== 0 && courseid.length !== 0 && roleid.length !== 0) {\r\n            var data = {\r\n                categoryid: categoryid,\r\n                courseid: courseid,\r\n                roleid: roleid,\r\n                groups: JSON.stringify(groups),\r\n                nullcheck: nullcheck,\r\n                currentuserid: currentuserid,\r\n                users: JSON.stringify(users)\r\n            };\r\n\r\n            Ajax.call([{\r\n                methodname: 'local_petel_create_courses_for_teachers',\r\n                args: data,\r\n                done: function (response) {\r\n\r\n                    if (response.result) {\r\n                        Str.get_strings([\r\n                            { key: 'coursescreated', component: 'local_petel' }\r\n                        ]).done(function (strings) {\r\n                            debugger;\r\n                            Toast.add(strings[0]);\r\n                        });\r\n                    }\r\n                },\r\n                fail: Notification.exception\r\n            }]);\r\n        } else {\r\n            if (categoryid.length === 0) {\r\n                jQuery(Selector.CATEGORY_SELECT).parent().find('.error-block').show();\r\n            }\r\n\r\n            if (courseid.length === 0) {\r\n                jQuery(Selector.COURSE_SELECT).parent().find('.error-block').show();\r\n            }\r\n\r\n            if (roleid.length === 0) {\r\n                jQuery(Selector.ROLE_SELECT).parent().find('.error-block').show();\r\n            }\r\n\r\n            // If (groups.length === 0) {\r\n            //     jQuery(Selector.GROUPS_SELECT).parent().find('.error-block').show();\r\n            // }\r\n            //\r\n            // if (!nullcheck) {\r\n            //     jQuery(Selector.NULL_CHECKBOX).parent().find('.error-block').show();\r\n            // }\r\n\r\n            return false;\r\n        }\r\n    };\r\n\r\n};\r\n"],"names":["Selectors","uniqueId","_ref","uniqueid","noteStateNames","currentcourseid","currentuserid","defaults","root","document","querySelector","getTableFromUniqueId","DynamicTableSelectors","main","fromRegionId","resetBulkAction","bulkActionSelect","value","define","CustomEvents","events","accessibleChange","Str","get_strings","key","component","done","strings","each","index","name","newOption","insertAfter","this","on","e","console","log","target","closest","action","checkboxes","querySelectorAll","pendingPromise","Pending","indexOf","preventDefault","ids","bulkAction","forEach","checkbox","push","getAttribute","replace","dataset","courseId","openPopupAddSystemGroups","openPopupCourseCreate","pendingBulkAction","then","modal","getRoot","ModalEvents","hidden","focus","resolve","catch","Notification","exception","length","form","submit","addEventListener","checkCountButton","contains","tableRoot","DynamicTable","setPageSize","targetPageSize","setGroupState","Events","tableContentRefreshed","defaultPageSize","parseInt","tableDefaultPerPage","currentPageSize","tablePageSize","totalRowCount","tableTotalRows","updateSlavesFromMasterState","pageCountStrings","param","classList","add","remove","_ref2","showingParticipantCountString","selectCountString","innerHTML","openPopupAddSystemGroupsUniqueid","Date","now","users","attr","titlePromise","get_string","context","autocompletemultiplefields","title","inputid","methodname","ModalFactory","create","type","types","SAVE_CANCEL","body","Templates","render","buttons","save","removeOnClose","submitPopupAddSystemGroups","show","Selector","GROUPS_SELECT","parent","find","hide","groupids","val","data","JSON","stringify","Ajax","call","args","response","result","Toast","fail","popupCourseCreateUniqueid","categoriesac","placeholder","paramname","paramid","paramvalue","categories_ac","paramdesc","coursesac","courses_ac","rolesac","roles_ac","groupsac","autocompletefields","submitPopupCourseCreate","CATEGORY_SELECT","COURSE_SELECT","ROLE_SELECT","NULL_CHECKBOX","categoryid","courseid","roleid","groups","nullcheck"],"mappings":"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"}