{"version":3,"file":"editor.min.js","sources":["../src/editor.js"],"sourcesContent":["define([\r\n    'core/yui'\r\n], function (Y) {\r\n    `use strict`;\r\n\r\n    return {\r\n        'init': function (data) {\r\n\r\n            data = JSON.parse(data);\r\n\r\n            // Configuration for the Atto editor\r\n            var config = {\r\n                // Basic configuration\r\n                elementid: 'id_' + data.id,  // ID of your textarea\r\n                content_css: M.cfg.wwwroot + '/theme/styles.php?theme=' + data.theme,\r\n                contextid: data.contextid, // Set your context ID\r\n\r\n                // Plugin configurations\r\n                plugins: {\r\n                    // List of Atto plugins to load\r\n                    list: [\r\n                        'text',\r\n                        'bold',\r\n                        'italic',\r\n                        'underline',\r\n                        'strikethrough',\r\n                        'subscript',\r\n                        'superscript',\r\n                        'link',\r\n                        'unlink',\r\n                        'image',\r\n                        'media',\r\n                        'managefiles',\r\n                        'table',\r\n                        'clear',\r\n                        'undo',\r\n                        'accessibility',\r\n                        'htmlplus',\r\n                        'charmap',\r\n                        'emoticon',\r\n                        'equation',\r\n                        'align',\r\n                        'indent'\r\n                    ],\r\n\r\n                    // Plugin-specific configurations\r\n                    image: {\r\n                        maxsizebytes: 2097152, // 2MB max file size\r\n                        accepted_types: ['image/jpeg', 'image/png', 'image/gif']\r\n                    },\r\n\r\n                    media: {\r\n                        enable: true\r\n                    }\r\n                },\r\n\r\n                // Toolbar configuration\r\n                toolbar: {\r\n                    buttons: {\r\n                        group1: ['bold', 'italic', 'underline', 'strikethrough'],\r\n                        group2: ['subscript', 'superscript'],\r\n                        group3: ['link', 'unlink'],\r\n                        group4: ['image', 'media', 'managefiles'],\r\n                        group5: ['table'],\r\n                        group6: ['undo', 'clear'],\r\n                        group7: ['accessibility', 'htmlplus'],\r\n                        group8: ['charmap', 'emoticon', 'equation'],\r\n                        group9: ['align', 'indent']\r\n                    }\r\n                }\r\n            };\r\n\r\n            // Function to initialize the editor\r\n            function initEditor() {\r\n                try {\r\n                    // Create new instance of Atto editor\r\n                    var editor = new Y.M.editor_atto.Editor(config);\r\n\r\n                    // Add event listeners\r\n                    editor.on('change', function() {\r\n                        //console.debug('Editor content changed');\r\n                    });\r\n\r\n                    editor.on('load', function() {alert()\r\n                        //console.debug('Editor loaded successfully');\r\n                    });\r\n\r\n                    // Return the editor instance\r\n                    return editor;\r\n                } catch (e) {\r\n                    console.error('Error initializing Atto editor:', e);\r\n                    return null;\r\n                }\r\n            }\r\n\r\n            // Initialize.\r\n            var attoeditor = initEditor();\r\n            if (attoeditor && attoeditor.editor !== null) {\r\n\r\n                // if (attoeditor.editor.getHTML() === '') {\r\n                //     attoeditor.editor.setHTML(attoeditor._getEmptyContent());\r\n                // }\r\n\r\n                attoeditor.editor.setHTML(data.default);\r\n\r\n                // Store attoeditor instance if needed\r\n                window.attoEditor = attoeditor;\r\n            }\r\n        },\r\n    };\r\n});\r\n"],"names":["define","Y","data","config","elementid","JSON","parse","id","content_css","M","cfg","wwwroot","theme","contextid","plugins","list","image","maxsizebytes","accepted_types","media","enable","toolbar","buttons","group1","group2","group3","group4","group5","group6","group7","group8","group9","attoeditor","editor","editor_atto","Editor","on","alert","e","console","error","initEditor","setHTML","default","window","attoEditor"],"mappings":"AAAAA,0CAAO,CACH,aACD,SAAUC,SAGF,MACK,SAAUC,UAKVC,OAAS,CAETC,UAAW,OALfF,KAAOG,KAAKC,MAAMJ,OAKUK,GACxBC,YAAaC,EAAEC,IAAIC,QAAU,2BAA6BT,KAAKU,MAC/DC,UAAWX,KAAKW,UAGhBC,QAAS,CAELC,KAAM,CACF,OACA,OACA,SACA,YACA,gBACA,YACA,cACA,OACA,SACA,QACA,QACA,cACA,QACA,QACA,OACA,gBACA,WACA,UACA,WACA,WACA,QACA,UAIJC,MAAO,CACHC,aAAc,QACdC,eAAgB,CAAC,aAAc,YAAa,cAGhDC,MAAO,CACHC,QAAQ,IAKhBC,QAAS,CACLC,QAAS,CACLC,OAAQ,CAAC,OAAQ,SAAU,YAAa,iBACxCC,OAAQ,CAAC,YAAa,eACtBC,OAAQ,CAAC,OAAQ,UACjBC,OAAQ,CAAC,QAAS,QAAS,eAC3BC,OAAQ,CAAC,SACTC,OAAQ,CAAC,OAAQ,SACjBC,OAAQ,CAAC,gBAAiB,YAC1BC,OAAQ,CAAC,UAAW,WAAY,YAChCC,OAAQ,CAAC,QAAS,iBA6B1BC,8BApBQC,OAAS,IAAIhC,EAAEQ,EAAEyB,YAAYC,OAAOhC,eAGxC8B,OAAOG,GAAG,UAAU,eAIpBH,OAAOG,GAAG,QAAQ,WAAYC,WAKvBJ,OACT,MAAOK,UACLC,QAAQC,MAAM,kCAAmCF,GAC1C,MAKEG,GACbT,YAAoC,OAAtBA,WAAWC,SAMzBD,WAAWC,OAAOS,QAAQxC,KAAKyC,SAG/BC,OAAOC,WAAab"}