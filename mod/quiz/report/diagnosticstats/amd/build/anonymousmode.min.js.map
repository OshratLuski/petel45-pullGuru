{"version":3,"file":"anonymousmode.min.js","sources":["../src/anonymousmode.js"],"sourcesContent":["define(['jquery', 'core/ajax'], function($, ajax) {\n    // Function to save anonymous state via AJAX\n    const saveAnonymousState = (cmid, state) => {\n        return ajax.call([{\n            methodname: 'quiz_diagnosticstats_set_anonymousstate',\n            args: { cmid: cmid, state: state }\n        }])[0];\n    };\n\n    // Function to set the anonymous state\n    const setAnonymousState = (isAnonymous) => {\n        createAnonymousStripe();\n        setStatesFromConfig(isAnonymous);\n        handleStudentNames(isAnonymous);\n        const anonymousToggler = $('#anonymousmodeToggler1');\n        anonymousToggler.prop('checked', isAnonymous);\n    };\n\n    // Function to create the anonymous stripe if it doesn't exist\n    const createAnonymousStripe = () => {\n        if (document.getElementById('anonymousStripe')) {\n            return; // Already exists\n        }\n\n        const stripeContent = `\n            <div class=\"d-flex align-items-center diagnosticstats_report-toggle anonymousmode\">\n                <input type=\"checkbox\" id=\"anonymousmodeToggler3\" class=\"toggle-btn d-none\">\n                <label for=\"anonymousmodeToggler2\" class=\"mb-0 anonymousmodeToggler d-none\"></label>\n                <span class=\"link-btn-text ml-3\"></span>\n            </div>\n            <i class=\"fas fa-user-secret ml-4\"></i>\n        `;\n\n        const navbar = document.querySelector('nav.navbar');\n        if (!navbar) {\n            return; // Navbar not found\n        }\n\n        const stripeElement = document.createElement('div');\n        stripeElement.classList.add('sticky-stripe', 'align-items-center', 'justify-content-center', 'yellow', 'hidden');\n        stripeElement.id = 'anonymousStripe';\n        stripeElement.innerHTML = stripeContent;\n        navbar.insertAdjacentElement('afterbegin', stripeElement);\n    };\n\n    // Function to update the state of anonymous mode\n    const setStatesFromConfig = (isAnonymous) => {\n        createAnonymousStripe(); // Ensure the stripe exists\n\n        const toggleTextElement = $('.diagnosticstats_report-toggle.anonymousmode .link-btn-text');\n        if (!toggleTextElement.length) {\n            return; // Element not found\n        }\n\n        const anonymousStripe = $('#anonymousStripe');\n        const toggler = $('#anonymousmodeToggler1');\n\n        if (isAnonymous) {\n            anonymousStripe.removeClass('hidden');\n            const stateText = toggler.closest('.diagnosticstats_report-toggle').data('texton');\n            toggleTextElement.html(stateText || 'Anonymous mode ON');\n            toggler.prop('checked', true);\n        } else {\n            anonymousStripe.addClass('hidden');\n            const stateText = toggler.closest('.diagnosticstats_report-toggle').data('textoff');\n            toggleTextElement.html(stateText || 'Anonymous mode OFF');\n            toggler.prop('checked', false);\n        }\n    };\n\n    let studentNamesProcessed = false;\n\n    // Function to handle student name changes\n    const handleStudentNames = (isAnonymous) => {\n        if (!isAnonymous) {\n            studentNamesProcessed = false;\n        }\n\n        if (studentNamesProcessed && isAnonymous) {\n            console.warn('handleStudentNames already processed in anonymous mode.');\n            return;\n        }\n\n        const studentNameMap = new Map();\n        let anonymousCounter = 1;\n\n        $('.student-name').each(function(index, el) {\n            const $el = $(el);\n            const userId = $el.attr('id')?.replace('student-', '');\n            const studentLabel = M.util.get_string('studentlabel', 'quiz_diagnosticstats');\n\n            if (!userId) {\n                return; // No user ID found\n            }\n\n            if (!$el.data('originalName') && $el.text().trim() !== '' && $el.text().trim() !== 'Unknown') {\n                $el.data('originalName', $el.text());\n            }\n\n            if (isAnonymous) {\n                if (!studentNameMap.has(userId)) {\n                    studentNameMap.set(userId, `${studentLabel} ${anonymousCounter}`);\n                    anonymousCounter++;\n                }\n                $el.text(studentNameMap.get(userId));\n            } else {\n                const originalName = $el.data('originalName');\n                if (!originalName) {\n                    console.warn(`Original name not found for userId ${userId}. Defaulting to 'Unknown'.`);\n                }\n                $el.text(originalName || 'Unknown');\n            }\n        });\n\n    };\n\n    const updateAnonymousState = (isAnonymous) => {\n        localStorage.setItem('anonymousState', isAnonymous ? '1' : '0');\n    };\n\n    //111addeventlistener\n    window.addEventListener('storage', (event) => {\n        if (event.key === 'anonymousState') {\n            const isAnonymous = event.newValue === '1';\n            const anonymousToggler = $('#anonymousmodeToggler1');\n            setStatesFromConfig(isAnonymous);\n            handleStudentNames(isAnonymous);\n            anonymousToggler.prop('checked', isAnonymous);\n        }\n    });\n\n    // Initialization function for the diagnostic questions table\n    const initDiagnosticQuestionsTable = (cmid, anonymousStateFromConfig) => {\n\n        // Check if a state is stored in localStorage; if not, fallback to the state from config\n        const storedState = localStorage.getItem('anonymousState');\n        const initialState = storedState !== null ? storedState === '1' : anonymousStateFromConfig;\n        setAnonymousState(initialState);\n\n        const anonymousToggler = $('#anonymousmodeToggler1');\n        if (!anonymousToggler.length) {\n            console.warn('Toggler not found');\n            return; // Toggler not found\n        }\n\n        anonymousToggler.prop('checked', initialState);\n\n        anonymousToggler.off('change');\n\n        anonymousToggler.on('change', function() {\n            const isAnonymous = this.checked;\n            setStatesFromConfig(isAnonymous);\n            handleStudentNames(isAnonymous);\n\n            // Save the state to the server\n            saveAnonymousState(cmid, isAnonymous ? 1 : 0).then((response) => {\n                updateAnonymousState(isAnonymous);\n            }).catch((error) => {\n                console.error('Failed to save anonymous state:', error);\n            });\n        });\n    };\n\n    const init = (config) => {\n        config = JSON.parse(config);\n        // Convert cmid to an integer.\n        config.cmid = parseInt(config.cmid, 10);\n\n        setAnonymousState(config.anonymousState);\n        initDiagnosticQuestionsTable(config.cmid, config.anonymousState);\n    };\n\n    return {\n        init,\n        initdiagnosticquestionstable: initDiagnosticQuestionsTable,\n        setAnonymousState: setAnonymousState\n    };\n});\n"],"names":["define","$","ajax","setAnonymousState","isAnonymous","createAnonymousStripe","setStatesFromConfig","handleStudentNames","prop","document","getElementById","navbar","querySelector","stripeElement","createElement","classList","add","id","innerHTML","insertAdjacentElement","toggleTextElement","length","anonymousStripe","toggler","removeClass","stateText","closest","data","html","addClass","studentNamesProcessed","console","warn","studentNameMap","Map","anonymousCounter","each","index","el","_$el$attr","$el","userId","attr","replace","studentLabel","M","util","get_string","text","trim","has","set","get","originalName","window","addEventListener","event","key","newValue","anonymousToggler","initDiagnosticQuestionsTable","cmid","anonymousStateFromConfig","storedState","localStorage","getItem","initialState","off","on","this","checked","saveAnonymousState","state","call","methodname","args","then","response","setItem","updateAnonymousState","catch","error","init","config","JSON","parse","parseInt","anonymousState","initdiagnosticquestionstable"],"mappings":"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"}