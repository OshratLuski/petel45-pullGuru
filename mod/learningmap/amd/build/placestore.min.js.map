{"version":3,"file":"placestore.min.js","sources":["../src/placestore.js"],"sourcesContent":["let placestore = {\r\n    version: 2024072201,\r\n    id: 0,\r\n    places: [],\r\n    paths: [],\r\n    startingplaces: [],\r\n    targetplaces: [],\r\n    placecolor: '#c01c28',\r\n    strokecolor: '#000000',\r\n    strokeopacity: 1,\r\n    textcolor: '#ffffff',\r\n    visitedcolor: '#26a269',\r\n    height: 100,\r\n    width: 800,\r\n    hidepaths: false,\r\n    mapid: '',\r\n    usecheckmark: false,\r\n    editmode: true,\r\n    pulse: false,\r\n    hover: false,\r\n    showall: false,\r\n    showtext: false,\r\n    slicemode: false,\r\n    showwaygone: false,\r\n    /**\r\n     * Loads attributes from JSON into placestore\r\n     * @param {*} json\r\n     */\r\n    loadJSON: function(json) {\r\n        try {\r\n            let fromjson = JSON.parse(json);\r\n            if (fromjson.textcolor === null) {\r\n                fromjson.textcolor = fromjson.strokecolor;\r\n            }\r\n            Object.assign(this, fromjson);\r\n            // eslint-disable-next-line no-empty\r\n        } catch { }\r\n        // Update version (only relevant if learning map is saved)\r\n        this.version = 2024072201;\r\n    },\r\n    /**\r\n     * Returns placestore as a JSON string ()\r\n     * @returns {string}\r\n     */\r\n    buildJSON: function() {\r\n        return JSON.stringify(this.getPlacestore());\r\n    },\r\n    /**\r\n     * Adds a place. If it is the only place, it is set as starting place\r\n     * @param {*} id id of the place\r\n     * @param {*} linkId id of the corresponding link\r\n     * @param {*} linkTargetType type of link target \"_blank/_self\"\r\n     * @param {*} linkTargetSize radius of link target\r\n     * @param {*} opacityValue link opacity\r\n     * @param {*} linkedActivity course module id of linked activity\r\n     * @param {*} externalLink string of URL link\r\n     * @param {*} selectedLinkType type of selected link\r\n     */\r\n    addPlace: function(id, linkId, linkTargetType, linkTargetSize, opacityValue, linkedActivity = null,\r\n         externalLink = null, selectedLinkType = null) {\r\n        this.places.push({\r\n            id: id,\r\n            linkId: linkId,\r\n            linkTargetType: linkTargetType,\r\n            opacityValue: +opacityValue,\r\n            linkTargetSize: +linkTargetSize,\r\n            linkedActivity: linkedActivity,\r\n            externalLink: externalLink,\r\n            selectedLinkType: selectedLinkType,\r\n            placecolor: null,\r\n            visitedcolor: null\r\n        });\r\n        if (this.places.length == 1) {\r\n            this.addStartingPlace(id);\r\n        }\r\n        this.id++;\r\n    },\r\n    /**\r\n     * Removes a place\r\n     * @param {*} id id of the place\r\n     */\r\n    removePlace: function(id) {\r\n        this.removeStartingPlace(id);\r\n        this.removeTargetPlace(id);\r\n        this.places = this.places.filter(\r\n            function(p) {\r\n                return p.id != id;\r\n            }\r\n        );\r\n    },\r\n    /**\r\n     * Adds a place to the array of starting places\r\n     * @param {*} id id of the place\r\n     */\r\n    addStartingPlace: function(id) {\r\n        this.startingplaces.push(id);\r\n    },\r\n    /**\r\n     * Removes a place from the array of starting places\r\n     * @param {*} id id of the place\r\n     */\r\n    removeStartingPlace: function(id) {\r\n        this.startingplaces = this.startingplaces.filter(\r\n            function(e) {\r\n                return e != id;\r\n            }\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Returns whether a place is in the array of starting places\r\n     * @param {*} id id of the place\r\n     * @returns {boolean}\r\n     */\r\n    isStartingPlace: function(id) {\r\n        return this.startingplaces.includes(id);\r\n    },\r\n\r\n    /**\r\n     * Adds a place to the array of target places\r\n     * @param {*} id id of the place\r\n     */\r\n    addTargetPlace: function(id) {\r\n        this.targetplaces.push(id);\r\n    },\r\n\r\n    /**\r\n     * Removes a place from the array of target places\r\n     * @param {*} id id of the place\r\n     */\r\n    removeTargetPlace: function(id) {\r\n        this.targetplaces = this.targetplaces.filter(\r\n            function(e) {\r\n                return e != id;\r\n            }\r\n        );\r\n    },\r\n\r\n   /**\r\n    * Adds a place to the array of target places\r\n    * @param {*} id id of the place\r\n    * @param {*} linkTargetType type of link target (blank or self)\r\n    */\r\n    changeLinkTargetType: function(id, linkTargetType) {\r\n        this.places.forEach((el) => {\r\n            if (el.id === id) {\r\n                el.linkTargetType = linkTargetType;\r\n            }\r\n        });\r\n    },\r\n\r\n    /**\r\n         * Returns whether a place is in the array of target places\r\n         * @param {number} id id of the place\r\n         * @returns {boolean}\r\n         */\r\n    isLinkTargetTypeBlank: function(id) {\r\n        let state;\r\n        this.places.forEach(el => {\r\n            if (el.id === id) {\r\n                state = (el.linkTargetType === '_blank') ? 'checked' : false;\r\n            }\r\n        });\r\n        return state;\r\n    },\r\n\r\n    /**\r\n        * Adds a place to the array of target places\r\n        * @param {*} id id of the place\r\n        * @param {*} opacityValue num of link opacity\r\n        */\r\n    changeLinkTargetOpacity: function(id, opacityValue) {\r\n        this.places.forEach((el) => {\r\n            if (el.id === id) {\r\n                el.opacityValue = opacityValue;\r\n            }\r\n        });\r\n    },\r\n\r\n    /**\r\n         * Returns whether a place is in the array of target places\r\n         * @param {number} id id of the place\r\n         * @returns {boolean}\r\n         */\r\n    isLinkTargetOpacity: function(id) {\r\n        let value;\r\n        this.places.forEach(el => {\r\n            if (el.id === id) {\r\n                value = (el.opacityValue === 0) ? 'checked' : false;\r\n            }\r\n        });\r\n        return value;\r\n    },\r\n\r\n    /**\r\n        * Change place target size\r\n        * @param {*} id id of the place\r\n        * @param {*} size size in rem\r\n        */\r\n    changeLinkTargetSize: function(id, size) {\r\n        this.places.forEach((el) => {\r\n            if (el.id === id) {\r\n                el.linkTargetSize = size;\r\n            }\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Returns whether a place is in the array of target places\r\n     * @param {number} id id of the place\r\n     * @returns {boolean}\r\n     */\r\n    isTargetPlace: function(id) {\r\n        return this.targetplaces.includes(id);\r\n    },\r\n    /**\r\n     * Adds a path between two places\r\n     * @param {*} pid id of the path\r\n     * @param {*} fid id of the first place\r\n     * @param {*} sid id of the second place\r\n     */\r\n    addPath: function(pid, fid, sid) {\r\n        this.paths.push({\r\n            id: pid,\r\n            fid: fid,\r\n            sid: sid,\r\n            strokecolor: null,\r\n            strokedasharray: null,\r\n            hidepath: null\r\n        });\r\n    },\r\n    /**\r\n     * Removes a path\r\n     * @param {*} id id of the place\r\n     */\r\n    removePath: function(id) {\r\n        this.paths = this.paths.filter(\r\n            function(p) {\r\n                return p.id != id;\r\n            }\r\n        );\r\n    },\r\n    /**\r\n     * Returns an array of paths touching a place\r\n     * @param {*} id id of the place\r\n     * @returns {array}\r\n     */\r\n    getTouchingPaths: function(id) {\r\n        return this.paths.filter(\r\n            function(p) {\r\n                return p.fid == id || p.sid == id;\r\n            }\r\n        );\r\n    },\r\n    /**\r\n     * Returns the course module id linked to a place\r\n     * @param {*} id id of the place\r\n     * @returns {number} id of the linked course module\r\n     */\r\n    getActivityId: function(id) {\r\n        let place = this.places.filter(\r\n            function(e) {\r\n                return id == e.id;\r\n            }\r\n        );\r\n        if (place.length > 0) {\r\n            return place[0].linkedActivity;\r\n        } else {\r\n            return null;\r\n        }\r\n    },\r\n    /**\r\n     * Sets the id of the linked course module\r\n     * @param {*} id id of the place\r\n     * @param {*} linkedActivity course module id\r\n     */\r\n    setActivityId: function(id, linkedActivity) {\r\n        let place = this.places.filter(\r\n            function(e) {\r\n                return id == e.id;\r\n            }\r\n        );\r\n        if (place.length > 0) {\r\n            place[0].linkedActivity = linkedActivity;\r\n        }\r\n    },\r\n    /**\r\n     * Validates if the input is a valid URL.\r\n     * @param {string} url\r\n     * @returns {boolean} true if valid, false if invalid\r\n     */\r\n    isValidURL: function(url) {\r\n        const errorElement = document.getElementById('external-link-error');\r\n        const inputElement = document.getElementById('learningmap-external-link');\r\n\r\n        if (url.trim() === '') {\r\n            errorElement.style.display = 'none';\r\n            inputElement.classList.remove('is-invalid');\r\n            return true;\r\n        }\r\n\r\n        try {\r\n            if (!/^https?:\\/\\//i.test(url)) {\r\n                url = 'https://' + url;\r\n            }\r\n\r\n            const parsedURL = new URL(url);\r\n\r\n            // Ensure the URL has a valid hostname and a dot ('.')\r\n            if (!parsedURL.hostname || parsedURL.hostname.indexOf('.') === -1) {\r\n                return false;\r\n            }\r\n\r\n            // Allow only http and https protocols\r\n            if (!['http:', 'https:'].includes(parsedURL.protocol)) {\r\n                return false;\r\n            }\r\n\r\n            if (/[<>]/.test(url)) {\r\n                return false;\r\n            }\r\n\r\n            if (/javascript:/i.test(url) || /<script>/i.test(url)) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    },\r\n    /**\r\n     * Sets the external link for the place after validating it.\r\n     * @param {*} id id of the place\r\n     * @param {*} externalLink the external link to save\r\n     * @returns {boolean} true if the URL is valid and saved, false otherwise\r\n     */\r\n    setExternalLink: function(id, externalLink) {\r\n        const errorElement = document.getElementById('external-link-error');\r\n        const inputElement = document.getElementById('learningmap-external-link');\r\n\r\n        if (!externalLink || externalLink.trim() === '') {\r\n            errorElement.style.display = 'none';\r\n            inputElement.classList.remove('is-invalid');\r\n            return true;\r\n        }\r\n\r\n        errorElement.style.display = 'none';\r\n        inputElement.classList.remove('is-invalid');\r\n\r\n        if (!this.isValidURL(externalLink)) {\r\n            errorElement.style.display = 'block';\r\n            inputElement.classList.add('is-invalid');\r\n            return false;\r\n        }\r\n\r\n        let place = this.places.find(e => e.id === id);\r\n        if (place) {\r\n            place.externalLink = externalLink;\r\n        }\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Returns the external link linked to a place.w\r\n     * @param {*} id id of the place\r\n     * @returns {string|null} sanitized string of the linked URL or null\r\n     */\r\n    getExternalLink: function(id) {\r\n        let place = this.places.find(e => e.id === id);\r\n        return place ? place.externalLink : null;\r\n    },\r\n    /**\r\n     * Sets the selected link type for a place (either external link or course module)\r\n     * @param {*} id id of the place\r\n     * @param {*} selectedLinkType type of link selected (either 'activity' or 'externalLink')\r\n     */\r\n    setSelectedLinkType: function(id, selectedLinkType) {\r\n        let place = this.places.find(e => e.id === id);\r\n        if (place) {\r\n            place.selectedLinkType = selectedLinkType;\r\n        }\r\n    },\r\n    /**\r\n     * Sets the color of 'stroke', 'place' or 'visited'\r\n     * @param {*} type type of the color\r\n     * @param {*} color color in hex format\r\n     */\r\n    setColor: function(type, color) {\r\n        switch (type) {\r\n            case 'stroke':\r\n                this.strokecolor = color;\r\n                break;\r\n            case 'place':\r\n                this.placecolor = color;\r\n                break;\r\n            case 'visited':\r\n                this.visitedcolor = color;\r\n                break;\r\n            case 'text':\r\n                this.textcolor = color;\r\n                break;\r\n        }\r\n    },\r\n    /**\r\n     * Gets the color of 'stroke', 'place' or 'visited'\r\n     * @param {*} type type of the color\r\n     * @returns {string} color in hex format\r\n     */\r\n    getColor: function(type) {\r\n        switch (type) {\r\n            case 'stroke':\r\n                return this.strokecolor;\r\n            case 'place':\r\n                return this.placecolor;\r\n            case 'visited':\r\n                return this.visitedcolor;\r\n            case 'text':\r\n                return this.textcolor;\r\n        }\r\n        return null;\r\n    },\r\n    /**\r\n     * Returns the current id\r\n     * @returns {number}\r\n     */\r\n    getId: function() {\r\n        return this.id;\r\n    },\r\n    /**\r\n     * Sets the dimensions of the background image\r\n     * @param {*} width\r\n     * @param {*} height\r\n     */\r\n    setBackgroundDimensions: function(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n    },\r\n    /**\r\n     * Returns all paths starting at a place\r\n     * @param {*} id id of the place\r\n     * @returns {array}\r\n     */\r\n    getPathsWithFid: function(id) {\r\n        return this.paths.filter(function(p) {\r\n            return p.fid == id;\r\n        });\r\n    },\r\n    /**\r\n     * Returns all paths ending at a place\r\n     * @param {*} id id of the place\r\n     * @returns {array}\r\n     */\r\n    getPathsWithSid: function(id) {\r\n        return this.paths.filter(function(p) {\r\n            return p.sid == id;\r\n        });\r\n    },\r\n    /**\r\n     * Returns the attributes of placestore\r\n     * @returns {object}\r\n     */\r\n    getPlacestore: function() {\r\n        return {\r\n            id: this.id,\r\n            places: this.places,\r\n            paths: this.paths,\r\n            startingplaces: this.startingplaces,\r\n            targetplaces: this.targetplaces,\r\n            placecolor: this.placecolor,\r\n            strokecolor: this.strokecolor,\r\n            strokeopacity: this.strokeopacity,\r\n            textcolor: this.textcolor,\r\n            visitedcolor: this.visitedcolor,\r\n            height: this.height,\r\n            width: this.width,\r\n            hidepaths: this.hidepaths,\r\n            mapid: this.mapid,\r\n            usecheckmark: this.usecheckmark,\r\n            editmode: this.editmode,\r\n            version: this.version,\r\n            pulse: this.pulse,\r\n            hover: this.hover,\r\n            showall: this.showall,\r\n            showtext: this.showtext,\r\n            slicemode: this.slicemode,\r\n            showwaygone: this.showwaygone,\r\n        };\r\n    },\r\n    /**\r\n     * Sets hidepaths attribute\r\n     * @param {boolean} value\r\n     */\r\n    setHidePaths: function(value) {\r\n        this.hidepaths = value;\r\n    },\r\n    /**\r\n     * Returns the value of hidepaths attribute\r\n     * @returns {boolean}\r\n     */\r\n    getHidePaths: function() {\r\n        return this.hidepaths;\r\n    },\r\n    /**\r\n     * Sets pulse attribute\r\n     * @param {boolean} value\r\n     */\r\n    setPulse: function(value) {\r\n        this.pulse = value;\r\n    },\r\n    /**\r\n     * Returns the value of pulse attribute\r\n     * @returns {boolean}\r\n     */\r\n    getPulse: function() {\r\n        return this.pulse;\r\n    },\r\n    /**\r\n     * Sets hover attribute\r\n     * @param {boolean} value\r\n     */\r\n    setHover: function(value) {\r\n        this.hover = value;\r\n    },\r\n    /**\r\n     * Returns the value of hover attribute\r\n     * @returns {boolean}\r\n     */\r\n    getHover: function() {\r\n        return this.hover;\r\n    },\r\n    /**\r\n     * Sets showall attribute\r\n     * @param {boolean} value\r\n     */\r\n    setShowall: function(value) {\r\n        this.showall = value;\r\n    },\r\n    /**\r\n     * Returns the value of showall attribute\r\n     * @returns {boolean}\r\n     */\r\n    getShowall: function() {\r\n        return this.showall;\r\n    },\r\n    /**\r\n     * Returns the mapid\r\n     * @returns {string}\r\n     */\r\n    getMapid: function() {\r\n        return this.mapid;\r\n    },\r\n    /**\r\n     * Returns the value of usecheckmark attribute\r\n     * @returns {boolean}\r\n     */\r\n    getUseCheckmark: function() {\r\n        return this.usecheckmark;\r\n    },\r\n    /**\r\n     * Sets the value of usecheckmark attribute\r\n     * @param {boolean} value\r\n     */\r\n    setUseCheckmark: function(value) {\r\n        this.usecheckmark = value;\r\n    },\r\n    /**\r\n     * Returns an array with all activity ids\r\n     * @returns {array}\r\n     */\r\n    getAllActivities: function() {\r\n        let activities = [];\r\n        this.places.forEach(function(p) {\r\n            if (p.linkedActivity) {\r\n                activities.push(p.linkedActivity);\r\n            }\r\n        });\r\n        return activities;\r\n    },\r\n    /**\r\n     * Sets stroke opacity\r\n     * @param {number} value\r\n     */\r\n    setStrokeOpacity: function(value) {\r\n        this.strokeopacity = value;\r\n    },\r\n    /**\r\n     * Returns the current stroke opacity\r\n     * @returns {number}\r\n     */\r\n    getStrokeOpacity: function() {\r\n        return this.strokeopacity;\r\n    },\r\n    /**\r\n     * Sets stroke opacity to 0\r\n     * @param {number} value\r\n     */\r\n    setHideStroke: function(value) {\r\n        this.strokeopacity = (value ? 0 : 1);\r\n    },\r\n    /**\r\n     * Returns the current stroke opacity\r\n     * @returns {number}\r\n     */\r\n    getHideStroke: function() {\r\n        return this.strokeopacity < 1;\r\n    },\r\n    /**\r\n     * Returns the value of showtext attribute\r\n     * @returns {boolean}\r\n     */\r\n    getShowText: function() {\r\n        return this.showtext;\r\n    },\r\n    /**\r\n     * Sets the value of showtext attribute\r\n     * @param {boolean} value\r\n     */\r\n    setShowText: function(value) {\r\n        this.showtext = value;\r\n    },\r\n    /**\r\n     * Returns an array with all place identifiers\r\n     * @returns {array}\r\n     */\r\n     getPlaces: function() {\r\n        return this.places;\r\n    },\r\n    /**\r\n     * Returns if slicemode is enabled\r\n     * @returns {boolean}\r\n     */\r\n    getSliceMode: function() {\r\n        return this.slicemode;\r\n    },\r\n    /**\r\n     * Sets state of slicemode\r\n     * @param {boolean} value\r\n     */\r\n    setSliceMode: function(value) {\r\n        this.slicemode = value;\r\n    },\r\n    /**\r\n     * Returns if showwaygone is enabled\r\n     * @returns {boolean}\r\n     */\r\n    getShowWayGone: function() {\r\n        return this.showwaygone;\r\n    },\r\n    /**\r\n     * Sets state of showwaygone\r\n     * @param {boolean} value\r\n     */\r\n    setShowWayGone: function(value) {\r\n        this.showwaygone = value;\r\n    },\r\n};\r\n\r\nexport default placestore;"],"names":["placestore","version","id","places","paths","startingplaces","targetplaces","placecolor","strokecolor","strokeopacity","textcolor","visitedcolor","height","width","hidepaths","mapid","usecheckmark","editmode","pulse","hover","showall","showtext","slicemode","showwaygone","loadJSON","json","fromjson","JSON","parse","Object","assign","this","buildJSON","stringify","getPlacestore","addPlace","linkId","linkTargetType","linkTargetSize","opacityValue","linkedActivity","arguments","length","undefined","externalLink","selectedLinkType","push","addStartingPlace","removePlace","removeStartingPlace","removeTargetPlace","filter","p","e","isStartingPlace","includes","addTargetPlace","changeLinkTargetType","forEach","el","isLinkTargetTypeBlank","state","changeLinkTargetOpacity","isLinkTargetOpacity","value","changeLinkTargetSize","size","isTargetPlace","addPath","pid","fid","sid","strokedasharray","hidepath","removePath","getTouchingPaths","getActivityId","place","setActivityId","isValidURL","url","errorElement","document","getElementById","inputElement","trim","style","display","classList","remove","test","parsedURL","URL","hostname","indexOf","protocol","setExternalLink","add","find","getExternalLink","setSelectedLinkType","setColor","type","color","getColor","getId","setBackgroundDimensions","getPathsWithFid","getPathsWithSid","setHidePaths","getHidePaths","setPulse","getPulse","setHover","getHover","setShowall","getShowall","getMapid","getUseCheckmark","setUseCheckmark","getAllActivities","activities","setStrokeOpacity","getStrokeOpacity","setHideStroke","getHideStroke","getShowText","setShowText","getPlaces","getSliceMode","setSliceMode","getShowWayGone","setShowWayGone","_default","_exports","default"],"mappings":"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"}