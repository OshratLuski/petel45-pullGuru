{"version":3,"file":"learningmap.min.js","sources":["../src/learningmap.js"],"sourcesContent":["import {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport placestore from 'mod_learningmap/placestore';\n\nconst circleRadius = 16;\n\n// Constants for updatePathDeclaration.\nconst targetPoints = {\n    firstPoint: 1,\n    secondPoint: 2,\n    bezierPoint: 3,\n};\n\nconst pathTypes = {\n    line: 1,\n    quadraticbezier: 2,\n};\n\nexport const init = () => {\n    // Load the needed template on startup for better execution speed.\n    Templates.prefetchTemplates(['mod_learningmap/cssskeleton']);\n\n    // Variable for storing the mouse offset\n    var offset;\n\n    // Variable for draggable element\n    var dragel;\n\n    // Variables for storing the paths that need update of the first or\n    // the second coordinates.\n    var pathsToUpdateFirstPoint, pathsToUpdateSecondPoint;\n\n    // Variables for handling the currently selected elements\n    var selectedElement = null,\n        firstPlace = null,\n        secondPlace = null,\n        lastTarget = null;\n\n    // Variable for storing the selected element for the activity selector\n    var elementForActivitySelector = null;\n\n    // Variables for simulating double click on touch devices, set when the\n    // corresponding events are handled\n    var touchstart = false;\n    var touchend = false;\n    // Counter for touchmove events\n    var touchmove = 0;\n\n    const externalLink = 'externalLink';\n    const linkedActivity = 'linkedActivity';\n\n    // DOM nodes for the editor\n    let mapdiv = document.getElementById('learningmap-editor-map');\n    let code = document.getElementById('id_svgcode');\n\n    // DOM nodes for the activity selector\n    let activitySetting = document.getElementById('learningmap-activity-setting');\n    let activitySelector = document.getElementById('learningmap-activity-selector');\n    let activityStarting = document.getElementById('learningmap-activity-starting');\n    let activityTarget = document.getElementById('learningmap-activity-target');\n    let activityLinkTarget = document.getElementById('learningmap-activity-newwindow');\n    let activityLinkTransparent = document.getElementById('learningmap-activity-transparent');\n    let activityLinkSize = document.getElementById('learningmap-activity-pointsize');\n    let linkSelector = document.getElementById('learningmap-external-link');\n    let radioLinkSelector = document.getElementById('radio-link');\n    let radioLinkedActivity = document.getElementById('radio-activity');\n\n    // Set initial state based on selection\n    const updateSelectedLinkType = () => {\n        if (radioLinkSelector.checked) {\n            placestore.setSelectedLinkType(elementForActivitySelector, externalLink);\n            placestore.setActivityId(elementForActivitySelector, null);\n        } else if (radioLinkedActivity.checked) {\n            placestore.setSelectedLinkType(elementForActivitySelector, linkedActivity);\n            placestore.setExternalLink(elementForActivitySelector, null);\n        }\n    };\n\n    // Initial call to set the state\n    updateSelectedLinkType();\n\n    let activityHiddenWarning = document.getElementById('learningmap-activity-hidden-warning');\n    let advancedSettingsIcon = document.getElementById('learningmap-advanced-settings-icon');\n\n    // Hide tree view as there is no preview file we can attach to\n    let treeView = document.querySelector('.fp-viewbar .fp-vb-tree');\n    if (treeView) {\n        treeView.setAttribute('style', 'display: none;');\n    }\n\n    // Trigger click event on icon view to ensure that tree view is not active.\n    let iconView = document.querySelector('.fp-viewbar .fp-vb-icons');\n    if (iconView) {\n        // Handle possible delay in form loading.\n        setTimeout(() => {\n            iconView.dispatchEvent(new Event('click'));\n        }, 1000);\n    }\n\n    if (linkSelector) {\n        linkSelector.addEventListener('change', function() {\n            // Placestore.setExternalLink(elementForActivitySelector, linkSelector.value);\n            const isValid = placestore.setExternalLink(elementForActivitySelector, linkSelector.value);\n            if (!isValid) {\n                document.getElementById('learningmap-activity-setting').style.display = 'block';\n                return;\n            }\n            if (linkSelector.value) {\n                let text = document.getElementById('text' + elementForActivitySelector);\n                if (text) {\n                    text.textContent = linkSelector.value.trim().substring(0, 50);\n                }\n                let title = document.getElementById('title' + elementForActivitySelector);\n                if (title) {\n                    title.textContent = linkSelector.value;\n                }\n                document.getElementById(elementForActivitySelector).classList.remove('learningmap-emptyplace');\n                document.getElementById(elementForActivitySelector).closest('a').classList.add('external-link');\n            } else {\n                document.getElementById(elementForActivitySelector).classList.add('learningmap-emptyplace');\n                document.getElementById(elementForActivitySelector).closest('a').classList.remove('external-link');\n\n            }\n            updateSelectedLinkType();\n            updateCode();\n        });\n    }\n\n    // Attach listeners to the activity selector\n    if (activitySelector) {\n        radioLinkedActivity.addEventListener('click', function() {\n            const errorElement = document.getElementById('external-link-error'); // הודעת שגיאה\n            const inputElement = document.getElementById('learningmap-external-link'); // שדה הקלט\n\n            errorElement.style.display = 'none';\n            inputElement.classList.remove('is-invalid');\n            linkSelector.value = '';\n\n        });\n        placestore.setSelectedLinkType(elementForActivitySelector, 'linkedActivity');\n        activitySelector.addEventListener('change', function() {\n            placestore.setActivityId(elementForActivitySelector, activitySelector.value);\n            if (activitySelector.value) {\n                let text = document.getElementById('text' + elementForActivitySelector);\n                if (text) {\n                    text.textContent = activitySelector.querySelector('option[value=\"' + activitySelector.value + '\"]').textContent;\n                }\n                let title = document.getElementById('title' + elementForActivitySelector);\n                if (title) {\n                    title.textContent =\n                        activitySelector.querySelector('option[value=\"' + activitySelector.value + '\"]').textContent;\n                }\n                document.getElementById(elementForActivitySelector).classList.remove('learningmap-emptyplace');\n            } else {\n                document.getElementById(elementForActivitySelector).classList.add('learningmap-emptyplace');\n            }\n            updateSelectedLinkType();\n            updateActivities();\n            updateCode();\n        });\n        // Add / remove a place to the starting places array\n        activityStarting.addEventListener('change', function() {\n            if (activityStarting.checked) {\n                placestore.addStartingPlace(elementForActivitySelector);\n            } else {\n                placestore.removeStartingPlace(elementForActivitySelector);\n            }\n            updateCode();\n        });\n        // Add / remove a place to the target places array\n        activityTarget.addEventListener('change', function() {\n            if (activityTarget.checked) {\n                placestore.addTargetPlace(elementForActivitySelector);\n                document.getElementById(elementForActivitySelector).classList.add('learningmap-targetplace');\n            } else {\n                placestore.removeTargetPlace(elementForActivitySelector);\n                document.getElementById(elementForActivitySelector).classList.remove('learningmap-targetplace');\n            }\n            updateCode();\n        });\n\n        // Add / remove target value places array\n        activityLinkTarget.addEventListener('change', function() {\n            if (activityLinkTarget.checked) {\n                placestore.changeLinkTargetType(elementForActivitySelector, '_blank');\n                document.getElementById(elementForActivitySelector).closest('a').classList.add('learningmap-newwindow');\n            } else {\n                placestore.changeLinkTargetType(elementForActivitySelector, '_self');\n                document.getElementById(elementForActivitySelector).closest('a').classList.remove('learningmap-newwindow');\n            }\n            updateCode();\n        });\n\n        // Add / remove transparent value places array\n        activityLinkTransparent.addEventListener('change', function() {\n            if (activityLinkTransparent.checked) {\n                placestore.changeLinkTargetOpacity(elementForActivitySelector, 0);\n                document.getElementById(elementForActivitySelector).closest('a').classList.add('learningmap-opacity');\n                document.getElementById(elementForActivitySelector).closest('a').setAttribute('opacity', 0.25);\n\n            } else {\n                placestore.changeLinkTargetOpacity(elementForActivitySelector, 1);\n                document.getElementById(elementForActivitySelector).closest('a').classList.remove('learningmap-opacity');\n                document.getElementById(elementForActivitySelector).closest('a').setAttribute('opacity', 1);\n\n            }\n\n            updateCode();\n        });\n\n        // Change link point size\n        activityLinkSize.addEventListener('change', function(e) {\n            let radius = e.target.value;\n            placestore.changeLinkTargetSize(elementForActivitySelector, +radius);\n            document.getElementById(elementForActivitySelector).setAttribute('r', +radius * circleRadius);\n\n            updateCode();\n        });\n\n    }\n\n    // Load placestore values from the hidden input field\n    let placestoreInput = document.getElementsByName('placestore')[0];\n    if (placestoreInput) {\n        placestore.loadJSON(placestoreInput.value);\n    }\n\n    // Mark all activities in the placestore as \"used\".\n    updateActivities();\n\n    // Attach listeners to the advanced settings div\n    if (advancedSettingsIcon) {\n        let advancedSettings = document.getElementById('learningmap-advanced-settings');\n        advancedSettingsIcon.addEventListener('click', function() {\n            if (advancedSettings.getAttribute('hidden') === null) {\n                hideAdvancedSettings();\n            } else {\n                advancedSettings.removeAttribute('hidden');\n                hideContextMenu();\n            }\n        });\n        let advancedSettingsClose = document.getElementById('learningmap-advanced-settings-close');\n        if (advancedSettingsClose) {\n            advancedSettingsClose.addEventListener('click', function() {\n                advancedSettings.setAttribute('hidden', '');\n            });\n        }\n\n        advancedSettingsLogic('hidepaths', placestore.getHidePaths, placestore.setHidePaths);\n        advancedSettingsLogic('usecheckmark', placestore.getUseCheckmark, placestore.setUseCheckmark);\n        advancedSettingsLogic('hover', placestore.getHover, placestore.setHover);\n        advancedSettingsLogic('pulse', placestore.getPulse, placestore.setPulse);\n        advancedSettingsLogic('showall', placestore.getShowall, placestore.setShowall);\n        advancedSettingsLogic('hidestroke', placestore.getHideStroke, placestore.setHideStroke);\n        advancedSettingsLogic('showtext', placestore.getShowText, placestore.setShowText, fixPlaceLabels);\n        advancedSettingsLogic('slicemode', placestore.getSliceMode, placestore.setSliceMode);\n        advancedSettingsLogic('showwaygone', placestore.getShowWayGone, placestore.setShowWayGone);\n    }\n\n    // Attach listener to the color choosers\n    colorChooserLogic('stroke', 'text');\n    colorChooserLogic('place');\n    colorChooserLogic('visited');\n\n    // Get SVG code from the (hidden) textarea field\n    if (code && mapdiv) {\n        mapdiv.innerHTML = code.value;\n    }\n    // Reload background image to get the correct width and height values\n    refreshBackgroundImage();\n    registerBackgroundListener();\n    updateCode();\n\n    // Enable dragging of places\n    let svg = document.getElementById('learningmap-svgmap-' + placestore.getMapid());\n    makeDraggable(svg);\n\n    // Refresh stylesheet values from placestore\n    updateCSS();\n\n    // Add listeners for clicking and context menu\n    if (mapdiv) {\n        mapdiv.addEventListener('dblclick', dblclickHandler);\n        mapdiv.addEventListener('click', clickHandler);\n\n        mapdiv.addEventListener('contextmenu', function(e) {\n            e.preventDefault();\n            showContextMenu(e);\n        }, false);\n    }\n    /**\n     * Shows the context menu at the current mouse position\n     * @param {*} e\n     */\n    function showContextMenu(e) {\n        unselectAll();\n        hideAdvancedSettings();\n        // Check for the existence of the target (could have vanished since the event started).\n        if (activitySetting && document.getElementById(e.target.id) !== null) {\n            if (e.touches) {\n                e = e.touches[0];\n            }\n            if (e.target.classList.contains('learningmap-place')) {\n                e.target.classList.add('learningmap-selected-activity-selector');\n                let activityId = placestore.getActivityId(e.target.id);\n                let externalLink = placestore.getExternalLink(e.target.id);\n                let scalingFactor = mapdiv.clientWidth / 800;\n                activitySetting.style.setProperty('--pos-x', e.target.cx.baseVal.value * scalingFactor + 'px');\n                activitySetting.style.setProperty('--pos-y', e.target.cy.baseVal.value * scalingFactor + 'px');\n\n                activitySetting.style.setProperty('--map-width', mapdiv.clientWidth + 'px');\n\n                activitySetting.style.setProperty('--map-height', mapdiv.clientHeight + 'px');\n                activitySetting.style.visibility = 'hidden';\n                activitySetting.style.display = 'block';\n\n                if (document.documentElement.dir === 'rtl') {\n                    let newPosX = e.target.cx.baseVal.value - 16 - mapdiv.clientWidth;\n                    // eslint-disable-next-line max-len\n                    newPosX = -activitySetting.clientWidth > newPosX ? -mapdiv.clientWidth + activitySetting.clientWidth : newPosX;\n                    activitySetting.style.setProperty('--pos-x', newPosX + 'px');\n                }\n\n                activitySetting.style.visibility = 'visible';\n\n                if (activityId) {\n                    radioLinkedActivity.checked = true;\n                    document.getElementById('learningmap-activity-selector').value = activityId;\n                } else if (externalLink) {\n                    radioLinkSelector.checked = true;\n                    document.getElementById('learningmap-external-link').value = externalLink;\n                }\n                document.getElementById('learningmap-activity-starting').checked = placestore.isStartingPlace(e.target.id);\n                document.getElementById('learningmap-activity-target').checked = placestore.isTargetPlace(e.target.id);\n                document.getElementById('learningmap-activity-newwindow').checked = placestore.isLinkTargetTypeBlank(e.target.id);\n                document.getElementById('learningmap-activity-transparent').checked = placestore.isLinkTargetOpacity(e.target.id);\n                const circleRadius = 16;\n                document.getElementById('learningmap-activity-pointsize').value =\n                    document.getElementById(e.target.id).getAttribute('r') / circleRadius;\n\n                elementForActivitySelector = e.target.id;\n                updateActivities();\n            } else {\n                hideContextMenu();\n                hideAdvancedSettings();\n            }\n        }\n    }\n\n    /**\n     * Hides the context menu\n     */\n    function hideContextMenu() {\n        let e = document.getElementById(elementForActivitySelector);\n        if (e) {\n            e.classList.remove('learningmap-selected-activity-selector');\n        }\n        activitySetting.style.display = 'none';\n    }\n\n    let backgroundfileNode = document.getElementById('id_backgroundfile_fieldset');\n    if (backgroundfileNode) {\n        let observer = new MutationObserver(refreshBackgroundImage);\n        observer.observe(backgroundfileNode, {attributes: true, childList: true, subtree: true});\n    }\n\n    /**\n     * Helper function for getting the right coordinates from the mouse\n     * @param {*} evt\n     * @returns {object}\n     */\n    function getMousePosition(evt) {\n        if (evt.touches) {\n            evt = evt.touches[0];\n        }\n        return transformCoordinates(evt.clientX, evt.clientY);\n    }\n\n    /**\n     * Transforms client coordinates to SVG coordinates\n     * @param {number} x x coordinate to transform\n     * @param {number} y y coordinate to transform\n     * @returns {object} Object containing transformed x and y coordinate\n     */\n    function transformCoordinates(x, y) {\n        var CTM = dragel.getScreenCTM();\n        return {\n            x: (x - CTM.e) / CTM.a,\n            y: (y - CTM.f) / CTM.d\n        };\n    }\n\n    /**\n     * Enables dragging on an DOM node\n     * @param {*} el\n     */\n    function makeDraggable(el) {\n        dragel = el;\n        if (el) {\n            el.addEventListener('mousedown', startDrag);\n            el.addEventListener('mousemove', drag);\n            el.addEventListener('mouseup', endDrag);\n            el.addEventListener('mouseleave', endDrag);\n            el.addEventListener('touchstart', startTouch);\n            el.addEventListener('touchmove', drag);\n            el.addEventListener('touchend', endTouch);\n            el.addEventListener('touchleave', endTouch);\n            el.addEventListener('touchcancel', endTouch);\n        }\n\n        /**\n         * Function called whenn dragging starts.\n         * @param {*} evt\n         */\n        function startDrag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            pathsToUpdateFirstPoint = [];\n            pathsToUpdateSecondPoint = [];\n            if (evt.target.classList.contains('learningmap-draggable')) {\n                selectedElement = evt.target;\n                offset = getMousePosition(evt);\n                offset.x -= parseInt(selectedElement.getAttributeNS(null, \"cx\"));\n                offset.y -= parseInt(selectedElement.getAttributeNS(null, \"cy\"));\n                // Get paths that need to be updated.\n                pathsToUpdateFirstPoint = placestore.getPathsWithFid(selectedElement.id);\n                pathsToUpdateSecondPoint = placestore.getPathsWithSid(selectedElement.id);\n            } else if (evt.target.nodeName == 'text') {\n                selectedElement = evt.target;\n                let place = selectedElement.parentNode.querySelector('.learningmap-place');\n                offset = getMousePosition(evt);\n                offset.x -= parseInt(selectedElement.getAttributeNS(null, \"dx\")) + place.cx.baseVal.value;\n                offset.y -= parseInt(selectedElement.getAttributeNS(null, \"dy\")) + place.cy.baseVal.value;\n            } else if (evt.target.nodeName == 'path') {\n                selectedElement = evt.target;\n                offset = getMousePosition(evt);\n                let pathPoint = transformCoordinates(evt.layerX, evt.layerY);\n                offset.x += pathPoint.x;\n                offset.y += pathPoint.y;\n            }\n        }\n\n        /**\n         * Function called during dragging. Continuously updates circles center coordinates and the\n         * coordinates of the touching paths.\n         * @param {*} evt\n         */\n        function drag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            // Count touchmove events\n            touchmove++;\n            if (selectedElement) {\n                var coord = getMousePosition(evt);\n                let cx = coord.x - offset.x;\n                let cy = coord.y - offset.y;\n                if (selectedElement.nodeName == 'text') {\n                    let place = selectedElement.parentNode.querySelector('.learningmap-place');\n                    // Calculate the delta from the current mouse position to the corresponding place.\n                    // coord: current mouse position\n                    // offset: delta from the mouse position to the coordinates of the text node\n                    let dx = coord.x - offset.x - place.cx.baseVal.value;\n                    let dy = coord.y - offset.y - place.cy.baseVal.value;\n                    selectedElement.setAttributeNS(null, \"dx\", dx);\n                    selectedElement.setAttributeNS(null, \"dy\", dy);\n                }\n                if (selectedElement.nodeName == 'path') {\n                    selectedElement.setAttribute(\n                        'd',\n                        updatePathDeclaration(selectedElement.getAttribute('d'), coord.x, coord.y, targetPoints.bezierPoint)\n                    );\n                }\n                if (selectedElement.nodeName == 'circle') {\n                    selectedElement.setAttributeNS(null, \"cx\", cx);\n                    selectedElement.setAttributeNS(null, \"cy\", cy);\n                    let textNode = document.getElementById('text' + selectedElement.id);\n                    if (textNode !== null) {\n                        textNode.setAttributeNS(null, 'x', cx);\n                        textNode.setAttributeNS(null, 'y', cy);\n                    }\n                    pathsToUpdateFirstPoint.forEach(function(path) {\n                        let pathNode = document.getElementById(path.id);\n                        if (pathNode !== null) {\n                            if (pathNode.nodeName == 'path') {\n                                pathNode.setAttribute(\n                                    'd',\n                                    updatePathDeclaration(pathNode.getAttribute('d'), cx, cy, targetPoints.firstPoint)\n                                );\n                            } else {\n                                pathNode.setAttribute('x1', cx);\n                                pathNode.setAttribute('y1', cy);\n                            }\n                        }\n                    });\n\n                    pathsToUpdateSecondPoint.forEach(function(path) {\n                        let pathNode = document.getElementById(path.id);\n                        if (pathNode !== null) {\n                            if (pathNode.nodeName == 'path') {\n                                pathNode.setAttribute(\n                                    'd',\n                                    updatePathDeclaration(pathNode.getAttribute('d'), cx, cy, targetPoints.secondPoint)\n                                );\n                            } else {\n                                pathNode.setAttribute('x2', cx);\n                                pathNode.setAttribute('y2', cy);\n                            }\n                        }\n                    });\n                }\n            }\n        }\n\n        /**\n         * Function called when dragging ends.\n         * @param {*} evt\n         */\n        function endDrag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            selectedElement = null;\n            unselectAll();\n            updateCode();\n        }\n\n        /**\n         * Function called when touchstart event occurs.\n         * @param {*} evt\n         */\n        function startTouch(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            if (\n                evt.target.classList.contains('learningmap-draggable') ||\n                evt.target.nodeName == 'text' ||\n                evt.target.nodeName == 'path'\n            ) {\n                if (!touchstart) {\n                    touchstart = true;\n                    touchmove = 0;\n                    touchend = false;\n                    setTimeout(\n                        (evt) => {\n                            if (touchmove < 3 && !touchend) {\n                                if (evt.touches) {\n                                    evt = evt.touches[0];\n                                }\n                                showContextMenu(evt);\n                            }\n                        },\n                        2000,\n                        evt\n                    );\n                    setTimeout(\n                        () => {\n                            touchstart = false;\n                        },\n                    300);\n                } else {\n                    dblclickHandler(evt);\n                    touchstart = false;\n                }\n                startDrag(evt);\n            } else {\n                if (!touchstart) {\n                    touchstart = true;\n                    touchend = false;\n                    touchmove = 0;\n                    setTimeout(\n                        () => {\n                            touchstart = false;\n                        },\n                    300);\n                } else {\n                    dblclickHandler(evt);\n                    touchstart = false;\n                }\n            }\n        }\n\n        /**\n         * Function called when touchend, touchleave or touchcancel event occurs.\n         * @param {*} evt\n         */\n        function endTouch(evt) {\n            selectedElement = null;\n            touchend = true;\n            // If there was only a small move (<3 move events), this also counts as a click.\n            if (touchmove < 3 && touchstart) {\n                clickHandler(evt);\n            } else {\n                endDrag(evt);\n            }\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n        }\n\n        /**\n         * Updates the path declaration of lines and quadratic bezier curves setting one of the points.\n         * @param {string} oldDefinition SVG path definition string\n         * @param {number} targetX x coordinate of the point to set\n         * @param {number} targetY y coordinate of the point to set\n         * @param {number} targetP Which point to change (you can use the targetPoints constants here)\n         * @returns {string} Updated SVG path definition\n         */\n        function updatePathDeclaration(oldDefinition, targetX, targetY, targetP = targetPoints.firstPoint) {\n            let parts = oldDefinition.split(' ');\n            let fromX = 0;\n            let fromY = 0;\n            let toX = 0;\n            let toY = 0;\n            let bezierX = 0;\n            let bezierY = 0;\n            let pathType = pathTypes.line;\n\n            // The d attribute of an SVG path in a learning map can have two different formats (in this version):\n            // \"M x1 y1 L x2 y2\"        Line from x1, y1 to x2, y2\n            // \"M x1 y2 Q x3 y3 x2 y2\"  Quadratic bezier curve inside the triangle defined by x1, y1, x2, y2 and x3, y3.\n            for (let i = 0; i < parts.length; i++) {\n                // Every path contains the first point in that way.\n                if (parts[i] == 'M') {\n                    fromX = parseInt(parts[i + 1]);\n                    fromY = parseInt(parts[i + 2]);\n                    i += 2;\n                }\n                // This path is a direct line, so there are only two points in total.\n                if (parts[i] == 'L') {\n                    toX = parseInt(parts[i + 1]);\n                    toY = parseInt(parts[i + 2]);\n                    i += 2;\n                }\n                // This path is a bezier curve, there are three points in total.\n                if (parts[i] == 'Q') {\n                    bezierX = parseInt(parts[i + 1]);\n                    bezierY = parseInt(parts[i + 2]);\n                    toX = parseInt(parts[i + 3]);\n                    toY = parseInt(parts[i + 4]);\n                    i += 4;\n                    pathType = pathTypes.quadraticbezier;\n                }\n            }\n\n            switch (targetP) {\n                case targetPoints.firstPoint:\n                    fromX = targetX;\n                    fromY = targetY;\n                    break;\n                case targetPoints.secondPoint:\n                    toX = targetX;\n                    toY = targetY;\n                    break;\n                case targetPoints.bezierPoint:\n                    // Calculate the third triangle point for the bezier curve.\n                    bezierX = targetX * 2 - (fromX + toX) * 0.5;\n                    bezierY = targetY * 2 - (fromY + toY) * 0.5;\n                    pathType = pathTypes.quadraticbezier;\n                    break;\n            }\n\n            if (pathType == pathTypes.quadraticbezier) {\n                return 'M ' + fromX + ' ' + fromY + ' Q ' + bezierX + ' ' + bezierY + ', ' + toX + ' ' + toY;\n            } else {\n                return 'M ' + fromX + ' ' + fromY + ' L ' + toX + ' ' + toY;\n            }\n        }\n    }\n\n    /**\n     * Updates the form fields for the SVG code and the placestore from the editor.\n     */\n    function updateCode() {\n        if (code && mapdiv) {\n            code.innerHTML = mapdiv.innerHTML;\n        }\n        if (placestoreInput) {\n            document.getElementsByName('placestore')[0].value = JSON.stringify(placestore.getPlacestore());\n        }\n    }\n\n    /**\n     * Handles double clicks on the map\n     * @param {*} event\n     */\n    function dblclickHandler(event) {\n        hideContextMenu();\n        hideAdvancedSettings();\n        unselectAll();\n        if (event.target.classList.contains('learningmap-mapcontainer') ||\n            event.target.classList.contains('learningmap-background-image')) {\n            addPlace(event);\n        } else if (event.target.classList.contains('learningmap-place')) {\n            if (lastTarget == event.target.id) {\n                lastTarget = null;\n                clickHandler(event);\n            } else {\n                removePlace(event);\n            }\n        } else if (event.target.classList.contains('learningmap-path')) {\n            removePath(event.target.id);\n        }\n        updateCode();\n    }\n\n    /**\n     * Returns an empty title tag with the given id.\n     * @param {*} id id for the title\n     * @returns {any}\n     */\n    function title(id) {\n        let title = document.createElementNS('http://www.w3.org/2000/svg', 'title');\n        title.setAttribute('id', id);\n        return title;\n    }\n\n    /**\n     * Returns an text tag with the given id.\n     * @param {*} id id for the text\n     * @param {*} content content of the tag\n     * @param {*} x x coordinate of the text\n     * @param {*} y y coordinate of the text\n     * @returns {any}\n     */\n     function text(id, content, x, y) {\n        let text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        text.setAttribute('id', id);\n        text.setAttribute('x', x);\n        text.setAttribute('y', y);\n        // Default value for delta: Circle radius * 1.5 (as a padding)\n        text.setAttribute('dx', circleRadius * 1.5);\n        text.setAttribute('dy', circleRadius * 1.5);\n        text.textContent = content;\n        return text;\n    }\n\n    /**\n     * Returns a circle tag with the given dimensions.\n     * @param {*} x x coordinate of the center\n     * @param {*} y y coordinate of the center\n     * @param {*} linkTargetSize radius\n     * @param {*} classes classes to add\n     * @param {*} id id of the circle\n     * @returns {any}\n     */\n    function circle(x, y, linkTargetSize, classes, id) {\n        let circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n        circle.setAttribute('class', classes);\n        circle.setAttribute('id', id);\n        circle.setAttribute('cx', x);\n        circle.setAttribute('cy', y);\n        circle.setAttribute('r', linkTargetSize);\n        return circle;\n    }\n\n    /**\n     * Returns a path between two points.\n     * @param {*} x1 x coordinate of the first point\n     * @param {*} y1 y coordinate of the first point\n     * @param {*} x2 x coordinate of the second point\n     * @param {*} y2 y coordinate of the second point\n     * @param {*} classes CSS classes to set\n     * @param {*} id id of the path\n     * @returns {any}\n     */\n     function path(x1, y1, x2, y2, classes, id) {\n        let path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        path.setAttribute('class', classes);\n        path.setAttribute('id', id);\n        path.setAttribute('d', 'M ' + x1 + ' ' + y1 + ' L ' + x2 + ' ' + y2);\n        return path;\n    }\n\n    /**\n     * Returns a link around a given child element. This function also adds a title element next\n     * to the child for accessibility.\n     * @param {*} child child item to set the link on\n     * @param {*} id id of the link\n     * @param {*} target where to display the linked URL\n     * @param {*} opacityValue link opacity\n     * @param {*} title title of the link\n     * @param {*} text text to describe the link\n     * @returns {any}\n     */\n    function link(child, id, target, opacityValue, title = null, text = null) {\n        let link = document.createElementNS('http://www.w3.org/2000/svg', 'a');\n        link.setAttribute('id', id);\n        link.setAttribute('href', '');\n        link.setAttribute('target', target);\n        link.setAttribute('opacity', opacityValue);\n        link.setAttribute('rel', 'noopener');\n        link.appendChild(child);\n        if (title !== null) {\n            link.appendChild(title);\n        }\n        if (text !== null) {\n            link.appendChild(text);\n        }\n        return link;\n    }\n\n    /**\n     * Adds a place on the SVG map. This function also prepares the code for linking activities\n     * and adding titles (for accessibility).\n     * @param {*} event event causing the command\n     */\n    function addPlace(event) {\n        let placesgroup = document.getElementById('placesGroup');\n        let placeId = 'p' + placestore.getId();\n        let linkId = 'a' + placestore.getId();\n        var CTM = event.target.getScreenCTM();\n        if (event.touches) {\n            event = event.touches[0];\n        }\n        let cx = (event.clientX - CTM.e) / CTM.a;\n        let cy = (event.clientY - CTM.f) / CTM.d;\n\n        // By default link will be open in current window.\n        let linkTargetType = '_self';\n        let opacityValue = 1;\n\n        placesgroup.appendChild(\n            link(\n                circle(cx, cy, circleRadius, 'learningmap-place learningmap-draggable learningmap-emptyplace', placeId),\n                linkId,\n                linkTargetType,\n                opacityValue,\n                title('title' + placeId),\n                text('text' + placeId, '', cx, cy)\n            )\n        );\n        placestore.addPlace(placeId, linkId, linkTargetType, +opacityValue, circleRadius);\n    }\n\n    /**\n     * Handles single clicks on the background image.\n     * @param {*} event click event\n     * @returns {void}\n     */\n    function clickHandler(event) {\n        event.preventDefault();\n        hideContextMenu();\n        // Let isValid = placestore.setExternalLink(elementForActivitySelector, linkSelector.value);\n        // if (!isValid) {\n        //     return;\n        // }\n\n        hideAdvancedSettings();\n        if (event.target.classList.contains('learningmap-place') && selectedElement === null) {\n            if (firstPlace === null) {\n                firstPlace = event.target.id;\n                document.getElementById(firstPlace).classList.add('learningmap-selected');\n            } else {\n                secondPlace = event.target.id;\n                let fid = parseInt(firstPlace.replace('p', ''));\n                let sid = parseInt(secondPlace.replace('p', ''));\n                if (sid == fid) {\n                    return;\n                }\n                if (sid < fid) {\n                    let z = sid;\n                    sid = fid;\n                    fid = z;\n                }\n                addPath(fid, sid);\n                let first = document.getElementById(firstPlace);\n                if (first) {\n                    first.classList.remove('learningmap-selected');\n                }\n                firstPlace = null;\n                lastTarget = secondPlace;\n                secondPlace = null;\n            }\n        } else {\n            unselectAll();\n            firstPlace = null;\n        }\n    }\n    /**\n     * Removes the classes 'learningmap-selected' and 'learningmap-selectet-activity-selector'\n     * from all nodes\n     */\n    function unselectAll() {\n        Array.from(document.getElementsByClassName('learningmap-selected')).forEach(function(e) {\n            e.classList.remove('learningmap-selected');\n        });\n        Array.from(document.getElementsByClassName('learningmap-selected-activity-selector')).forEach(function(e) {\n            e.classList.remove('learningmap-selected-activity-selector');\n        });\n    }\n\n    /**\n     * Adds a path between two places.\n     * @param {number} fid id of the first place (meant to be the smaller one)\n     * @param {number} sid id of the second place (meant to be the bigger one)\n     */\n    function addPath(fid, sid) {\n        let pid = 'p' + fid + '_' + sid;\n        if (document.getElementById(pid) === null) {\n            let pathsgroup = document.getElementById('pathsGroup');\n            let first = document.getElementById('p' + fid);\n            let second = document.getElementById('p' + sid);\n            if (pathsgroup && first && second) {\n                pathsgroup.appendChild(\n                    path(\n                        first.cx.baseVal.value,\n                        first.cy.baseVal.value,\n                        second.cx.baseVal.value,\n                        second.cy.baseVal.value,\n                        'learningmap-path',\n                        pid\n                    )\n                );\n                placestore.addPath(pid, 'p' + fid, 'p' + sid);\n            }\n        }\n    }\n\n    /**\n     * Removes a place from the SVG and the placestore. This function also removes all\n     * touching paths and entries in statringplaces / targetplaces linking to the removed\n     * place.\n     * @param {any} event event causing the remove order\n     */\n    function removePlace(event) {\n        let place = document.getElementById(event.target.id);\n        let parent = place.parentNode;\n        removePathsTouchingPlace(event.target.id);\n        placestore.removePlace(event.target.id);\n        parent.removeChild(place);\n        parent.parentNode.removeChild(parent);\n\n        updateCode();\n    }\n\n    /**\n     * Removes all paths touching a certain place\n     * @param {number} id id of the place\n     */\n    function removePathsTouchingPlace(id) {\n        placestore.getTouchingPaths(id).forEach(\n            function(e) {\n                removePath(e.id);\n            }\n        );\n    }\n\n    /**\n     * Removes a path from the SVG and from the placestore\n     * @param {number} id id of the path\n     */\n    function removePath(id) {\n        let path = document.getElementById(id);\n        if (path !== null) {\n            path.parentNode.removeChild(path);\n            placestore.removePath(id);\n        }\n    }\n\n    /**\n     * Sets the background image of the SVG to the current image in filemanager.\n     */\n    function refreshBackgroundImage() {\n        let previewimage = document.getElementsByClassName('realpreview');\n        if (previewimage.length > 0) {\n            let background = document.getElementById('learningmap-background-image');\n            let backgroundurl = previewimage[0].getAttribute('src').split('?')[0];\n            // If the uploaded file reuses the filename of a previously uploaded image, they differ\n            // only in the oid. So one has to append the oid to the url.\n            if (previewimage[0].getAttribute('src').split('?')[1].includes('&oid=')) {\n                backgroundurl += '?oid=' + previewimage[0].getAttribute('src').split('&oid=')[1];\n            }\n            background.setAttribute('href', backgroundurl);\n        }\n    }\n\n    /**\n     * Adds an eventListener to the background image for watching file changes and updating\n     * height and width of the image.\n     */\n    function registerBackgroundListener() {\n        let background = document.getElementById('learningmap-background-image');\n        if (background) {\n            background.addEventListener('load', function() {\n                background.removeAttribute('height');\n                let height = parseInt(background.getBBox().height);\n                let width = background.getBBox().width;\n                placestore.setBackgroundDimensions(width, height);\n                svg.setAttribute('viewBox', '0 0 ' + placestore.width + ' ' + placestore.height);\n                background.setAttribute('width', width);\n                background.setAttribute('height', height);\n                updateCode();\n            });\n        }\n    }\n\n    /**\n     * Updates CSS code inside the SVG (called, when one of the colors is changed).\n     * Calls updateCode() when completed.\n     */\n    function updateCSS() {\n        Templates.renderForPromise('mod_learningmap/cssskeleton', placestore.getPlacestore())\n            .then(({html, js}) => {\n                Templates.replaceNode('#learningmap-svgstyle', html, js);\n                updateCode();\n                return true;\n            })\n            .catch(ex => displayException(ex));\n    }\n\n    /**\n     * Updates the activity selector to highlight the activities already used\n     * and to show the alert for hidden activities.\n     */\n    function updateActivities() {\n        let activities = placestore.getAllActivities();\n        let options = Array.from(activitySelector.getElementsByTagName('option'));\n        activityHiddenWarning.setAttribute('hidden', '');\n        options.forEach(function(n) {\n            if (activities.includes(n.value)) {\n                n.classList.add('learningmap-used-activity');\n                if (n.selected) {\n                    if (n.getAttribute('data-activity-hidden') == true) {\n                        activityHiddenWarning.removeAttribute('hidden');\n                    }\n                }\n            } else {\n                n.classList.remove('learningmap-used-activity');\n            }\n        });\n    }\n\n    /**\n     * Adds the event listener to the color chooser buttons.\n     * @param {*} name name of the color\n     * @param {*} secondValue name of a second placestore value that has to be changed along\n     */\n    function colorChooserLogic(name, secondValue = '') {\n        let colorChooser = document.getElementById('learningmap-color-' + name);\n        if (colorChooser) {\n            colorChooser.addEventListener('change', function() {\n                placestore.setColor(name, colorChooser.value);\n                if (secondValue != '') {\n                    placestore.setColor(secondValue, colorChooser.value);\n                }\n                updateCSS();\n            });\n            colorChooser.value = placestore.getColor(name);\n        }\n    }\n\n    /**\n     * Adds the event listener to advanced settings menu items\n     * @param {*} name Name of the item\n     * @param {*} getCall Method of placestore to call to read value\n     * @param {*} setCall Method of placestore to call to save value\n     * @param {*} callback Additional callback after value is saved\n     */\n    function advancedSettingsLogic(name, getCall, setCall, callback = null) {\n        let settingItem = document.getElementById('learningmap-advanced-setting-' + name);\n        if (settingItem) {\n            settingItem.checked = getCall.call(placestore);\n            settingItem.addEventListener('change', function() {\n                setCall.call(placestore, settingItem.checked);\n                if (callback !== null) {\n                    callback();\n                }\n                updateCSS();\n            });\n        }\n    }\n\n    /**\n     * Adds missing text nodes\n     */\n    function fixPlaceLabels() {\n        let options = Array.from(activitySelector.getElementsByTagName('option'));\n        let places = placestore.getPlaces();\n        for (const place of places) {\n            if (document.getElementById('text' + place.id) === null) {\n                let content = '';\n                for (const option of options) {\n                    if (option.value == place.linkedActivity) {\n                        content = option.textContent;\n                        break;\n                    }\n                }\n                let placeNode = document.getElementById(place.id);\n                let textNode = text('text' + place.id, content, placeNode.cx.baseVal.value, placeNode.cy.baseVal.value);\n                placeNode.parentNode.appendChild(textNode);\n            }\n        }\n    }\n\n    /**\n     * Hides the advanced settings menu.\n     */\n    function hideAdvancedSettings() {\n        let advancedSettings = document.getElementById('learningmap-activity-setting');\n        const errorElement = document.getElementById('external-link-error');\n        const inputElement = document.getElementById('learningmap-external-link');\n\n        const isValid = placestore.setExternalLink(elementForActivitySelector, linkSelector.value);\n\n        if (!isValid) {\n            advancedSettings.style.display = 'block';\n        } else if (radioLinkSelector.checked && linkSelector.value === '') {\n            advancedSettings.style.display = 'block';\n            errorElement.style.display = 'block';\n            inputElement.classList.add('is-invalid');\n        } else {\n            activitySetting.style.display = 'none';\n        }\n    }\n};\n"],"names":["targetPoints","pathTypes","offset","dragel","pathsToUpdateFirstPoint","pathsToUpdateSecondPoint","prefetchTemplates","selectedElement","firstPlace","secondPlace","lastTarget","elementForActivitySelector","touchstart","touchend","touchmove","mapdiv","document","getElementById","code","activitySetting","activitySelector","activityStarting","activityTarget","activityLinkTarget","activityLinkTransparent","activityLinkSize","linkSelector","radioLinkSelector","radioLinkedActivity","updateSelectedLinkType","checked","setSelectedLinkType","setActivityId","setExternalLink","activityHiddenWarning","advancedSettingsIcon","treeView","querySelector","setAttribute","iconView","setTimeout","dispatchEvent","Event","addEventListener","placestore","value","text","textContent","trim","substring","title","classList","remove","closest","add","updateCode","style","display","errorElement","inputElement","updateActivities","addStartingPlace","removeStartingPlace","addTargetPlace","removeTargetPlace","changeLinkTargetType","changeLinkTargetOpacity","e","radius","target","changeLinkTargetSize","placestoreInput","getElementsByName","loadJSON","advancedSettings","getAttribute","hideAdvancedSettings","removeAttribute","hideContextMenu","advancedSettingsClose","advancedSettingsLogic","getHidePaths","setHidePaths","getUseCheckmark","setUseCheckmark","getHover","setHover","getPulse","setPulse","getShowall","setShowall","getHideStroke","setHideStroke","getShowText","setShowText","options","Array","from","getElementsByTagName","places","getPlaces","place","id","content","option","linkedActivity","placeNode","textNode","cx","baseVal","cy","parentNode","appendChild","getSliceMode","setSliceMode","getShowWayGone","setShowWayGone","colorChooserLogic","innerHTML","refreshBackgroundImage","background","height","parseInt","getBBox","width","setBackgroundDimensions","svg","registerBackgroundListener","getMapid","showContextMenu","unselectAll","touches","contains","activityId","getActivityId","externalLink","getExternalLink","scalingFactor","clientWidth","setProperty","clientHeight","visibility","documentElement","dir","newPosX","isStartingPlace","isTargetPlace","isLinkTargetTypeBlank","isLinkTargetOpacity","circleRadius","el","startDrag","drag","endDrag","evt","cancelable","preventDefault","nodeName","dblclickHandler","endTouch","getMousePosition","x","getAttributeNS","y","getPathsWithFid","getPathsWithSid","pathPoint","transformCoordinates","layerX","layerY","coord","dx","dy","setAttributeNS","updatePathDeclaration","forEach","path","pathNode","clickHandler","oldDefinition","targetX","targetY","targetP","parts","split","fromX","fromY","toX","toY","bezierX","bezierY","pathType","i","length","makeDraggable","updateCSS","backgroundfileNode","MutationObserver","observe","attributes","childList","subtree","clientX","clientY","CTM","getScreenCTM","a","f","d","JSON","stringify","getPlacestore","event","placesgroup","placeId","getId","linkId","linkTargetType","opacityValue","child","link","createElementNS","linkTargetSize","classes","circle","addPlace","parent","getTouchingPaths","removePath","removePlace","removeChild","fid","replace","sid","z","pid","pathsgroup","first","second","x1","y1","x2","y2","addPath","getElementsByClassName","previewimage","backgroundurl","includes","renderForPromise","then","_ref","html","js","replaceNode","catch","ex","activities","getAllActivities","n","selected","name","secondValue","colorChooser","setColor","getColor","getCall","setCall","callback","settingItem","call"],"mappings":"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"}