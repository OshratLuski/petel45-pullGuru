{"version":3,"file":"options.min.js","sources":["../src/options.js"],"sourcesContent":["/* eslint-disable no-console */\r\n// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Tiny WidgetHub plugin.\r\n *\r\n * @module      tiny_widgethub/plugin\r\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {getPluginOptionName} from 'editor_tiny/options';\r\nimport Common from './common';\r\nconst pluginName = Common.pluginName;\r\n\r\nconst showPlugin = getPluginOptionName(pluginName, 'showplugin');\r\nconst userId = getPluginOptionName(pluginName, 'userid');\r\nconst courseId = getPluginOptionName(pluginName, 'courseid');\r\nconst widgetList = getPluginOptionName(pluginName, 'widgetlist');\r\n\r\nconst shareStyles = getPluginOptionName(pluginName, 'sharestyles');\r\nconst additionalCss = getPluginOptionName(pluginName, 'additionalcss');\r\nconst globalConfig = getPluginOptionName(pluginName, 'cfg');\r\n\r\n/**\r\n * @param {import('./plugin').TinyMCE} editor\r\n */\r\nexport const register = (editor) => {\r\n    const registerOption = editor.options.register;\r\n\r\n    registerOption(showPlugin, {\r\n        processor: 'boolean',\r\n        \"default\": true,\r\n    });\r\n\r\n    registerOption(userId, {\r\n        processor: 'string',\r\n        \"default\": \"-1\",\r\n    });\r\n\r\n    registerOption(courseId, {\r\n        processor: 'string',\r\n        \"default\": \"-1\",\r\n    });\r\n\r\n    registerOption(widgetList, {\r\n        processor: 'array',\r\n        \"default\": [],\r\n    });\r\n\r\n    registerOption(shareStyles, {\r\n        processor: 'boolean',\r\n        \"default\": true,\r\n    });\r\n\r\n    registerOption(additionalCss, {\r\n        processor: 'string',\r\n        \"default\": \"\",\r\n    });\r\n\r\n    registerOption(globalConfig, {\r\n        processor: 'object',\r\n        \"default\": {},\r\n    });\r\n};\r\n\r\n/**\r\n * @param {import('./plugin').TinyMCE} editor\r\n * @returns {boolean} - are the plugin buttons visible?\r\n */\r\nexport const isPluginVisible = (editor) => editor.options.get(showPlugin);\r\n\r\n/**\r\n * @param {import('./plugin').TinyMCE} editor\r\n * @returns {string} - additional css that must be included in a <style> tag in editor's iframe\r\n */\r\nexport const getAdditionalCss = (editor) => {\r\n    return editor.options.get(additionalCss);\r\n};\r\n\r\n/**\r\n * @param {import('./plugin').TinyMCE} editor\r\n * @param {string} key\r\n * @param {string} defaultValue\r\n * @returns {string} - An object with the key/value properties\r\n */\r\nexport const getGlobalConfig = (editor, key, defaultValue) => {\r\n    const dict = editor.options.get(globalConfig) ?? {};\r\n    return dict[key] ?? defaultValue;\r\n};\r\n\r\n/**\r\n * Wrapper version of the snippet definitions shared among all editors in page\r\n * @type {Record<string, Widget> | undefined}\r\n * */\r\nlet _widgetDict;\r\n\r\n/**\r\n * @param {import('./plugin').TinyMCE} editor\r\n * @returns {Record<string, Widget>} - The available list of widgets\r\n */\r\nexport const getWidgetDict = (editor) => {\r\n    if (_widgetDict) {\r\n        return _widgetDict;\r\n    }\r\n    /** @type {RawWidget[]} */\r\n    let rawWidgets = editor.options.get(widgetList) ?? [];\r\n    _widgetDict = {};\r\n    // Partials is a special widget that is used to define common parameters shared by other widgets\r\n    /** @type {RawWidget | undefined} */\r\n    let partials = rawWidgets.filter(e => e.key === 'partials')[0];\r\n    if (partials) {\r\n        rawWidgets = rawWidgets.filter(e => e.key !== 'partials');\r\n    }\r\n    // Create a wrapper for the widget to handle operations\r\n    const wrappedWidgets = rawWidgets\r\n        .map(w => new Widget(w, partials || {}));\r\n\r\n    // Remove those buttons that aren't usable for the current user\r\n    const id = editor.options.get(userId);\r\n    wrappedWidgets.filter(w => w.isFor(id)).forEach(w => {\r\n        if (_widgetDict) {\r\n            _widgetDict[w.key] = w;\r\n        }\r\n    });\r\n    return _widgetDict;\r\n};\r\n\r\nexport class EditorOptions {\r\n    /**\r\n     * @param {import('./plugin').TinyMCE} editor\r\n     */\r\n    constructor(editor) {\r\n        this.editor = editor;\r\n    }\r\n\r\n    /**\r\n     * @returns {number} - an integer with the id of the current user\r\n     */\r\n    get userId() {\r\n        return parseInt(this.editor.options.get(userId));\r\n    }\r\n\r\n    /**\r\n     * @returns {number} - an integer with the id of the current course\r\n     */\r\n    get courseId() {\r\n        return parseInt(this.editor.options.get(courseId));\r\n    }\r\n\r\n    /**\r\n     * @returns {Object.<string, Widget>} - a dictionary of \"usable\" widgets for the current userId\r\n     */\r\n    get widgetDict() {\r\n       return getWidgetDict(this.editor);\r\n    }\r\n}\r\n\r\n/**\r\n * @typedef {object} Shared\r\n * @property {string} currentScope\r\n */\r\nexport const Shared = {\r\n    // In which type of activity the editor is being used\r\n    currentScope: document.querySelector('body')?.id ?? '',\r\n};\r\n\r\n/**\r\n * Add missing properties in the param definition\r\n * that can be derived from existing data.\r\n * @param {Param} param\r\n */\r\nexport function fixMissingParamProperties(param) {\r\n    if (!param.type) {\r\n        if (param.options) {\r\n            param.type = 'select';\r\n        } else if (typeof param.value === \"boolean\") {\r\n            // Infer type from value\r\n            param.type = 'checkbox';\r\n        } else if (typeof param.value === \"number\") {\r\n            param.type = 'numeric';\r\n        } else if (typeof param.value === \"string\") {\r\n            param.type = param.options ? 'select' : 'textfield';\r\n        }\r\n    }\r\n    if (!param.value) {\r\n        switch (param.type) {\r\n            case ('checkbox'):\r\n                param.value = false; break;\r\n            case ('numeric'):\r\n                param.value = 0; break;\r\n            case ('select'):\r\n                param.value = param.options?.[0];\r\n                if (typeof (param.value) === 'object') {\r\n                    param.value = param.value.v;\r\n                }\r\n                break;\r\n            case ('color'):\r\n                param.value = '#ffffff'; break;\r\n            default:\r\n                param.value = '';\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @param {*} obj - The object to expand\r\n * @param {Record<string, *>} partials - The dictionary with partials\r\n * @returns {*} The modified object\r\n */\r\nexport function expandPartial(obj, partials) {\r\n    if ((obj ?? null) === null) {\r\n        return obj;\r\n    }\r\n    let partialKey;\r\n    if (typeof obj === 'string' && obj.startsWith('__') && obj.endsWith('__')) {\r\n        partialKey = obj;\r\n        obj = {};\r\n    } else if (typeof obj === 'object' && obj.partial) {\r\n        partialKey = obj.partial;\r\n        delete obj.partial;\r\n    }\r\n    if (partialKey) {\r\n        partialKey = partialKey.replace(/__/g, '');\r\n        if (!partials[partialKey]) {\r\n            console.error(`Cannot find partial for ${partialKey}`);\r\n        } else {\r\n            // Override with passed properties.\r\n            obj = {...partials[partialKey], ...obj};\r\n        }\r\n    }\r\n    return obj;\r\n}\r\n\r\n/**\r\n * Partials are variables that start with @ which\r\n * can be expanded in different parts of the widget\r\n * definition.\r\n * @param {RawWidget} widget\r\n * @param {Record<string, *>} partials\r\n * @returns {void} The same widget with partials expanded\r\n */\r\nexport function applyPartials(widget, partials) {\r\n    // Expand partials in template.\r\n    const regex = /__([\\w\\d]+)__/g;\r\n    if (widget.template) {\r\n        widget.template = widget.template.replace(regex, (s0, s1) => {\r\n            return partials[s1] ?? s0;\r\n        });\r\n    }\r\n\r\n    // Expand partials in parameters.\r\n    const parameters = widget.parameters;\r\n    if (parameters) {\r\n        parameters.forEach((/** @type {*} */ param, i) => {\r\n            param = expandPartial(param, partials);\r\n            parameters[i] = param;\r\n            // Treat inner partials\r\n            let prop = expandPartial(param.bind, partials);\r\n            if (prop) {\r\n                param.bind = prop;\r\n            }\r\n            prop = expandPartial(param.transform, partials);\r\n            if (prop) {\r\n                param.transform = prop;\r\n            }\r\n            // Do some fixes on parameters.\r\n            fixMissingParamProperties(param);\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * @typedef {Object} ParamOption\r\n * @property {string} l\r\n * @property {string} v\r\n * @property {{to: string, content: string}} [a]\r\n */\r\n/**\r\n * @typedef {Object} Param\r\n * @property {string=} partial\r\n * @property {string} name\r\n * @property {string} title\r\n * @property {'textfield' | 'numeric' | 'checkbox' | 'select' | 'textarea' | 'image' | 'color'} [type]\r\n * @property {(ParamOption | string)[]} [options]\r\n * @property {any} value\r\n * @property {string=} tip\r\n * @property {string=} tooltip\r\n * @property {number=} min\r\n * @property {number=} max\r\n * @property {string=} transform\r\n * @property {string | {get: string, set: string} } [bind]\r\n * @property {string=} when\r\n * @property {boolean} [hidden]\r\n * @property {boolean} [editable]\r\n * @property {string} [for]\r\n */\r\n/**\r\n * @typedef {Object} Action\r\n * @property {string} predicate\r\n * @property {string} actions\r\n */\r\n/**\r\n * @typedef {Object} RawWidget\r\n * @property {number} id\r\n * @property {string} key\r\n * @property {string} name\r\n * @property {string} category\r\n * @property {string} [scope] - Regex for idenfying allowed body ids\r\n * @property {string} [instructions]\r\n * @property {'mustache' | 'ejs'} [engine]\r\n * @property {string} [template]\r\n * @property {string} [filter]\r\n * @property {Param[]} [parameters]\r\n * @property {Object.<string, Object<string, string>>} [I18n]\r\n * @property {string | string[]} [selectors]\r\n * @property {string} [insertquery]\r\n * @property {string} [unwrap]\r\n * @property {string} [for]\r\n * @property {string} [autocomplete]\r\n * @property {string} version\r\n * @property {string} author\r\n * @property {string[]} [requires]\r\n * @property {boolean} [hidden]\r\n * @property {number} [stars]\r\n * @property {Action[]} [contextmenu]\r\n * @property {Action[]} [contexttoolbar]\r\n */\r\n/**\r\n * @class\r\n * @classdesc Wrapper for Widget definition\r\n */\r\nexport class Widget {\r\n    #widget;\r\n    #instructionsParsed = false;\r\n    /** @type {string | undefined} */\r\n    _preview;\r\n\r\n    /**\r\n     * @param {RawWidget} widget\r\n     * @param {Object.<string, any>=} partials\r\n     */\r\n    constructor(widget, partials) {\r\n        partials = partials ?? {};\r\n        applyPartials(widget, partials);\r\n        this.#widget = widget;\r\n    }\r\n    /**\r\n     * @returns {number}\r\n     */\r\n     get id() {\r\n        return this.#widget.id;\r\n    }\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get name() {\r\n        return this.#widget.name;\r\n    }\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get key() {\r\n        return this.#widget.key;\r\n    }\r\n    /**\r\n     * @returns {Record<string, Record<string, string>>}\r\n     */\r\n    get I18n() {\r\n        return this.#widget.I18n || {};\r\n    }\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get template() {\r\n        return this.#widget.template ?? this.#widget.filter ?? '';\r\n    }\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get category() {\r\n        return this.#widget.category ?? \"MISC\";\r\n    }\r\n    /**\r\n     * @returns {string=}\r\n     */\r\n    get insertquery() {\r\n        return this.#widget.insertquery;\r\n    }\r\n    /**\r\n     * @returns {string | string[] =}\r\n     */\r\n    get selectors() {\r\n        return this.#widget.selectors;\r\n    }\r\n    /**\r\n     * @returns {string=}\r\n     */\r\n    get unwrap() {\r\n        return this.#widget.unwrap;\r\n    }\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get version() {\r\n        return this.#widget.version || \"1.0.0\";\r\n    }\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get instructions() {\r\n        if (this.#widget.instructions && !this.#instructionsParsed) {\r\n            this.#widget.instructions = decodeURIComponent(this.#widget.instructions);\r\n            this.#instructionsParsed = true;\r\n        }\r\n        return this.#widget.instructions ?? '';\r\n    }\r\n    /**\r\n     * @returns {Param[]}\r\n     */\r\n    get parameters() {\r\n        return this.#widget.parameters ?? [];\r\n    }\r\n    /**\r\n     * @returns {Object.<string, any>}\r\n     */\r\n    get defaults() {\r\n        /** @type {Object.<string, any> } */\r\n        const obj = {};\r\n        (this.#widget.parameters ?? []).forEach((param) => {\r\n            obj[param.name] = param.value;\r\n        });\r\n        return obj;\r\n    }\r\n    /**\r\n     * @param {number} userId\r\n     * @returns {boolean}\r\n     */\r\n    isFor(userId) {\r\n        if (this.#widget.hidden === true) {\r\n            return false;\r\n        }\r\n        let grantStr = (this.#widget.for || '').trim();\r\n        if (grantStr === '' || grantStr === '*') {\r\n            return true;\r\n        }\r\n        let allowMode = true;\r\n        if (grantStr.startsWith('-')) {\r\n            allowMode = false;\r\n        }\r\n        grantStr = grantStr.replace(/[+\\- ]/g, '');\r\n        const grantList = grantStr.split(\",\");\r\n        const isAllowed = (allowMode && grantList.indexOf(userId + \"\") >= 0) ||\r\n                         (!allowMode && grantList.indexOf(userId + \"\") < 0);\r\n        if (!isAllowed) {\r\n            console.warn(`Widget ${this.#widget.key} not allowed to user ${userId}: ${grantList}`);\r\n        }\r\n        return isAllowed;\r\n    }\r\n\r\n    /**\r\n     * @returns {boolean}\r\n     */\r\n    isFilter() {\r\n        return this.#widget.template === undefined && this.#widget.filter !== undefined;\r\n    }\r\n\r\n    /**\r\n     * @param {string=} scope\r\n     * @returns {boolean}\r\n     */\r\n    isUsableInScope(scope) {\r\n        scope = scope ?? Shared.currentScope ?? '';\r\n        const widgetScopes = this.#widget.scope;\r\n        if (!scope || !widgetScopes || widgetScopes === \"*\") {\r\n            return true;\r\n        }\r\n        const regex = new RegExp(widgetScopes);\r\n        return (regex.exec(scope) ?? null) !== null;\r\n    }\r\n    /**\r\n     * @returns {boolean}\r\n     */\r\n    hasBindings() {\r\n        return (this.#widget.parameters ?? []).some(param => param.bind !== undefined);\r\n    }\r\n    /**\r\n     * Recovers the property value named name of the original definition\r\n     * @param {string} name\r\n     * @returns {*}\r\n     */\r\n    prop(name) {\r\n        // @ts-ignore\r\n        return this.#widget[name];\r\n    }\r\n}\r\n\r\n\r\nconst editorOptionsInstances = new Map();\r\n/**\r\n * @param {import('./plugin').TinyMCE} editor\r\n * @returns {EditorOptions}\r\n */\r\nexport function getEditorOptions(editor) {\r\n    let instance = editorOptionsInstances.get(editor);\r\n    if (!instance) {\r\n        instance = new EditorOptions(editor);\r\n        editorOptionsInstances.set(editor, instance);\r\n    }\r\n    return instance;\r\n}\r\n"],"names":["e","_document$querySelect","editor","instance","editorOptionsInstances","get","EditorOptions","set","pluginName","_common","__esModule","default","showPlugin","getPluginOptionName","userId","courseId","widgetList","shareStyles","additionalCss","globalConfig","_exports","register","registerOption","options","processor","isPluginVisible","getAdditionalCss","_widgetDict","getGlobalConfig","key","defaultValue","getWidgetDict","rawWidgets","partials","filter","wrappedWidgets","map","w","Widget","id","isFor","forEach","constructor","this","parseInt","widgetDict","Shared","currentScope","document","querySelector","fixMissingParamProperties","param","_param$options","type","value","v","expandPartial","obj","partialKey","startsWith","endsWith","partial","replace","console","error","applyPartials","widget","regex","template","s0","s1","parameters","i","prop","bind","transform","instructionsParsed","_preview","name","I18n","category","insertquery","selectors","unwrap","version","instructions","decodeURIComponent","defaults","hidden","grantStr","for","trim","allowMode","grantList","split","isAllowed","indexOf","warn","isFilter","undefined","isUsableInScope","scope","widgetScopes","RegExp","exec","hasBindings","some","Map"],"mappings":"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"}