{"version":3,"file":"dom_service.min.js","sources":["../../src/service/dom_service.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Tiny WidgetHub plugin.\r\n *\r\n * @module      tiny_widgethub/plugin\r\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nimport jquery from \"jquery\";\r\n\r\nexport class DomSrv {\r\n    /**\r\n     * @param {JQueryStatic} jQuery\r\n     */\r\n    constructor(jQuery) {\r\n        /** @type {JQueryStatic} */\r\n        this.jQuery = jQuery;\r\n    }\r\n\r\n    /**\r\n     * When creating a clone of an element must update all its id's\r\n     * @param {JQuery<HTMLElement>} $e - The element to be treated\r\n     * @param {JQuery<HTMLElement>} $target - The root element being cloned\r\n     * @param {JQuery<HTMLElement>} $root - The root element providing the context\r\n     * @param {Record<string, string>} idMap - A dictionary to store assigned id's\r\n     */\r\n    treatElementIds($e, $target, $root, idMap) {\r\n        const oldId = $e.prop('id');\r\n        if (oldId) {\r\n            let newId = idMap[oldId];\r\n            if (!newId) {\r\n                const ext = Math.random().toString(32).substring(2, 5);\r\n                newId = oldId + ext;\r\n                idMap[oldId] = newId;\r\n            }\r\n            $e.prop('id', newId);\r\n        }\r\n        // Does $e contain references to another elements in the $root which are not in $target?\r\n        ['data-target', 'data-bs-target', 'href'].forEach((dataX) => {\r\n            const attr = $e.attr(dataX);\r\n            if (attr?.startsWith(\"#\")) {\r\n                $e.removeClass('active show');\r\n                const rootRef = $root.find(attr);\r\n                const targetRef = $target.find(attr);\r\n                if (rootRef.length) {\r\n                    if (targetRef.length) {\r\n                        // Simply rename property\r\n                        const oldId = attr.substring(1);\r\n                        let newId = idMap[oldId];\r\n                        if (!newId) {\r\n                            const ext = Math.random().toString(32).substring(2, 5);\r\n                            newId = oldId + ext;\r\n                            idMap[oldId] = newId;\r\n                        }\r\n                        $e.attr(dataX, \"#\" + newId);\r\n                    } else {\r\n                        // (TODO: Deep cloning here?) Must clone the reference as well\r\n                        const newId = 'd' + Math.random().toString(32).substring(2);\r\n                        const clonedRef = rootRef.clone().prop(\"id\", newId);\r\n                        $e.prop(dataX, \"#\" + newId);\r\n                        clonedRef.insertAfter(rootRef).removeClass(\"active show\");\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {JQuery<HTMLElement>} $e - the element that must be cloned\r\n     * @param {JQuery<HTMLElement>} $root - the root element (widget root)\r\n     * @param {Record<string,string>} idMap - old vs new id map\r\n     * @returns {JQuery<HTMLElement>} The cloned element with new id's\r\n     */\r\n    smartClone($e, $root, idMap) {\r\n        const clone = $e.clone();\r\n        this.treatElementIds(clone, $e, $root, idMap);\r\n        clone.find('*').each((_, e) => {\r\n            this.treatElementIds(this.jQuery(e), $e, $root, idMap);\r\n        });\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * @param {JQuery<HTMLElement>} $e - Look in $e and all its descendants if references any other element in $root\r\n     * @param {JQuery<HTMLElement>} $root\r\n     * @returns {JQuery<HTMLElement>[]} - A list of referenced elements in $e\r\n     */\r\n    findReferences($e, $root) {\r\n        const searchFor = '[data-target^=\"#\"], [data-bs-target^=\"#\"], [href^=\"#\"]';\r\n        /** @type {HTMLElement[]} */\r\n        const found = [];\r\n        if ($e.is(searchFor)) {\r\n            let attr = $e.attr('data-target') ?? $e.attr('data-bs-target') ?? $e.attr('href');\r\n            if (attr) {\r\n                found.push(...$root.find(attr).toArray());\r\n            }\r\n        }\r\n        if (!found.length) {\r\n            // Look in descendants\r\n            const $descendants = $e.find(searchFor);\r\n            if ($descendants.length) {\r\n                let attr = $descendants.attr('data-target') ?? $descendants.attr('data-bs-target') ?? $descendants.attr('href');\r\n                if (attr) {\r\n                    found.push(...$root.find(attr).toArray());\r\n                }\r\n            }\r\n        }\r\n        return found.map(e => this.jQuery(e));\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLElement} elem\r\n     * @param {string | string[]} [selectors]\r\n     * @returns {boolean}\r\n     */\r\n    matchesSelectors(elem, selectors) {\r\n        if (!selectors) {\r\n            return false;\r\n        }\r\n        /** @type {string} **/\r\n        let selector;\r\n        /** @type {string[]} **/\r\n        let extraQuery = [];\r\n        if (Array.isArray(selectors)) {\r\n            selector = selectors[0];\r\n            if (selectors.length > 1) {\r\n                extraQuery = selectors.slice(1);\r\n            }\r\n        } else {\r\n            selector = selectors;\r\n        }\r\n        /* @type {boolean} */\r\n        let match = elem.matches(selector);\r\n        if (match) {\r\n            extraQuery.forEach(e => {\r\n                match = match && elem.querySelector(e) !== null;\r\n            });\r\n        }\r\n        return match;\r\n    }\r\n\r\n    /**\r\n     * Defines the type PathResult\r\n     * @typedef {Object} PathResult\r\n     * @property {JQuery<HTMLElement>} selectedElement - The DOM element from which the search starts.\r\n     * @property {JQuery<HTMLElement>} [elem] - Indicates the element corresponding to the selector of the widget found\r\n     * @property {JQuery<HTMLElement>} [targetElement] - Indicates the element corresponding the intermediate selector\r\n     * @property {import('../options').Widget=} widget - The current widget definition associated with the elem\r\n     */\r\n\r\n    /**\r\n     * Walks the DOM tree up from the selectedElement and tries\r\n     * to find the first element that matches the selector of\r\n     * some widget.\r\n     * @param {import('../options').Widget[]} widgetList - The list of widgets\r\n     * @param {HTMLElement} selectedElement - The starting element in the search\r\n     * @returns {PathResult} The element and widget found in the search.\r\n     */\r\n    findWidgetOnEventPath(widgetList, selectedElement) {\r\n        /** @type {PathResult} */\r\n        const res = {\r\n            selectedElement: this.jQuery(selectedElement)\r\n        };\r\n        /** @type {HTMLElement | null} */\r\n        let elem = selectedElement;\r\n        const n = widgetList.length;\r\n        while (elem !== null && elem !== undefined && elem !== null &&\r\n            elem.getAttribute(\"name\") !== \"BODY\" && res.widget === undefined) {\r\n            let i = 0;\r\n            while (i < n && res.widget === undefined) {\r\n                if (this.matchesSelectors(elem, widgetList[i].selectors)) {\r\n                    res.widget = widgetList[i];\r\n                    res.elem = this.jQuery(elem);\r\n                }\r\n                i++;\r\n            }\r\n            elem = elem.parentElement;\r\n        }\r\n        // If no widget is found and selectedElement has a parent OL or IMG,\r\n        // force detection with a fake widget.\r\n        if (!res.widget) {\r\n            const parent = res.selectedElement.closest('ol,img');\r\n            let tag = res.selectedElement.prop('tagName');\r\n            const isTag = tag === 'OL' || tag === 'IMG';\r\n            if (isTag || parent[0]) {\r\n                if (!isTag) {\r\n                    tag = parent.prop('tagName');\r\n                }\r\n                /** @ts-ignore */\r\n                res.widget = {key: `!${tag}`, prop: () => ''};\r\n                res.targetElement = isTag ? res.selectedElement : parent;\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n}\r\n\r\n/** @type {DomSrv | undefined} */\r\nlet instanceSrv;\r\n/**\r\n * @returns {DomSrv}\r\n */\r\nexport function getDomSrv() {\r\n    if (!instanceSrv) {\r\n        // @ts-ignore\r\n        instanceSrv = new DomSrv(jquery);\r\n    }\r\n    return instanceSrv;\r\n}\r\n"],"names":["e","instanceSrv","DomSrv","jquery","_jquery","__esModule","default","constructor","jQuery","this","treatElementIds","$e","$target","$root","idMap","oldId","prop","newId","Math","random","toString","substring","forEach","dataX","attr","startsWith","removeClass","rootRef","find","targetRef","length","clonedRef","clone","insertAfter","smartClone","each","_","findReferences","searchFor","found","is","push","toArray","$descendants","map","matchesSelectors","elem","selectors","selector","extraQuery","Array","isArray","slice","match","matches","querySelector","findWidgetOnEventPath","widgetList","selectedElement","res","n","getAttribute","undefined","widget","i","parentElement","parent","closest","tag","isTag","key","targetElement","_exports"],"mappings":"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"}