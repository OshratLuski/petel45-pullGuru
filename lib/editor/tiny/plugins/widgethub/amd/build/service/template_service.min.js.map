{"version":3,"file":"template_service.min.js","sources":["../../src/service/template_service.js"],"sourcesContent":["/* eslint-disable no-console */\r\n// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Tiny WidgetHub plugin.\r\n *\r\n * @module      tiny_widgethub/plugin\r\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport mustache from 'core/mustache';\r\nimport {evalInContext, genID} from '../util';\r\n\r\n\r\n/**\r\n * @param {string} text\r\n * @param {Object.<string, any>} ctx2\r\n * @returns {string}\r\n */\r\nconst defineVar = function (text, ctx2) {\r\n    const pos = text.indexOf(\"=\");\r\n    const varname = text.substring(0, pos).trim();\r\n    const varvalue = evalInContext(ctx2, text.substring(pos + 1).trim());\r\n    ctx2[varname] = varvalue;\r\n    return varname;\r\n};\r\n\r\nexport class TemplateSrv {\r\n    /**\r\n     * @param {*} mustache\r\n     * @param {() => Promise<EJS>} ejsLoader\r\n     */\r\n    constructor(mustache, ejsLoader) {\r\n        this.mustache = mustache;\r\n        /** @type {() => Promise<EJS>} */\r\n        this.ejsLoader = ejsLoader;\r\n    }\r\n    /**\r\n     * @param {string} template\r\n     * @param {Object.<string, any>} context\r\n     * @param {Object.<string, Object.<string, string>>=} translations\r\n     * @returns {string} The interpolated template given a context and translations map\r\n     */\r\n    renderMustache(template, context, translations) {\r\n        const ctx = {...context};\r\n        Object.keys(ctx).forEach(key => {\r\n            if (ctx[key] === \"$RND\") {\r\n                ctx[key] = genID();\r\n            }\r\n        });\r\n        this.applyMustacheHelpers(ctx, translations ?? {});\r\n        // @ts-ignore\r\n        return this.mustache.render(template, ctx);\r\n    }\r\n\r\n    /**\r\n     * @param {string} template\r\n     * @param {Object.<string, any>} context\r\n     * @param {Object.<string, Object.<string, any>>} translations\r\n     * @returns {Promise<string>} The interpolated template given a context and translations map\r\n     */\r\n    async renderEJS(template, context, translations) {\r\n        /** @type {Object.<string, any>} */\r\n        const ctx = {...context, I18n: {}};\r\n        Object.keys(ctx).forEach(key => {\r\n            if (ctx[key] === \"$RND\") {\r\n                ctx[key] = genID();\r\n            }\r\n        });\r\n        const lang = ctx._lang;\r\n        for (let wordKey in translations) {\r\n            const dict = translations[wordKey];\r\n            ctx.I18n[wordKey] = dict[lang] || dict.en || dict.es || wordKey;\r\n        }\r\n        try {\r\n            const ejsResolved = await this.ejsLoader();\r\n            return ejsResolved.render(template, ctx);\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {string} template\r\n     * @param {Object.<string, any>} context\r\n     * @param {Object.<string, Object.<string, any>>} translations\r\n     * @param {string=} engine - (ejs | mustache) optional\r\n     * @returns {Promise<string>} - The interpolated template given a context and translations map\r\n     */\r\n    render(template, context, translations, engine) {\r\n        if (!engine) {\r\n            engine = template.includes(\"<%\") ? \"ejs\" : \"mustache\";\r\n        }\r\n        if (engine === \"ejs\") {\r\n            return this.renderEJS(template, context, translations);\r\n        }\r\n        // Default to Mustache\r\n        const tmpl = this.renderMustache(template, context, translations);\r\n        return Promise.resolve(tmpl);\r\n    }\r\n\r\n    /**\r\n     * Extends Mustache templates with some helpers\r\n     * @param {Object.<string, any>} ctx\r\n     * @param {Record<string, Record<string, string>>} translations\r\n     */\r\n    applyMustacheHelpers(ctx, translations) {\r\n        const self = this;\r\n        ctx.if = () =>\r\n            /**\r\n             * @param {string} text\r\n             * @param {Mustache.render} render\r\n             */\r\n            function (text, render) {\r\n                const pos = text.indexOf(\"]\");\r\n                const condition = text.substring(0, pos).trim().substring(1);\r\n                const show = evalInContext(ctx, condition);\r\n                if (show) {\r\n                    // @ts-ignore\r\n                    return render(text.substring(pos + 1).trim());\r\n                }\r\n                return \"\";\r\n            };\r\n        ctx.var = () =>\r\n            /**\r\n             * @param {string} text\r\n             */\r\n            function (text) {\r\n                defineVar(text, ctx);\r\n            };\r\n        ctx.eval = () =>\r\n            /**\r\n             * @param {string} text\r\n             */\r\n            function (text) {\r\n                return evalInContext(ctx, text) + \"\";\r\n            };\r\n        ctx.I18n = () =>\r\n            /**\r\n             * @param {string} text\r\n             * @param {Mustache.render} render\r\n             */\r\n            function (text, render) {\r\n                // @ts-ignore\r\n                const key = render(text).trim();\r\n                const dict = translations[key] || {};\r\n                return dict[ctx._lang] || dict.en || dict.ca || key;\r\n            };\r\n        ctx.each = () =>\r\n            /**\r\n             * @param {string} text\r\n             */\r\n            function (text) {\r\n                const pos = text.indexOf(\"]\");\r\n                const cond = text.substring(0, pos).trim().substring(1);\r\n                const components = cond.split(\",\");\r\n                const dim = components.length;\r\n                const maxValues = new Array(dim);\r\n                const loopVars = new Array(dim);\r\n                let total = 1;\r\n                const cc = 'i'.charCodeAt(0);\r\n                components.forEach((def, i) => {\r\n                    const parts = def.split(\"=\");\r\n                    if (parts.length === 1) {\r\n                        parts.unshift(String.fromCharCode(cc + i));\r\n                    }\r\n                    const cname = parts[0].trim();\r\n                    loopVars[i] = cname;\r\n                    const dm = evalInContext(ctx, parts[1]);\r\n                    total = total * dm;\r\n                    maxValues[i] = dm;\r\n                    ctx[cname] = 1;\r\n                });\r\n                let output = [];\r\n                for (let _ei = 0; _ei < total; _ei++) {\r\n                    // @ts-ignore\r\n                    output.push(self.mustache.render(text.substring(pos + 1), ctx));\r\n                    let currentDim = dim - 1;\r\n                    let incrUp;\r\n                    do {\r\n                        const oldValue = ctx[loopVars[currentDim]] - 1;\r\n                        const newValue = (oldValue + 1) % maxValues[currentDim] + 1;\r\n                        ctx[loopVars[currentDim]] = newValue;\r\n                        incrUp = newValue < oldValue;\r\n                        currentDim--;\r\n                    } while (currentDim >= 0 && incrUp);\r\n                }\r\n                return output.join('');\r\n            };\r\n        ctx.for = () =>\r\n            /**\r\n             * @param {string} text\r\n             */\r\n            function (text) {\r\n                const pos = text.indexOf(\"]\");\r\n                const condition = text.substring(0, pos).trim().substring(1);\r\n                const parts = condition.split(\";\");\r\n                const loopvar = defineVar(parts[0], ctx);\r\n                let output = \"\";\r\n                let maxIter = 0; // Prevent infinite loop imposing a limit of 1000\r\n                while (evalInContext(ctx, parts[1]) && maxIter < 1000) {\r\n                    // @ts-ignore\r\n                    output += self.mustache.render(text.substring(pos + 1), ctx);\r\n                    if (parts.length === 3 && parts[2].trim()) {\r\n                        defineVar(loopvar + \"=\" + parts[2], ctx);\r\n                    } else {\r\n                        ctx[loopvar] = ctx[loopvar] + 1;\r\n                    }\r\n                    maxIter++;\r\n                }\r\n                return output;\r\n            };\r\n    }\r\n}\r\n\r\n/**\r\n * Load on demand the template engine EJS\r\n * @typedef {Object} EJS\r\n * @property {(template: string, ctx: Object.<string,any>) => string} render\r\n */\r\n/** @type {EJS | undefined} */\r\nlet _ejs;\r\nconst ejsLoader = () => {\r\n    if (_ejs) {\r\n        return Promise.resolve(_ejs);\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        // @ts-ignore\r\n        window.require(['tiny_widgethub/libs/ejs-lazy'], (ejsModule) => {\r\n            _ejs = ejsModule;\r\n            if (_ejs) {\r\n                resolve(_ejs);\r\n            } else {\r\n                reject();\r\n            }\r\n        }, reject);\r\n    });\r\n};\r\n\r\n/** @type {TemplateSrv | undefined} */\r\nlet instanceSrv;\r\n/**\r\n * @returns {TemplateSrv}\r\n */\r\nexport function getTemplateSrv() {\r\n    if (!instanceSrv) {\r\n        instanceSrv = new TemplateSrv(mustache, ejsLoader);\r\n    }\r\n    return instanceSrv;\r\n}"],"names":["e","instanceSrv","TemplateSrv","mustache","default","ejsLoader","_mustache","__esModule","defineVar","text","ctx2","pos","indexOf","varname","substring","trim","varvalue","evalInContext","constructor","this","renderMustache","template","context","translations","ctx","Object","keys","forEach","key","genID","applyMustacheHelpers","render","renderEJS","I18n","lang","_lang","wordKey","dict","en","es","ex","console","error","engine","includes","tmpl","Promise","resolve","self","if","condition","var","eval","ca","each","components","split","dim","length","maxValues","Array","loopVars","total","cc","charCodeAt","def","i","parts","unshift","String","fromCharCode","cname","dm","output","_ei","push","incrUp","currentDim","oldValue","newValue","join","for","loopvar","maxIter","_ejs","_exports","reject","window","require","ejsModule"],"mappings":"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"}