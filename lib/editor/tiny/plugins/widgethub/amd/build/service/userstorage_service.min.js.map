{"version":3,"file":"userstorage_service.min.js","sources":["../../src/service/userstorage_service.js"],"sourcesContent":["/* eslint-disable no-console */\r\n// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport {getEditorOptions} from '../options';\r\n\r\n/**\r\n * Tiny WidgetHub plugin.\r\n *\r\n * @module      tiny_widgethub/plugin\r\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n/**\r\n * @typedef {{localStorage: Storage, sessionStorage: Storage}} IStorage;\r\n */\r\n\r\nexport class UserStorageSrv {\r\n   /**\r\n    * @param {import('../options').EditorOptions} editorOptions\r\n    * @param {IStorage} iStorage\r\n    */\r\n    constructor(editorOptions, iStorage) {\r\n        /** @type {Storage} */\r\n        this.localStorage = iStorage.localStorage;\r\n        /** @type {Storage} */\r\n        this.sessionStorage = iStorage.sessionStorage;\r\n        /** @type {number} */\r\n        this.userId = editorOptions.userId;\r\n        /** @type {number} */\r\n        this.courseId = editorOptions.courseId;\r\n        /** @type {string} */\r\n        this.STORE_KEY = \"iedib-widgets_\" + editorOptions.userId;\r\n        /**\r\n         * @type {Record<string, any>}\r\n         */\r\n        this._localStore = {values: {}};\r\n        /**\r\n         * @type {Record<string, any>}\r\n         */\r\n        this._sessionStore = {searchtext: ''};\r\n        this.loadStore();\r\n    }\r\n\r\n    loadStore() {\r\n        if (typeof this.localStorage !== 'undefined') {\r\n            const json = this.localStorage.getItem(this.STORE_KEY);\r\n            if (json) {\r\n                try {\r\n                    this._localStore = JSON.parse(json);\r\n                } catch (ex) {\r\n                    console.error(ex);\r\n                }\r\n            }\r\n        }\r\n        // Added storage for this _course\r\n        // @ts-ignore\r\n        if (!this._localStore[\"_\" + this._courseId]) {\r\n            // @ts-ignore\r\n            this._localStore[\"_\" + this._courseId] = {};\r\n        }\r\n        if (typeof this.sessionStorage !== 'undefined') {\r\n            const json2 = this.sessionStorage.getItem(this.STORE_KEY);\r\n            if (json2) {\r\n                try {\r\n                    this._sessionStore = JSON.parse(json2);\r\n                } catch (ex) {\r\n                    console.error(ex);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @template T\r\n     * @param {string} key\r\n     * @param {T} defaultValue\r\n     * @returns {T}\r\n     */\r\n    getFromLocal(key, defaultValue) {\r\n        if (!this._localStore) {\r\n            return defaultValue;\r\n        }\r\n        // @ts-ignore\r\n        const MLSC = this._localStore[\"_\" + this._courseId]; // Almost everything goes here\r\n        const MLS = this._localStore; // Only configuration params\r\n        if (MLSC) {\r\n            // @ts-ignore\r\n            return MLSC[key] || MLS[key] || defaultValue;\r\n        } else if (MLS) {\r\n            // @ts-ignore\r\n            return MLS[key] || defaultValue;\r\n        }\r\n        return defaultValue;\r\n    }\r\n\r\n    /**\r\n     * @param {string} key\r\n     * @param {*} defaultValue\r\n     * @returns {*}\r\n     */\r\n    getFromSession(key, defaultValue) {\r\n        return ((this._sessionStore[key] ?? null) !== null ? this._sessionStore[key] : defaultValue);\r\n    }\r\n\r\n    /**\r\n     * @param {'local' | 'session' | undefined} [type]\r\n     */\r\n    saveStore(type) {\r\n        if (type === 'local') {\r\n            this.localStorage.setItem(this.STORE_KEY, JSON.stringify(this._localStore));\r\n        } else if (type === 'session') {\r\n            this.sessionStorage.setItem(this.STORE_KEY, JSON.stringify(this._sessionStore));\r\n        } else if (type === null || type === undefined) {\r\n            this.localStorage.setItem(this.STORE_KEY, JSON.stringify(this._localStore));\r\n            this.sessionStorage.setItem(this.STORE_KEY, JSON.stringify(this._sessionStore));\r\n        }\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {string} key\r\n     * @param {T} value\r\n     * @param {boolean=} persist\r\n     * @returns {void}\r\n     */\r\n    setToLocal(key, value, persist) {\r\n        // @ts-ignore\r\n        const MLSC = this._localStore[\"_\" + this._courseId]; // Almost everything goes here\r\n        const MLS = this._localStore; // Only configuration params\r\n\r\n        // @ts-ignore\r\n        if (typeof (value) === 'object') {\r\n            if (MLSC && key === 'saveall_data' || key === 'values') {\r\n                MLSC[key] = MLSC[key] || {};\r\n            } else {\r\n                // @ts-ignore\r\n                MLS[key] = MLS[key] || {};\r\n            }\r\n            // @ts-ignore\r\n            const keys = Object.keys(value);\r\n            for (let i = 0, len = keys.length; i < len; i++) {\r\n                const theKey = keys[i];\r\n                // @ts-ignore\r\n                const val = value[theKey];\r\n                if (MLSC && key === 'saveall_data' || key === 'values') {\r\n                    MLSC[key][theKey] = val;\r\n                } else {\r\n                    // @ts-ignore\r\n                    MLS[key][theKey] = val;\r\n                }\r\n            }\r\n        } else {\r\n            // @ts-ignore\r\n            MLS[key] = value;\r\n        }\r\n        if (persist) {\r\n            this.saveStore(\"local\");\r\n        }\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {string} key\r\n     * @param {T} value\r\n     * @param {boolean=} persist\r\n     * @returns {void}\r\n     */\r\n    setToSession(key, value, persist) {\r\n        if (typeof (value) === 'object') {\r\n            // @ts-ignore\r\n            this._sessionStore[key] = this._sessionStore[key] || {};\r\n            // @ts-ignore\r\n            const keys = Object.keys(value);\r\n            for (let i = 0, len = keys.length; i < len; i++) {\r\n                const theKey = keys[i];\r\n                // @ts-ignore\r\n                const val = value[theKey];\r\n                // @ts-ignore\r\n                this._sessionStore[key][theKey] = val;\r\n            }\r\n        } else {\r\n            // @ts-ignore\r\n            this._sessionStore[key] = value;\r\n        }\r\n        if (persist) {\r\n            this.saveStore(\"session\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {{key: string, p: Record<string, any>}[]}\r\n     */\r\n     getRecentUsed() {\r\n        let recentList = [];\r\n        try {\r\n           recentList = JSON.parse(this.getFromSession(\"recent\", \"[]\"));\r\n        } catch (ex) {\r\n           console.error('Cannot parse recent', ex);\r\n        }\r\n        return recentList;\r\n    }\r\n}\r\n\r\n\r\nconst userStorageInstances = new Map();\r\n/**\r\n * @param {import('../plugin').TinyMCE} editor\r\n * @returns {UserStorageSrv}\r\n */\r\nexport function getUserStorage(editor) {\r\n    let instance = userStorageInstances.get(editor);\r\n    if (!instance) {\r\n        const iStorage = {localStorage, sessionStorage};\r\n        instance = new UserStorageSrv(getEditorOptions(editor), iStorage);\r\n        userStorageInstances.set(editor, instance);\r\n    }\r\n    return instance;\r\n}\r\n"],"names":["editor","instance","userStorageInstances","get","iStorage","localStorage","sessionStorage","UserStorageSrv","getEditorOptions","set","constructor","editorOptions","this","userId","courseId","STORE_KEY","_localStore","values","_sessionStore","searchtext","loadStore","json","getItem","JSON","parse","ex","console","error","_courseId","json2","getFromLocal","key","defaultValue","MLSC","MLS","getFromSession","saveStore","type","setItem","stringify","setToLocal","value","persist","keys","Object","i","len","length","theKey","val","setToSession","getRecentUsed","recentList","_exports","Map"],"mappings":"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"}