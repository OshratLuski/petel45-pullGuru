{"version":3,"file":"widgetpicker_ctrl.min.js","sources":["../../src/controller/widgetpicker_ctrl.js"],"sourcesContent":["/* eslint-disable max-len */\r\n/* eslint-disable no-eq-null */\r\n/* eslint-disable no-console */\r\n// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Tiny WidgetHub plugin.\r\n *\r\n * @module      tiny_widgethub/plugin\r\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nimport {get_string} from 'core/str';\r\nimport {getWidgetParamsFactory} from '../controller/widgetparams_ctrl';\r\nimport {getEditorOptions} from '../options';\r\nimport {getModalSrv} from '../service/modal_service';\r\nimport {getTemplateSrv} from '../service/template_service';\r\nimport {getUserStorage} from '../service/userstorage_service';\r\nimport {debounce, genID, hashCode, searchComp, toggleClass} from '../util';\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {boolean} visible\r\n */\r\nexport const setVisibility = function(el, visible) {\r\n    if(!el) {\r\n        return;\r\n    }\r\n    if (visible) {\r\n        el.classList.remove(\"d-none\");\r\n    } else {\r\n        el.classList.add(\"d-none\");\r\n    }\r\n};\r\n\r\nexport class WidgetPickerCtrl {\r\n    /** @type {import('../service/modal_service').ModalDialogue} */\r\n    // @ts-ignore\r\n    modal;\r\n\r\n    /**\r\n     * @param {import('../plugin').TinyMCE} editor\r\n     * @param {import('../options').EditorOptions} editorOptions\r\n     * @param {(widget: import('../options').Widget) => import('../controller/widgetparams_ctrl').WidgetParamsCtrl} widgetParamsFactory\r\n     * @param {import('../service/modal_service').ModalSrv} modalSrv\r\n     * @param {import('../service/template_service').TemplateSrv} templateSrv\r\n     * @param {import('../service/userstorage_service').UserStorageSrv} userStorage\r\n     */\r\n    constructor(editor, editorOptions, widgetParamsFactory, modalSrv, templateSrv, userStorage) {\r\n        /** @type {import('../plugin').TinyMCE} */\r\n        this.editor = editor;\r\n        /** @type {import('../options').EditorOptions} */\r\n        this.editorOptions = editorOptions;\r\n        /** @type {(widget: import('../options').Widget) => import('../controller/widgetparams_ctrl').WidgetParamsCtrl} */\r\n        this.widgetParamsFactory = widgetParamsFactory;\r\n        /** @type {import('../service/modal_service').ModalSrv} */\r\n        this.modalSrv = modalSrv;\r\n        /** @type {import('../service/template_service').TemplateSrv} */\r\n        this.templateSrv = templateSrv;\r\n        /** @type {import('../service/userstorage_service').UserStorageSrv} */\r\n        this.storage = userStorage;\r\n        /** @type {number} */\r\n        this.scrollPos = 0;\r\n    }\r\n\r\n    isSelectMode() {\r\n        return this.editor.selection.getContent().trim().length > 0;\r\n    }\r\n\r\n    /**\r\n     * Shows or hides buttons according to the search text condition\r\n     * When text == '', all non-hidden buttons should be displayed\r\n     * @param {JQuery<HTMLElement>} bodyForm\r\n     * @param {string} searchtext\r\n     * @returns {number}\r\n     */\r\n    setWidgetButtonsVisibility(bodyForm, searchtext) {\r\n        let numshown = 0;\r\n        const selectmode = this.isSelectMode();\r\n        /** @type {JQuery<HTMLDivElement>} */\r\n        const allbtns = bodyForm.find(\".btn-group\");\r\n        allbtns.each((i, el) => {\r\n            // Is supported in select mode?\r\n            let visible = !selectmode || (selectmode && el.dataset.selectable === \"true\");\r\n            const el2 = el.querySelector('button');\r\n            // Does fullfill the search criteria?\r\n            visible &&= el2 !== null && (searchtext.trim() === '' || searchComp(el2.textContent ?? '', searchtext) ||\r\n                searchComp(el2.title ?? '', searchtext));\r\n            setVisibility(el, visible);\r\n            if (visible) {\r\n                numshown++;\r\n            }\r\n        });\r\n        return numshown;\r\n    }\r\n\r\n    /**\r\n     * Callback on keyup event\r\n     */\r\n    onSearchKeyup() {\r\n        const searchtext = this.modal.body.find(\"input\").val() ?? '';\r\n        this.storage.setToSession('searchtext', searchtext, true);\r\n\r\n        // Are we in selectmode, does the widget support it? insertquery\r\n        const numshown = this.setWidgetButtonsVisibility(this.modal.body, searchtext);\r\n        // If no button visible, show emptyList message\r\n        setVisibility(this.modal.body.find(\".tiny_widgethub-emptylist\")[0], numshown == 0);\r\n\r\n        // Hide categories without any button visible\r\n        /** @type {JQuery<HTMLElement>} */\r\n        const allcatgs = this.modal.body.find(\".tiny_widgethub-category\");\r\n        allcatgs.each((_, el) => {\r\n            const count = el.querySelectorAll(\".btn-group:not(.d-none)\").length;\r\n            setVisibility(el, count > 0);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {*} evt\r\n     */\r\n    async onMouseEnterButton(evt) {\r\n        const widgetTable = this.editorOptions.widgetDict;\r\n        const key = evt.target?.closest('.btn-group')?.dataset?.key ?? '';\r\n        const widget = widgetTable[key];\r\n        if (!widget || widget.isFilter()) {\r\n            // Filters do not offer preview\r\n            return;\r\n        }\r\n        /** @type {string | undefined} */\r\n        let html = widget._preview;\r\n        if (!html) {\r\n            // Generate preview with default parameters\r\n            html = await this.generatePreview(widget);\r\n            widget._preview = html;\r\n        }\r\n        this.modal.body.find(\"div.tiny_widgethub-preview\")\r\n            .html(html)\r\n            .css(\"display\", \"block\");\r\n    }\r\n\r\n    async createModal() {\r\n        /** @type {string} */\r\n        const searchtext = this.storage.getFromSession(\"searchtext\", \"\");\r\n        const data = {\r\n            ...this.getPickTemplateContext(),\r\n            searchtext\r\n        };\r\n\r\n        this.modal = await this.modalSrv.create('picker', data);\r\n\r\n        // Add select mode identifier to the header\r\n        const blinkElem = document.createElement(\"SPAN\");\r\n        blinkElem.classList.add(\"tiny_widgethub-blink\", \"d-none\");\r\n        const selectModeStr = await get_string('selectmode', 'tiny_widgethub');\r\n        blinkElem.innerHTML = `<span class=\"twh-icon\">\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M48 115.8C38.2 107 32 94.2 32 80c0-26.5 21.5-48 48-48c14.2 0 27 6.2 35.8 16l344.4 0c8.8-9.8 21.6-16 35.8-16c26.5 0 48 21.5 48 48c0 14.2-6.2 27-16 35.8l0 280.4c9.8 8.8 16 21.6 16 35.8c0 26.5-21.5 48-48 48c-14.2 0-27-6.2-35.8-16l-344.4 0c-8.8 9.8-21.6 16-35.8 16c-26.5 0-48-21.5-48-48c0-14.2 6.2-27 16-35.8l0-280.4zM125.3 96c-4.8 13.6-15.6 24.4-29.3 29.3l0 261.5c13.6 4.8 24.4 15.6 29.3 29.3l325.5 0c4.8-13.6 15.6-24.4 29.3-29.3l0-261.5c-13.6-4.8-24.4-15.6-29.3-29.3L125.3 96zm2.7 64c0-17.7 14.3-32 32-32l128 0c17.7 0 32 14.3 32 32l0 96c0 17.7-14.3 32-32 32l-128 0c-17.7 0-32-14.3-32-32l0-96zM256 320l32 0c35.3 0 64-28.7 64-64l0-32 64 0c17.7 0 32 14.3 32 32l0 96c0 17.7-14.3 32-32 32l-128 0c-17.7 0-32-14.3-32-32l0-32z\"/></svg>\r\n        </span> ${selectModeStr}`;\r\n        this.modal.header[0]?.append(blinkElem);\r\n\r\n        try {\r\n            this.modal.body.find(\".tiny_widgethub-categorycontainer\")\r\n                // @ts-ignore\r\n                .scrollspy('refresh');\r\n        } catch (ex) {\r\n            console.error(\"Problem setting scrollspy\", ex);\r\n        }\r\n\r\n        // Confiure preview panel events\r\n        const mouseEnterDebounced = debounce(this.onMouseEnterButton.bind(this), 1000);\r\n\r\n        const onMouseOut = () => {\r\n            mouseEnterDebounced.clear();\r\n            this.modal.body.find(\"div.tiny_widgethub-preview\")\r\n                .html('')\r\n                .css(\"display\", \"none\");\r\n        };\r\n\r\n        // Event listeners.\r\n        // Click on clear text\r\n        const widgetSearchElem = this.modal.body.find(\"input\");\r\n        widgetSearchElem.val(searchtext);\r\n        const debouncedKeyup = debounce(this.onSearchKeyup.bind(this), 800);\r\n        widgetSearchElem.on('keyup', debouncedKeyup);\r\n\r\n        this.modal.body.find(`#widget-clearfilter-btn${data.rid}`).on('click', () => {\r\n            debouncedKeyup.clear();\r\n            widgetSearchElem.val(\"\");\r\n            widgetSearchElem.trigger(\"focus\");\r\n            this.onSearchKeyup();\r\n        });\r\n        // Click on any widget button (bubbles)\r\n        this.modal.body.find('div.tiny_widgethub-categorycontainer, div.tiny_widgethub-recent').on('click',\r\n            /** @param {Event} event */\r\n            (event) => {\r\n                mouseEnterDebounced.clear();\r\n                this.modal.body.find(\"div.tiny_widgethub-preview\")\r\n                    .css(\"display\", \"none\");\r\n                this.handlePickModalClick(event);\r\n            });\r\n\r\n        // Preview panel\r\n        this.modal.body.find(\".btn-group\")\r\n            .on(\"mouseenter\", mouseEnterDebounced)\r\n            .on(\"mouseout\", onMouseOut.bind(this));\r\n\r\n        // Store current scroll\r\n        const scrollPane = this.modal.body.find('.tiny_widgethub-categorycontainer');\r\n        scrollPane.on('scroll', debounce(() => {\r\n            this.scrollPos = Math.round(scrollPane.scrollTop() ?? 0);\r\n        }, 100));\r\n    }\r\n\r\n\r\n    async handleAction() {\r\n        this.storage.loadStore();\r\n\r\n        if (!this.modal) {\r\n            // Create the modal if not exists.\r\n            await this.createModal();\r\n        } else {\r\n            // Update list of recent\r\n            const widgetDict = this.editorOptions.widgetDict;\r\n            const html = this.storage.getRecentUsed()\r\n                .filter(r => widgetDict[r.key] !== undefined)\r\n                .map(r =>\r\n                    `<a href=\"javascript:void(0)\" data-key=\"${r.key}\" data-insert=\"recent\"><span class=\"badge badge-secondary\">${widgetDict[r.key].name}</span></a>`)\r\n                .join('\\n');\r\n            this.modal.body.find('.tiny_widgethub-recent').html(html);\r\n        }\r\n        // Call filter function to make sure the list is updated.\r\n        this.onSearchKeyup();\r\n\r\n        const selectmode = this.isSelectMode();\r\n        if (selectmode) {\r\n            this.modal.header.find(\"span.tiny_widgethub-blink\").removeClass(\"d-none\");\r\n        } else {\r\n            this.modal.header.find(\"span.tiny_widgethub-blink\").addClass(\"d-none\");\r\n        }\r\n\r\n        this.modal.show();\r\n\r\n        setTimeout(() => {\r\n            if (!this.modal?.body) {\r\n                return;\r\n            }\r\n            if (this.scrollPos > 0) {\r\n                this.modal.body.find('.tiny_widgethub-categorycontainer').scrollTop(this.scrollPos);\r\n            }\r\n            this.modal.body.find(\"input\").trigger('focus');\r\n        }, 200);\r\n    }\r\n\r\n\r\n    show() {\r\n        this.modal?.show();\r\n    }\r\n\r\n    /**\r\n     * @param {import('../options').Widget} widget\r\n     * @returns {Promise<string>}\r\n     */\r\n    generatePreview(widget) {\r\n        const toInterpolate = {...widget.defaults};\r\n        // Decide which template engine to use\r\n        const engine = widget.prop('engine');\r\n        return this.templateSrv.render(widget.template ?? \"\", toInterpolate, widget.I18n, engine);\r\n    }\r\n\r\n    /**\r\n     * @typedef {Object} Button\r\n     * @property {boolean} hidden\r\n     * @property {string} category\r\n     * @property {number} widgetindex\r\n     * @property {string} widgetkey\r\n     * @property {string} widgetname\r\n     * @property {string} widgettitle\r\n     * @property {string} iconname\r\n     * @property {boolean} disabled\r\n     * @property {boolean} selectable\r\n     * @property {boolean} isfilter\r\n     * @property {boolean} filterset\r\n     */\r\n    /**\r\n     * @typedef {Object} Category\r\n     * @property {string} name\r\n     * @property {boolean} hidden\r\n     * @property {string} color\r\n     * @property {Button[]} buttons\r\n     */\r\n    /**\r\n     *  @typedef {{rid: string, selectmode: boolean, elementid: string, categories: Category[], recent: *[]}} TemplateContext\r\n     */\r\n    /**\r\n     * Get the template context for the dialogue.\r\n     *\r\n     * @returns {TemplateContext} data\r\n     */\r\n    getPickTemplateContext() {\r\n        const snptDict = this.editorOptions.widgetDict;\r\n        const allButtons = Object.values(snptDict);\r\n        // Parse filters that are autoset by the user.\r\n        const autoFilters = this.storage.getFromLocal(\"startup.filters\", \"\")\r\n            .split(\",\").map(f => f.trim());\r\n        /**\r\n         * @type {Object.<string, Category>}\r\n         **/\r\n        const categories = {};\r\n        allButtons.forEach(btn => {\r\n            const isFilter = btn.isFilter();\r\n            const catName = (btn.category ?? 'MISC').toUpperCase();\r\n            let found = categories[catName];\r\n            if (!found) {\r\n                const color = hashCode(catName) % 360;\r\n                let sat = '30%';\r\n                if (catName.toLowerCase().startsWith('obsolet')) {\r\n                    sat = '0%'; // Gray\r\n                }\r\n                found = {\r\n                    name: catName,\r\n                    hidden: false,\r\n                    color: color + ', ' + sat,\r\n                    buttons: []\r\n                };\r\n                categories[catName] = found;\r\n            }\r\n            found.buttons.push({\r\n                hidden: false,\r\n                category: catName,\r\n                widgetindex: btn.id,\r\n                widgetkey: btn.key,\r\n                widgetname: btn.name,\r\n                widgettitle: btn.name + \" \" + catName,\r\n                iconname: \"fa fas fa-eye\",\r\n                disabled: !btn.isUsableInScope(),\r\n                selectable: btn.insertquery != null,\r\n                isfilter: isFilter,\r\n                filterset: isFilter && autoFilters.includes(btn.key)\r\n            });\r\n        });\r\n        const categoriesList = Object.values(categories);\r\n        categoriesList.sort((a, b) => {\r\n            if (a.name < b.name) {\r\n                return -1;\r\n            }\r\n            if (a.name > b.name) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n        categoriesList.forEach(cat => {\r\n            cat.buttons.sort();\r\n            cat.hidden = cat.buttons.filter(btn => !btn.hidden).length == 0;\r\n        });\r\n\r\n        // Update the list of recently used widgets\r\n        const recentList = this.storage.getRecentUsed().filter((/** @type {any} **/ recent) => {\r\n            const key = recent.key;\r\n            const widget = snptDict[key];\r\n            if (!widget?.isUsableInScope()) {\r\n                return false;\r\n            }\r\n            // In select mode must filter widgets that do support it\r\n            const selectable = widget.insertquery !== undefined;\r\n            const isSelection = this.isSelectMode();\r\n            return key.length > 0 && (!isSelection || (isSelection && selectable));\r\n        })\r\n            .map((/** @type {any} **/ recent) => {\r\n                const key = recent.key;\r\n                const snpt = snptDict[key];\r\n                if (snpt) {\r\n                    return {\r\n                        key: key,\r\n                        name: snpt.name\r\n                    };\r\n                } else {\r\n                    return {\r\n                        key: key,\r\n                        name: \"\"\r\n                    };\r\n                }\r\n            });\r\n\r\n        return {\r\n            rid: genID(),\r\n            selectmode: this.isSelectMode(),\r\n            elementid: this.editor.id,\r\n            categories: categoriesList,\r\n            recent: recentList\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Handle a click within the Modal.\r\n     *\r\n     * @param {Event} event The click event\r\n     */\r\n    async handlePickModalClick(event) {\r\n        /** @type {any} */\r\n        const target = event.target;\r\n        if (!target) {\r\n            return;\r\n        }\r\n        /** @type {HTMLElement | undefined} */\r\n        const buttonWrapper = target.closest('[data-key]');\r\n        /** @type {import('../options').Widget | null} */\r\n        let widget = null;\r\n        if (buttonWrapper) {\r\n            const selectedButton = buttonWrapper?.dataset?.key;\r\n            if (selectedButton) {\r\n                widget = this.editorOptions.widgetDict[selectedButton];\r\n            }\r\n        }\r\n        if (!widget) {\r\n            return;\r\n        }\r\n        /** @type {HTMLElement | undefined} */\r\n        const button = target.closest('button.btn');\r\n        // Check if it is a toggle button to autoset a filter\r\n        if (button?.dataset?.auto) {\r\n            const isSet = button.dataset.auto !== \"true\";\r\n            button.dataset.auto = isSet + '';\r\n            toggleClass(button, 'btn-primary', 'btn-outline-primary');\r\n            const key = widget.key;\r\n            // Persist option\r\n            const autoFilters = new Set(this.storage.getFromLocal('startup.filters', '').split(''));\r\n            if (isSet) {\r\n                autoFilters.add(key);\r\n            } else {\r\n                autoFilters.delete(key);\r\n            }\r\n            this.storage.setToLocal('startup.filters', [...autoFilters].join(\",\"), true);\r\n            return;\r\n        }\r\n        /** @type {HTMLElement | undefined} */\r\n        const aRecent = target.closest('a[data-key]');\r\n        // If it is a recently used widget, recover the used parameters\r\n        /** @type {Record<string, any> | undefined} */\r\n        let ctx;\r\n        if (aRecent) {\r\n            ctx = this.storage.getRecentUsed().filter(e => e.key === widget.key)[0]?.p;\r\n        }\r\n        // Must open a configuration dialogue for the current widget\r\n        let confirmMsg = null;\r\n\r\n        if (!widget.isUsableInScope()) {\r\n            confirmMsg = await get_string('confirmusage', 'tiny_widgethub');\r\n        }\r\n        const forceInsert = aRecent !== null || button?.dataset?.insert === 'true';\r\n        if (confirmMsg) {\r\n            this.editor.windowManager.confirm(confirmMsg,\r\n                /** @param {*} state */\r\n                (state) => {\r\n                    if (state) {\r\n                        this.handlePickModalAction(widget, forceInsert, ctx);\r\n                    }\r\n                });\r\n        } else {\r\n            this.handlePickModalAction(widget, forceInsert, ctx);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {import('../options').Widget} widget\r\n     * @param {boolean} [forceInsert]\r\n     * @param {Record<string, *>} [ctx]\r\n     */\r\n    handlePickModalAction(widget, forceInsert, ctx) {\r\n        this.modal?.hide();\r\n        const paramsController = this.widgetParamsFactory(widget);\r\n        // Keep reference to the calling parentCtrl\r\n        paramsController.parentCtrl = this;\r\n        // Decide whether to show the form or directly doInsert\r\n        if (forceInsert || ((widget.parameters ?? []).length === 0 && !widget.instructions)) {\r\n            // Do insert directly\r\n            paramsController.insertWidget(ctx ?? {});\r\n        } else {\r\n            paramsController.handleAction();\r\n        }\r\n    }\r\n}\r\n\r\nconst widgetPickerCtrlInstances = new Map();\r\n/**\r\n * @param {import('../plugin').TinyMCE} editor\r\n * @returns {WidgetPickerCtrl}\r\n */\r\nexport function getWidgetPickCtrl(editor) {\r\n    let instance = widgetPickerCtrlInstances.get(editor);\r\n    if (!instance) {\r\n        instance = new WidgetPickerCtrl(editor,\r\n            getEditorOptions(editor), getWidgetParamsFactory(editor),\r\n            getModalSrv(), getTemplateSrv(), getUserStorage(editor));\r\n        widgetPickerCtrlInstances.set(editor, instance);\r\n    }\r\n    return instance;\r\n}\r\n"],"names":["editor","instance","widgetPickerCtrlInstances","get","WidgetPickerCtrl","getEditorOptions","getWidgetParamsFactory","getModalSrv","getTemplateSrv","getUserStorage","set","setVisibility","el","visible","classList","remove","add","_exports","modal","constructor","editorOptions","widgetParamsFactory","modalSrv","templateSrv","userStorage","this","storage","scrollPos","isSelectMode","selection","getContent","trim","length","setWidgetButtonsVisibility","bodyForm","searchtext","numshown","selectmode","find","each","i","dataset","selectable","el2","querySelector","searchComp","textContent","title","onSearchKeyup","body","val","setToSession","_","count","querySelectorAll","onMouseEnterButton","evt","_evt$target","_evt$target$closest","_evt$target$closest$d","widget","widgetDict","target","closest","key","isFilter","html","_preview","generatePreview","css","createModal","_this$modal$header$","getFromSession","data","getPickTemplateContext","create","blinkElem","document","createElement","selectModeStr","get_string","innerHTML","header","append","scrollspy","ex","console","error","mouseEnterDebounced","debounce","bind","widgetSearchElem","debouncedKeyup","on","rid","clear","trigger","event","handlePickModalClick","onMouseOut","scrollPane","Math","round","scrollTop","handleAction","loadStore","getRecentUsed","filter","r","undefined","map","name","join","removeClass","addClass","show","setTimeout","_this$modal","_this$modal2","toInterpolate","defaults","engine","prop","render","template","I18n","snptDict","allButtons","Object","values","autoFilters","getFromLocal","split","f","categories","forEach","btn","catName","category","toUpperCase","found","color","hashCode","sat","toLowerCase","startsWith","hidden","buttons","push","widgetindex","id","widgetkey","widgetname","widgettitle","iconname","disabled","isUsableInScope","insertquery","isfilter","filterset","includes","categoriesList","sort","a","b","cat","recentList","recent","isSelection","snpt","genID","elementid","_button$dataset","_button$dataset2","buttonWrapper","_buttonWrapper$datase","selectedButton","button","auto","isSet","toggleClass","Set","delete","setToLocal","aRecent","ctx","_this$storage$getRece","e","p","confirmMsg","forceInsert","insert","windowManager","confirm","state","handlePickModalAction","_this$modal3","hide","paramsController","parentCtrl","parameters","instructions","insertWidget","Map"],"mappings":"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"}