{"version":3,"file":"widgetproperties_ctrl.min.js","sources":["../../src/controller/widgetproperties_ctrl.js"],"sourcesContent":["/* eslint-disable no-console */\r\n// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Tiny WidgetHub plugin.\r\n *\r\n * @module      tiny_widgethub/plugin\r\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {getFormCtrl} from '../controller/form_ctrl';\r\nimport {getModalSrv} from '../service/modal_service';\r\nimport {createBinding} from '../util';\r\n\r\n/**\r\n * @typedef {JQuery<HTMLElement>} ModalDialogue\r\n * @property {JQuery<HTMLElement>} header\r\n * @property {JQuery<HTMLElement>} body\r\n * @property {JQuery<HTMLElement>} footer\r\n * @property {() => void} destroy\r\n * @property {() => void} show\r\n */\r\n\r\n/**\r\n * @class\r\n * @classdesc Defines a generic editor dialogue based on widget definition fields\r\n */\r\nexport class WidgetPropertiesCtrl {\r\n    /** @type {import('../service/modal_service').ModalDialogue | null} */\r\n    modal = null;\r\n\r\n    /**\r\n     * @param {import('../plugin').TinyMCE} editor\r\n     * @param {import('../controller/form_ctrl').FormCtrl} formCtrl\r\n     * @param {import('../service/modal_service').ModalSrv} modalSrv\r\n     */\r\n    constructor(editor, formCtrl, modalSrv) {\r\n        /** @type {import('../plugin').TinyMCE} */\r\n        this.editor = editor;\r\n        /** @type {import('../controller/form_ctrl').FormCtrl} */\r\n        this.formCtrl = formCtrl;\r\n        /** @type {import('../service/modal_service').ModalSrv} */\r\n        this.modalSrv = modalSrv;\r\n    }\r\n\r\n    /**\r\n     * Displays a modal dialog for editing the currentContext\r\n     * based on contextual\r\n     * @param {import('../contextInit').PathResult} currentContext\r\n     * @returns\r\n     */\r\n    async show(currentContext) {\r\n        if (!currentContext.widget) {\r\n            console.error(\"Missing widget on currentContext\");\r\n            return;\r\n        }\r\n        const widget = currentContext.widget;\r\n        const hostId = this.editor.id;\r\n        const elem = currentContext.elem;\r\n\r\n        if (!elem || !widget?.hasBindings()) {\r\n            console.error(\"Invalid widget definition \", widget);\r\n            return;\r\n        }\r\n\r\n        // Create bindings\r\n        /** @type {Object.<string, any>} */\r\n        const bindingsDOM = {};\r\n        // Extract param values from DOM\r\n        /** @type {Object.<string, any>} */\r\n        const paramValues = {};\r\n        widget.parameters.filter(param => param.bind != undefined).forEach((param) => {\r\n            if (!param.bind) {\r\n                return;\r\n            }\r\n            const binding = createBinding(param.bind, elem, typeof (param.value));\r\n            if (binding) {\r\n                bindingsDOM[param.name] = binding;\r\n                paramValues[param.name] = binding.getValue();\r\n            }\r\n        });\r\n\r\n        // Create parameters form controls\r\n        // Filter only those parameters which have default Values\r\n        /** @type {string[]} */\r\n        const controls = widget.parameters.filter(param => param.bind)\r\n            .map(param => this.formCtrl.createControlHTML(hostId, param, paramValues[param.name]));\r\n\r\n        const ctxData = {\r\n            name: widget.name,\r\n            controls: controls\r\n        };\r\n\r\n        // Create the modal\r\n        // @ts-ignore\r\n        this.modal = await this.modalSrv.create('context', ctxData, () => {\r\n            this.modal?.destroy();\r\n            this.modal = null;\r\n        });\r\n        this.formCtrl.attachPickers(this.modal.body);\r\n        // Applying watchers to the form elements\r\n        this.formCtrl.applyFieldWatchers(this.modal.body, paramValues, widget, false);\r\n\r\n        // Bind accept action to modal\r\n        this.modal.footer.find(\"button.btn-secondary\").on(\"click\", () => {\r\n            this.modal?.destroy();\r\n        });\r\n        this.modal.footer.find(\"button.btn-primary\").on(\"click\", () => {\r\n            const form = this.modal?.body?.find(\"form\");\r\n            let updatedValues = paramValues;\r\n            if (form) {\r\n                updatedValues = this.formCtrl.extractFormParameters(widget, form, true);\r\n            }\r\n            this.modal?.destroy();\r\n            // Apply Param Values To DOM\r\n            Object.keys(bindingsDOM).forEach(key => {\r\n                bindingsDOM[key].setValue(updatedValues[key]);\r\n            });\r\n        });\r\n\r\n        // Help circles require popover\r\n        try {\r\n            // @ts-ignore\r\n            this.modal.body.popover({\r\n            container: \"body\",\r\n            selector: \"[data-toggle=popover][data-trigger=hover]\",\r\n            trigger: \"hover\"\r\n            });\r\n        } catch (ex) {\r\n            // console.error(ex);\r\n        }\r\n\r\n        this.modal.show();\r\n    }\r\n\r\n    close() {\r\n        this.modal?.destroy();\r\n    }\r\n}\r\n\r\nconst widgetPropertiesCtrlInstances = new Map();\r\n/**\r\n * @param {import('../plugin').TinyMCE} editor\r\n * @returns {WidgetPropertiesCtrl}\r\n */\r\nexport function getWidgetPropertiesCtrl(editor) {\r\n    let instance = widgetPropertiesCtrlInstances.get(editor);\r\n    if (!instance) {\r\n        instance = new WidgetPropertiesCtrl(editor, getFormCtrl(editor), getModalSrv());\r\n        widgetPropertiesCtrlInstances.set(editor, instance);\r\n    }\r\n    return instance;\r\n}\r\n"],"names":["editor","instance","widgetPropertiesCtrlInstances","get","WidgetPropertiesCtrl","getFormCtrl","getModalSrv","set","modal","constructor","formCtrl","modalSrv","this","show","currentContext","widget","console","error","hostId","id","elem","hasBindings","bindingsDOM","paramValues","parameters","filter","param","undefined","bind","forEach","binding","createBinding","value","name","getValue","controls","map","createControlHTML","ctxData","create","_this$modal","destroy","attachPickers","body","applyFieldWatchers","footer","find","on","_this$modal2","_this$modal3","_this$modal3$body","_this$modal4","form","updatedValues","extractFormParameters","Object","keys","key","setValue","popover","container","selector","trigger","ex","close","_this$modal5","_exports","Map"],"mappings":"sTA+JO,SAAiCA,QACpC,IAAIC,SAAWC,8BAA8BC,IAAIH,QAC5CC,WACDA,SAAW,IAAIG,qBAAqBJ,QAAQ,EAAAK,WAAAA,aAAYL,SAAS,EAAAM,eAAWA,gBAC5EJ,8BAA8BK,IAAIP,OAAQC,WAE9C,OAAOA,QACX;;;;;;;;AA7HO,MAAMG,qBAETI,MAAQ,KAORC,WAAAA,CAAYT,OAAQU,SAAUC,UAE1BC,KAAKZ,OAASA,OAEdY,KAAKF,SAAWA,SAEhBE,KAAKD,SAAWA,QACpB,CAQA,UAAME,CAAKC,gBACP,IAAKA,eAAeC,OAEhB,YADAC,QAAQC,MAAM,oCAGlB,MAAMF,OAASD,eAAeC,OACxBG,OAASN,KAAKZ,OAAOmB,GACrBC,KAAON,eAAeM,KAE5B,IAAKA,MAASL,eAAAA,OAAQM,cAElB,YADAL,QAAQC,MAAM,6BAA8BF,QAMhD,MAAMO,YAAc,CAAA,EAGdC,YAAc,CAAA,EACpBR,OAAOS,WAAWC,QAAOC,OAAuBC,MAAdD,MAAME,OAAmBC,SAASH,QAChE,IAAKA,MAAME,KACP,OAEJ,MAAME,SAAU,EAAAC,MAAAA,eAAcL,MAAME,KAAMR,YAAcM,MAAMM,OAC1DF,UACAR,YAAYI,MAAMO,MAAQH,QAC1BP,YAAYG,MAAMO,MAAQH,QAAQI,WACtC,IAMJ,MAAMC,SAAWpB,OAAOS,WAAWC,QAAOC,OAASA,MAAME,OACpDQ,KAAIV,OAASd,KAAKF,SAAS2B,kBAAkBnB,OAAQQ,MAAOH,YAAYG,MAAMO,SAE7EK,QAAU,CACZL,KAAMlB,OAAOkB,KACbE,SAAUA,UAKdvB,KAAKJ,YAAcI,KAAKD,SAAS4B,OAAO,UAAWD,SAAS,KAAM,IAAAE,YACpD,QAAVA,YAAI5B,KAACJ,aAAK,IAAAgC,aAAVA,YAAYC,UACZ7B,KAAKJ,MAAQ,IAAI,IAErBI,KAAKF,SAASgC,cAAc9B,KAAKJ,MAAMmC,MAEvC/B,KAAKF,SAASkC,mBAAmBhC,KAAKJ,MAAMmC,KAAMpB,YAAaR,QAAQ,GAGvEH,KAAKJ,MAAMqC,OAAOC,KAAK,wBAAwBC,GAAG,SAAS,KAAM,IAAAC,aACnD,QAAVA,aAAIpC,KAACJ,aAAK,IAAAwC,cAAVA,aAAYP,SAAS,IAEzB7B,KAAKJ,MAAMqC,OAAOC,KAAK,sBAAsBC,GAAG,SAAS,KAAM,IAAAE,aAAAC,kBAAAC,aAC3D,MAAMC,KAAiBH,QAAbA,aAAGrC,KAAKJ,aAAK0C,IAAAD,cAAM,QAANC,kBAAVD,aAAYN,YAAI,IAAAO,uBAANA,EAAVA,kBAAkBJ,KAAK,QACpC,IAAIO,cAAgB9B,YAChB6B,OACAC,cAAgBzC,KAAKF,SAAS4C,sBAAsBvC,OAAQqC,MAAM,IAE5D,QAAVD,aAAIvC,KAACJ,aAAK,IAAA2C,cAAVA,aAAYV,UAEZc,OAAOC,KAAKlC,aAAaO,SAAQ4B,MAC7BnC,YAAYmC,KAAKC,SAASL,cAAcI,KAAK,GAC/C,IAIN,IAEI7C,KAAKJ,MAAMmC,KAAKgB,QAAQ,CACxBC,UAAW,OACXC,SAAU,4CACVC,QAAS,SAEb,CAAE,MAAOC,IAET,CAEAnD,KAAKJ,MAAMK,MACf,CAEAmD,KAAAA,GAAQ,IAAAC,aACM,QAAVA,aAAIrD,KAACJ,aAAK,IAAAyD,cAAVA,aAAYxB,SAChB,EACHyB,SAAA9D,qBAAAA,qBAED,MAAMF,8BAAgC,IAAIiE,GAYzC"}