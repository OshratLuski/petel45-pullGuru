{"version":3,"file":"form_ctrl.min.js","sources":["../../src/controller/form_ctrl.js"],"sourcesContent":["/* eslint-disable max-len */\r\n/* eslint-disable no-console */\r\n// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Tiny WidgetHub plugin.\r\n *\r\n * @module      tiny_widgethub/plugin\r\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nimport {getFileSrv} from '../service/file_service';\r\nimport {getTemplateSrv} from '../service/template_service';\r\nimport {getUserStorage} from '../service/userstorage_service';\r\nimport {capitalize, cleanParameterName, evalInContext, genID, stream, toHexAlphaColor, toRgba} from '../util';\r\nimport jquery from \"jquery\";\r\n\r\nconst questionPopover = '{{#tooltip}}<a href=\"javascript:void(0)\" data-toggle=\"popover\" data-trigger=\"hover\" data-content=\"{{tooltip}}\"><i class=\"fa fas fa-question-circle text-info\"></i></a>{{/tooltip}}';\r\n\r\nexport const Templates = {\r\n   TEXTFIELDTEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group row mx-1{{#hidden}} d-none{{/hidden}}\"><label class=\"col-sm-5 col-form-label\" for=\"{{elementid}}_ftmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\r\n   <div class=\"col-sm-7\"><input type=\"text\" id=\"{{elementid}}_ftmpl\" class=\"form-control\" name=\"{{varname}}\" {{#disabled}}disabled{{/disabled}} value=\"{{defaultvalue}}\"/></div>\r\n   </div>`,\r\n\r\n   IMAGETEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group row mx-1{{#hidden}} d-none{{/hidden}}\"><label class=\"col-sm-5 col-form-label\" for=\"{{elementid}}_ftmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\r\n   <div class=\"col-sm-7\">\r\n   <input type=\"text\" id=\"{{elementid}}_ftmpl\" class=\"form-control d-inline-block w-75\" name=\"{{varname}}\" {{#disabled}}disabled{{/disabled}} value=\"{{defaultvalue}}\"/>\r\n   <button class=\"whb-image-picker btn btn-sm btn-secondary d-inline-block\" title=\"Search\"><i class=\"fas fa fa-search\"></i></button>\r\n   </div>\r\n   </div>`,\r\n\r\n   NUMERICTEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group row mx-1{{#hidden}} d-none{{/hidden}}\"><label class=\"col-sm-5 col-form-label\"  for=\"{{elementid}}_fntmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\r\n   <div class=\"col-sm-7\"><input type=\"number\" id=\"{{elementid}}_fntmpl\" class=\"form-control\" name=\"{{varname}}\" {{{minMax}}} {{#disabled}}disabled{{/disabled}} value=\"{{defaultvalue}}\"/></div>\r\n   </div>`,\r\n\r\n   COLORTEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group row mx-1{{#hidden}} d-none{{/hidden}}\"><label class=\"col-sm-5 col-form-label\"  for=\"{{elementid}}_fntmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\r\n   <div class=\"col-sm-7\">\r\n   <span class=\"w-50 tiny_widgethub-pattern\">\r\n      <input type=\"color\" id=\"{{elementid}}_fctmpl\" name=\"{{varname}}\" {{#disabled}}disabled{{/disabled}} value=\"{{defaultvalue}}\"/>\r\n   </span>\r\n   <input type=\"range\" id=\"{{elementid}}_fcatmpl\" title=\"Opacity\" name=\"{{varname}}_alpha\" {{#disabled}}disabled{{/disabled}} value=\"{{defaultvalueAlpha}}\" min=\"0\" max=\"1\" step=\"0.01\"/>\r\n   </div></div>`,\r\n\r\n   TEXTAREATEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group{{#hidden}} d-none{{/hidden}}\"><label for=\"{{elementid}}_tatmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\r\n   <textarea id=\"{{elementid}}_tatmpl\" rows=\"3\" class=\"form-control\" name=\"{{varname}}\" {{#disabled}}disabled{{/disabled}} {{#tooltip}}title=\"{{tooltip}}\"{{/tooltip}}>{{defaultvalue}}</textarea>\r\n   </div>`,\r\n\r\n   CHECKBOXTEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group w-75 m-2{{#hidden}} d-none{{/hidden}}\">\r\n   <label>\r\n   <input title=\"{{varname}}\" id=\"{{elementid}}_cbtmpl\" {{#disabled}}disabled{{/disabled}} type=\"checkbox\" name=\"{{varname}}\" value=\"{{defaultvalue}}\" {{#defaultvalue}}checked{{/defaultvalue}}/></span>\r\n   {{vartitle}}</label> <span>&nbsp;&nbsp;  ${questionPopover}</span>\r\n   </div>`,\r\n\r\n   SELECTTEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group row mx-1{{#hidden}} d-none{{/hidden}}\">\r\n   <label class=\"col-sm-5 col-form-label\" for=\"{{elementid}}_stmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\r\n   <div class=\"col-sm-7\">\r\n   <select id=\"{{elementid}}_stmpl\" class=\"form-control\" name=\"{{varname}}\" {{#disabled}}disabled{{/disabled}} {{#tooltip}}title=\"{{tooltip}}\"{{/tooltip}}>\r\n   {{#options}}\r\n   <option value=\"{{optionValue}}\"{{#selected}} selected{{/selected}}>{{optionLabel}}</option>\r\n   {{/options}}\r\n   </select>\r\n   </div>\r\n   </div>`\r\n};\r\n\r\n\r\nexport class FormCtrl {\r\n  /**\r\n   * @param {import('../plugin').TinyMCE} editor\r\n   * @param {import('../service/userstorage_service').UserStorageSrv} userStorage\r\n   * @param {import('../service/template_service').TemplateSrv} templateSrv\r\n   * @param {import('../service/file_service').FileSrv} fileSrv\r\n   * @param {JQueryStatic} jQuery\r\n   */\r\n   constructor(editor, userStorage, templateSrv, fileSrv, jQuery) {\r\n      /** @type {import('../plugin').TinyMCE} */\r\n      this.editor = editor;\r\n      /** @type {import('../service/userstorage_service').UserStorageSrv} */\r\n      this.storage = userStorage;\r\n      /** @type {import('../service/template_service').TemplateSrv} */\r\n      this.templateSrv = templateSrv;\r\n      /** @type {import('../service/file_service').FileSrv} */\r\n      this.fileSrv = fileSrv;\r\n      /** @type {JQueryStatic} */\r\n      this.jQuery = jQuery;\r\n   }\r\n\r\n   /**\r\n    * @param {import('../options').Widget} widget\r\n    * @returns {*} - The generated context\r\n    */\r\n   createContext(widget) {\r\n      /** @type {boolean} */\r\n      const mustSaveAll = this.storage.getFromLocal('saveall', false);\r\n      /** @type {Object.<string, any>} */\r\n      const saveAllData = this.storage.getFromLocal('saveall_data', {});\r\n      /** @type {Object.<string, any>} */\r\n      const values = this.storage.getFromLocal(\"values\", {});\r\n      const defaults = widget.defaults;\r\n\r\n      /**\r\n       * @param {import('../options').Param} param\r\n       * @returns {any}\r\n       */\r\n      const obtainCurrentValue = (param) => {\r\n         const sname = widget.key;\r\n         const pname = param.name;\r\n         let currentval = defaults[pname];\r\n         if (pname.startsWith(\"_\") && values[pname]) {\r\n            currentval = values[pname];\r\n         }\r\n         if (mustSaveAll) {\r\n            // Search the last used value of this parameter\r\n            if ((saveAllData[sname]?.[pname] ?? null) !== null) {\r\n               currentval = saveAllData[sname][pname];\r\n            }\r\n         }\r\n         return currentval;\r\n      };\r\n\r\n      const controls = widget.parameters.map(param => this.createControlHTML(this.editor.id, param, obtainCurrentValue(param)));\r\n\r\n      const ctx = {\r\n         idtabpane: genID(),\r\n         selectmode: this.editor.selection.getContent().trim().length > 0,\r\n         name: widget.name,\r\n         instructions: widget.instructions,\r\n         filter: widget.isFilter(),\r\n         controls: controls\r\n      };\r\n      return ctx;\r\n   }\r\n\r\n   /**\r\n    * @param {string} hostId - The id of the editor\r\n    * @param {import('../options').Param} param - The parameter object defining the control\r\n    * @param {any} defaultValue - Default values for the parameter\r\n    * @returns {string} - The generated HTML for this control\r\n    */\r\n   createControlHTML(hostId, param, defaultValue) {\r\n      let markup = '';\r\n      const pname = cleanParameterName(param.name);\r\n      const generalCtx = {\r\n         elementid: hostId + \"_\" + pname,\r\n         varname: pname,\r\n         vartitle: param.title,\r\n         defaultvalue: defaultValue,\r\n         tooltip: param.tip || param.tooltip,\r\n         disabled: param.editable === false,\r\n         hidden: param.hidden === true\r\n      };\r\n      if (param.type === 'textarea') {\r\n         markup = this.templateSrv.renderMustache(Templates.TEXTAREATEMPLATE, generalCtx);\r\n      } else if (param.type === 'numeric') {\r\n         let minMax = \"\";\r\n         if (param.min) {\r\n            minMax += `min=\"${param.min}\"`;\r\n         }\r\n         if (param.max) {\r\n            minMax += ` max=\"${param.max}\"`;\r\n         }\r\n         markup = this.templateSrv.renderMustache(Templates.NUMERICTEMPLATE, {minMax: minMax, ...generalCtx});\r\n      } else if (param.type === 'checkbox') {\r\n         markup = this.templateSrv.renderMustache(Templates.CHECKBOXTEMPLATE, generalCtx);\r\n      } else if (param.type === 'select') {\r\n         const options = (param.options ?? []).map(opt => {\r\n            let label;\r\n            let value;\r\n            if (typeof opt === 'string') {\r\n               label = capitalize(opt);\r\n               value = opt;\r\n            } else {\r\n               label = opt.l;\r\n               value = opt.v;\r\n            }\r\n            return {optionLabel: label, optionValue: value, selected: value === defaultValue};\r\n         });\r\n         markup = this.templateSrv.renderMustache(Templates.SELECTTEMPLATE, {options, ...generalCtx});\r\n      } else if (param.type === 'color') {\r\n         // Value must be in hex form and must find alpha (0-1)\r\n         const [hex, alpha] = toHexAlphaColor(generalCtx.defaultvalue);\r\n         generalCtx.defaultvalue = hex;\r\n         /** @ts-ignore */\r\n         generalCtx.defaultvalueAlpha = alpha;\r\n         markup = this.templateSrv.renderMustache(Templates.COLORTEMPLATE, generalCtx);\r\n      } else if (param.type === 'image') {\r\n         markup = this.templateSrv.renderMustache(Templates.IMAGETEMPLATE, generalCtx);\r\n      } else {\r\n         // Assume textfield\r\n         markup = this.templateSrv.renderMustache(Templates.TEXTFIELDTEMPLATE, generalCtx);\r\n      }\r\n      return markup;\r\n   }\r\n\r\n\r\n   /**\r\n    * Obtains the updated parameter values from the modal\r\n    * This is used in insertWidget\r\n    * @param {import('../options').Widget} widget\r\n    * @param {JQuery<HTMLElement>} form\r\n    * @param {boolean} doStore\r\n    * @returns {Record<string, any>} - The updated parameters dict\r\n    */\r\n   extractFormParameters(widget, form, doStore) {\r\n      /** @type {Object.<string, any>}  */\r\n      const ctx = {};\r\n      /** @type {Object.<string, any>}  */\r\n      const toPersist = {};\r\n      const defaults = widget.defaults;\r\n      widget.parameters.forEach(param => {\r\n         const pname = param.name;\r\n         const cleanPname = cleanParameterName(pname);\r\n         const $elem = form.find(`[name=\"${cleanPname}\"]`);\r\n         if (!$elem.length) {\r\n            ctx[pname] = defaults[pname];\r\n            return;\r\n         }\r\n         /** @type {*} */\r\n         let value = $elem.val() ?? \"\";\r\n         if ($elem.prop(\"tagName\") === \"INPUT\" && $elem.attr(\"type\") === \"checkbox\") {\r\n            value = $elem.is(':checked');\r\n         } else if ($elem.prop(\"tagName\") === \"INPUT\" && $elem.attr(\"type\") === \"number\") {\r\n            if (value.indexOf(\".\") >= 0) {\r\n               value = parseFloat(value);\r\n            } else {\r\n               value = parseInt(value);\r\n            }\r\n         } else if ($elem.prop(\"tagName\") === \"INPUT\" && $elem.attr(\"type\") === \"color\") {\r\n            // Must also find the corresponding alpha channel value\r\n            const $slider = form.find(`[name=\"${cleanPname}_alpha\"]`);\r\n            const alpha = $slider.val() ?? 1;\r\n            value = toRgba(value, +alpha);\r\n         }\r\n\r\n         if (param.transform) {\r\n            value = stream(param.transform).reduce(value);\r\n         }\r\n         ctx[pname] = value;\r\n         if (pname.trim().startsWith(\"_\")) {\r\n            toPersist[pname] = value;\r\n         }\r\n      });\r\n      if (doStore && this.storage) {\r\n         if (Object.keys(toPersist).length) {\r\n            // Only those starting with $\r\n            this.storage.setToLocal('values', toPersist, true);\r\n         }\r\n         // Should all values be persisted?\r\n         const mustSaveAll = this.storage.getFromLocal('saveall', false);\r\n         if (mustSaveAll) {\r\n            /** @type {Object.<string, any>}  */\r\n            const previousAllData = this.storage.getFromLocal('saveall_data', {});\r\n            previousAllData[widget.name] = {...ctx};\r\n            this.storage.setToLocal('saveall_data', previousAllData, true);\r\n         }\r\n      }\r\n      return ctx;\r\n   }\r\n\r\n   /**\r\n    * @param {JQuery<HTMLElement>} body - The modal body\r\n    */\r\n   attachPickers(body) {\r\n      // Find all file pickers\r\n      const canShowFilePicker = typeof this.fileSrv.getImagePicker() !== 'undefined';\r\n      const picker = body.find('button.whb-image-picker').prop('disabled', !canShowFilePicker);\r\n      if (canShowFilePicker) {\r\n         // Attach a click handler to any image-picker buttons\r\n         picker.on(\"click\", /** @param {any} evt */ async(evt) => {\r\n            evt.preventDefault();\r\n            try {\r\n               /** @type {any} */\r\n               const params = await this.fileSrv.displayImagePicker();\r\n               if (params?.url) {\r\n                  this.jQuery(evt.currentTarget).parent().find('input').val(params.url);\r\n               }\r\n            } catch (ex) {\r\n               console.error(ex);\r\n            }\r\n         });\r\n      }\r\n\r\n      // Find all color pickers\r\n      body.find('input[type=\"color\"]').each((_, e) => {\r\n         const $inputColor = this.jQuery(e);\r\n         const name = ($inputColor.attr('name') ?? '');\r\n         // Find corresponding range slider\r\n         const $inputRange = body.find(`input[name=\"${name}_alpha\"]`);\r\n         const opacity = $inputRange.val() ?? 1;\r\n         $inputColor.css('opacity', '' + opacity);\r\n         // Bind envent change\r\n         $inputRange.on('change', () => {\r\n            const opacity = $inputRange.val() ?? 1;\r\n            $inputColor.css('opacity', '' + opacity);\r\n         });\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @param {JQuery<HTMLElement>} $formElem\r\n    * @param {Object.<string, any>} defaultsData\r\n    * @param {import('../options').Widget} widget\r\n    * @param {boolean} selectmode\r\n    */\r\n   applyFieldWatchers($formElem, defaultsData, widget, selectmode) {\r\n      /** @type {string[]} */\r\n      const watchedvars = []; // All these variable names must be watched\r\n      /**\r\n       * all these components must be updated when one watcher changes\r\n       *  @type {{\r\n       *    condition: string,\r\n       *    component: JQuery<HTMLElement>,\r\n       *    type: string,\r\n       *    indx: number\r\n       *  }[]}\r\n       */\r\n      const updatableComponents = [];\r\n\r\n      const regex = /\\{{2}([^}]*)\\}{2}/gm;\r\n      for (let indx = 0, len = widget.parameters.length; indx < len; indx++) {\r\n\r\n         const varobj = widget.parameters[indx];\r\n\r\n         if (varobj.when) {\r\n            const condition = varobj.when;\r\n            const t = varobj.type;\r\n            const control = $formElem.find(`[name=\"${cleanParameterName(varobj.name)}\"]`);\r\n            if (!control.length || !t) {\r\n               continue;\r\n            }\r\n            updatableComponents.push({\r\n               condition: condition.replace(/[{}]{2}/g, ''),\r\n               component: control,\r\n               indx: indx,\r\n               type: t\r\n            });\r\n            const varsInvolved = condition.match(regex);\r\n            varsInvolved?.forEach(evar => {\r\n               evar = evar.replace(/[{}]*/g, '').trim();\r\n               // Can only watch real variables SELECT_MODE is not a variable\r\n               if (watchedvars.indexOf(evar) < 0 && (defaultsData[evar] ?? null) !== null) {\r\n                  watchedvars.push(evar);\r\n               }\r\n            });\r\n         }\r\n         watchedvars.push(varobj.name);\r\n      }\r\n\r\n      const doUpdateVisibilities = () => {\r\n         updatableComponents.forEach(cc => {\r\n            // Evaluate condition\r\n            const newVariables = this.extractFormParameters(widget, $formElem, false);\r\n            // Add to the new variables the internal variables\r\n            newVariables.SELECT_MODE = selectmode;\r\n            // Eval JS condition for new variables\r\n            const showme = evalInContext(newVariables, cc.condition);\r\n            let theComponent = cc.component;\r\n            if (theComponent) {\r\n               theComponent = theComponent.closest('.form-group');\r\n               // Only change visibilities of nodes not hidden from user\r\n               if (!theComponent.attr('data-amagat')) {\r\n                  if (showme) {\r\n                     theComponent.show();\r\n                  } else {\r\n                     theComponent.hide();\r\n                  }\r\n               }\r\n            }\r\n         });\r\n      };\r\n\r\n      // Apply the watchers\r\n      widget.parameters.forEach((varobj) => {\r\n         const control = $formElem.find(`[name=\"${cleanParameterName(varobj.name)}\"]`);\r\n         if (watchedvars.indexOf(varobj.name) < 0 || !control[0]) {\r\n            return;\r\n         }\r\n         let evtName = \"change\";\r\n         if (varobj.type === 'textfield' || varobj.type === 'textarea') {\r\n            evtName = \"keyup\";\r\n         }\r\n         control.on(evtName, () => {\r\n            doUpdateVisibilities();\r\n         });\r\n      });\r\n\r\n      // Decide which form elements are visible accoding to the current values of the parameters.\r\n      doUpdateVisibilities();\r\n   }\r\n}\r\n\r\n\r\nconst formCtrlInstances = new Map();\r\n/**\r\n * @param {import('../plugin').TinyMCE} editor\r\n * @returns {FormCtrl}\r\n */\r\nexport function getFormCtrl(editor) {\r\n    let instance = formCtrlInstances.get(editor);\r\n    if (!instance) {\r\n        // @ts-ignore\r\n        instance = new FormCtrl(editor, getUserStorage(editor), getTemplateSrv(), getFileSrv(editor), jquery);\r\n        formCtrlInstances.set(editor, instance);\r\n    }\r\n    return instance;\r\n}\r\n"],"names":["e","editor","instance","formCtrlInstances","get","FormCtrl","getUserStorage","getTemplateSrv","getFileSrv","jquery","set","_jquery","__esModule","default","questionPopover","Templates","TEXTFIELDTEMPLATE","IMAGETEMPLATE","NUMERICTEMPLATE","COLORTEMPLATE","TEXTAREATEMPLATE","CHECKBOXTEMPLATE","SELECTTEMPLATE","_exports","constructor","userStorage","templateSrv","fileSrv","jQuery","this","storage","createContext","widget","mustSaveAll","getFromLocal","saveAllData","values","defaults","controls","parameters","map","param","createControlHTML","id","sname","key","pname","name","currentval","_saveAllData$sname","startsWith","obtainCurrentValue","idtabpane","genID","selectmode","selection","getContent","trim","length","instructions","filter","isFilter","hostId","defaultValue","markup","cleanParameterName","generalCtx","elementid","varname","vartitle","title","defaultvalue","tooltip","tip","disabled","editable","hidden","type","renderMustache","minMax","min","max","options","opt","label","value","capitalize","l","v","optionLabel","optionValue","selected","hex","alpha","toHexAlphaColor","defaultvalueAlpha","extractFormParameters","form","doStore","ctx","toPersist","forEach","cleanPname","$elem","find","val","prop","attr","is","indexOf","parseFloat","parseInt","toRgba","transform","stream","reduce","Object","keys","setToLocal","previousAllData","attachPickers","body","canShowFilePicker","getImagePicker","picker","on","async","evt","preventDefault","params","displayImagePicker","url","currentTarget","parent","ex","console","error","each","_","$inputColor","$inputRange","opacity","css","applyFieldWatchers","$formElem","defaultsData","watchedvars","updatableComponents","regex","indx","len","varobj","when","condition","t","control","push","replace","component","varsInvolved","match","evar","doUpdateVisibilities","cc","newVariables","SELECT_MODE","showme","evalInContext","theComponent","closest","show","hide","evtName","Map"],"mappings":"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"}