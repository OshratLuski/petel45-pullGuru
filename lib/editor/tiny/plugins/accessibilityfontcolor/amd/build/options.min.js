define("tiny_accessibilityfontcolor/options",["exports","editor_tiny/options","./common","./polyfill","./coloraccessibility","./colorstorage"],(function(_exports,_options,_common,_polyfill,_coloraccessibility,_colorstorage){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.register=_exports.isForecolorPickerOn=_exports.isBackcolorPickerOn=_exports.getForecolorMap=_exports.getBackcolorMap=void 0;
/**
   * Options helper for Tiny Font Color plugin.
   *
   * @module      tiny_accessibilityfontcolor
   * @copyright   2023 Luca BÃ¶sch <luca.boesch@bfh.ch>
   * @copyright   2023 Stephan Robotta <stephan.robotta@bfh.ch>
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */
const forecolorMap=(0,_options.getPluginOptionName)(_common.pluginName,"textcolors"),backcolorMap=(0,_options.getPluginOptionName)(_common.pluginName,"backgroundcolors"),forecolorPicker=(0,_options.getPluginOptionName)(_common.pluginName,"textcolorpicker"),backcolorPicker=(0,_options.getPluginOptionName)(_common.pluginName,"backgroundcolorpicker");_exports.register=editor=>{editor.options.register(forecolorMap,{processor:value=>{let processedColors=(0,_polyfill.isArrayOf)(value,_polyfill.isString)?(0,_polyfill.mapColors)(value):value;return{value:(0,_coloraccessibility.addRemoveColorIfMissing)(processedColors),valid:!0}},default:[]}),editor.options.register(backcolorMap,{processor:value=>{let processedColors=(0,_polyfill.isArrayOf)(value,_polyfill.isString)?(0,_polyfill.mapColors)(value):value;return{value:(0,_coloraccessibility.addRemoveColorIfMissing)(processedColors),valid:!0}},default:[]}),setTimeout((()=>{(0,_colorstorage.initializeColorStorage)(editor)}),500),editor.on("change",(function(){let node=editor.selection.getNode(),selectedTextColor=(0,_coloraccessibility.rgbToHex)(window.getComputedStyle(node).color),selectedBgColor=(0,_coloraccessibility.rgbToHex)(window.getComputedStyle(node).backgroundColor);if(selectedTextColor){let filteredColors=(0,_coloraccessibility.getAccessibleBackgroundColors)(selectedTextColor);editor.options.register(backcolorMap,{processor:()=>({value:filteredColors,valid:!0}),default:[]}),editor.dispatch("TextColorChange",{name:"backcolor",color:selectedBgColor})}if(selectedBgColor){let filteredColors=(0,_coloraccessibility.getAccessibleTextColors)(selectedBgColor);editor.options.register(forecolorMap,{processor:()=>({value:filteredColors,valid:!0}),default:[]}),editor.dispatch("TextColorChange",{name:"forecolor",color:selectedTextColor})}})),editor.options.register(forecolorPicker,{processor:"boolean",default:!1}),editor.options.register(backcolorPicker,{processor:"boolean",default:!1})};_exports.getForecolorMap=editor=>editor.options.get(forecolorMap);_exports.getBackcolorMap=editor=>editor.options.get(backcolorMap);_exports.isForecolorPickerOn=editor=>editor.options.get(forecolorPicker);_exports.isBackcolorPickerOn=editor=>editor.options.get(backcolorPicker)}));

//# sourceMappingURL=options.min.js.map