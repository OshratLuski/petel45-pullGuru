{"version":3,"file":"coloraccessibility.min.js","sources":["../src/coloraccessibility.js"],"sourcesContent":["import { getOriginalBackgroundColors, getOriginalTextColors } from './colorstorage';\nimport {getPluginOptionName} from 'editor_tiny/options';\nimport {pluginName} from './common';\n\nconst forecolorMap = getPluginOptionName(pluginName, 'textcolors');\nconst backcolorMap = getPluginOptionName(pluginName, 'backgroundcolors');\n\n/**\n * HEX to RGB color converter\n * @param {string} hex\n * @returns {object} {r, g, b}\n */\nfunction hexToRgb(hex) {\n\n    if (Array.isArray(hex)) {\n        hex = hex[0]?.value || \"#000000\";\n    }\n\n    if (typeof hex === \"object\" && hex !== null) {\n        hex = hex.value || \"#000000\";\n    }\n\n    if (typeof hex !== 'string') {\n        return { r: 0, g: 0, b: 0 };\n    }\n\n    hex = hex.replace(/^#/, '');\n\n    if (hex.length === 3) {\n        hex = hex.split('').map(c => c + c).join('');\n    }\n    let num = parseInt(hex, 16);\n    return {\n        r: (num >> 16) & 255,\n        g: (num >> 8) & 255,\n        b: num & 255\n    };\n}\n\n/**\n * ממיר RGB או RGBA ל-HEX בצורה יציבה\n * @param {string} rgb\n * @returns {string} צבע בפורמט HEX\n */\nexport function rgbToHex(rgb) {\n\n    if (typeof rgb !== 'string') {\n        return \"#000000\";\n    }\n\n    let result = rgb.match(/\\d+/g); // שולף את המספרים מה-RGB\n    if (!result || result.length < 3) {\n        return \"#000000\";\n    }\n\n    if (result.length === 4 && result[3] === \"0\") {\n        return \"#FFFFFF\";\n    }\n\n    return \"#\" + result.slice(0, 3).map(x => ('0' + parseInt(x).toString(16)).slice(-2)).join('');\n}\n\n/**\n * Computer color brightness (luminance)\n * @param {string} hex Color in HEX format\n * @returns {number} Brightness value (0 - dark, 1 - light)\n */\nfunction getLuminance(hex) {\n    let { r, g, b } = hexToRgb(hex);\n    let [RsRGB, GsRGB, BsRGB] = [r, g, b].map(v => v / 255);\n    let [R, G, B] = [RsRGB, GsRGB, BsRGB].map(v =>\n        v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4)\n    );\n    return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n}\n\n/**\n * Calculates contrast between two colors\n * @param {string} color1 First color (HEX)\n * @param {string} color2 Second color (HEX)\n * @returns {number} Contrast ratio\n */\nfunction getContrastRatio(color1, color2) {\n    let lum1 = getLuminance(color1);\n    let lum2 = getLuminance(color2);\n    let [L1, L2] = lum1 > lum2 ? [lum1, lum2] : [lum2, lum1];\n    return (L1 + 0.05) / (L2 + 0.05);\n}\n\n/**\n * Checks if a color combination is accessible according to the WCAG standard\n * @param {string} textColor Text color (HEX)\n * @param {string} bgColor Background color (HEX)\n * @param {string} level Accessibility level ('AA' or 'AAA')\n * @returns {boolean} Do the colors meet the standard?\n */\nfunction isAccessible(textColor, bgColor, level = 'AA') {\n    let contrast = getContrastRatio(textColor, bgColor);\n    let requiredContrast = level === 'AAA' ? 7 : 4.5;\n    return contrast >= requiredContrast;\n}\n\nexport const addRemoveColorIfMissing = (colors) => {\n    if (colors.some(color => color.value === 'remove' || color.text === 'Remove color')) {\n        return colors;\n    }\n\n    colors = colors.filter(color => color.value !== 'remove');\n\n    colors.push({\n        text: 'Remove Color',\n        icon: 'color-swatch-remove-color',\n        value: 'remove',\n        type: 'choiceitem'\n    });\n\n    return colors;\n};\n\n/**\n * Returns only background colors that are accessible with the selected text color.\n * @param {string} textColor The selected text color\n * @returns {array} List of accessible background colors\n */\nexport function getAccessibleBackgroundColors(textColor) {\n    let filteredColors = getOriginalBackgroundColors().filter(color =>\n        isAccessible(textColor, color.value, 'AA')\n    );\n\n    return addRemoveColorIfMissing(filteredColors);\n\n    // if (!filteredColors.some(color => color.value === 'remove')) {\n    //     filteredColors.push({\n    //         text: 'Remove Color',\n    //         icon: 'color-swatch-remove-color',\n    //         value: 'remove',\n    //         type: 'choiceitem'\n    //     });\n    // }\n\n    // return filteredColors;\n}\n/**\n * Returns only text colors that are accessible with the selected background color.\n * @param {string} backgroundColor The selected background color\n * @returns {array} List of accessible text colors\n */\nexport function getAccessibleTextColors(backgroundColor) {\n    // let filteredColors = [];\n\n    // if (backgroundColor === \"#FFFFFF\") {\n    //     return getOriginalTextColors();\n    // }\n\n    // filteredColors = getOriginalTextColors().filter(color =>\n    //     isAccessible(backgroundColor, color.value, 'AA')\n    // );\n\n    // if (!filteredColors.some(color => color.value === 'remove')) {\n    //     filteredColors.push({\n    //         text: 'Remove Color',\n    //         icon: 'color-swatch-remove-color',\n    //         value: 'remove',\n    //         type: 'choiceitem'\n    //     });\n    // }\n\n    // return filteredColors;\n\n    let filteredColors = backgroundColor === \"#FFFFFF\"\n        ? getOriginalTextColors()\n        : getOriginalTextColors().filter(color =>\n            isAccessible(backgroundColor, color.value, 'AA')\n        );\n\n    return addRemoveColorIfMissing(filteredColors);\n}\n\nexport const resetFilteredColors = (editor, format) => {\n    if (format === 'forecolor') {\n        const originalBackgroundColors = getOriginalBackgroundColors();\n        editor.options.register(backcolorMap, {\n            processor: () => ({\n                value: originalBackgroundColors,\n                valid: true\n            }),\n            \"default\": []\n        });\n\n        const selectedBgColor = rgbToHex(window.getComputedStyle(editor.selection.getNode()).backgroundColor);\n        if (!selectedBgColor || selectedBgColor === \"#FFFFFF\") {\n            resetFilteredColors(editor, \"backcolor\");\n        }\n\n    } else if (format === 'backcolor') {\n        const originalTextColors = getOriginalTextColors();\n        editor.options.register(forecolorMap, {\n            processor: () => ({\n                value: originalTextColors,\n                valid: true\n            }),\n            \"default\": []\n        });\n\n        const selectedTextColor = rgbToHex(window.getComputedStyle(editor.selection.getNode()).color);\n        if (!selectedTextColor || selectedTextColor === \"#000000\") {\n            resetFilteredColors(editor, \"forecolor\");\n        }\n\n    }\n};\n\n"],"names":["textColor","filteredColors","filter","color","isAccessible","value","addRemoveColorIfMissing","backgroundColor","forecolorMap","pluginName","backcolorMap","rgbToHex","rgb","result","match","length","slice","map","x","parseInt","toString","join","getLuminance","hex","r","g","b","Array","isArray","replace","split","c","num","hexToRgb","RsRGB","GsRGB","BsRGB","v","R","G","B","Math","pow","getContrastRatio","color1","color2","lum1","lum2","L1","L2","bgColor","level","contrast","requiredContrast","colors","some","text","push","icon","type","resetFilteredColors","editor","format","originalBackgroundColors","options","register","processor","valid","selectedBgColor","window","getComputedStyle","selection","getNode","originalTextColors","selectedTextColor"],"mappings":"yTA4H8CA,eACtCC,gBAAiB,+CAA8BC,QAAOC,OACtDC,aAAaJ,UAAWG,MAAME,MAAO,eAGlCC,wBAAwBL,2DAkBKM,qBAsBhCN,eAAqC,YAApBM,iBACf,0CACA,yCAAwBL,QAAOC,OAC7BC,aAAaG,gBAAiBJ,MAAME,MAAO,eAG5CC,wBAAwBL,sFA3K7BO,cAAe,gCAAoBC,mBAAY,cAC/CC,cAAe,gCAAoBD,mBAAY,6BAuCrCE,SAASC,QAEF,iBAARA,UACA,cAGPC,OAASD,IAAIE,MAAM,eAClBD,QAAUA,OAAOE,OAAS,EACpB,UAGW,IAAlBF,OAAOE,QAA8B,MAAdF,OAAO,GACvB,UAGJ,IAAMA,OAAOG,MAAM,EAAG,GAAGC,KAAIC,IAAM,IAAMC,SAASD,GAAGE,SAAS,KAAKJ,OAAO,KAAIK,KAAK,aAQrFC,aAAaC,SACdC,EAAEA,EAAFC,EAAKA,EAALC,EAAQA,YAxDEH,kBAEVI,MAAMC,QAAQL,OACdA,mBAAMA,IAAI,iCAAIlB,QAAS,WAGR,iBAARkB,KAA4B,OAARA,MAC3BA,IAAMA,IAAIlB,OAAS,WAGJ,iBAARkB,UACA,CAAEC,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAKT,KAFnBH,IAAMA,IAAIM,QAAQ,KAAM,KAEhBd,SACJQ,IAAMA,IAAIO,MAAM,IAAIb,KAAIc,GAAKA,EAAIA,IAAGV,KAAK,SAEzCW,IAAMb,SAASI,IAAK,UACjB,CACHC,EAAIQ,KAAO,GAAM,IACjBP,EAAIO,KAAO,EAAK,IAChBN,EAAS,IAANM,KAiCWC,CAASV,MACtBW,MAAOC,MAAOC,OAAS,CAACZ,EAAGC,EAAGC,GAAGT,KAAIoB,GAAKA,EAAI,OAC9CC,EAAGC,EAAGC,GAAK,CAACN,MAAOC,MAAOC,OAAOnB,KAAIoB,GACtCA,GAAK,OAAUA,EAAI,MAAQI,KAAKC,KAAKL,EAAI,MAAS,MAAO,aAEtD,MAASC,EAAI,MAASC,EAAI,MAASC,WASrCG,iBAAiBC,OAAQC,YAC1BC,KAAOxB,aAAasB,QACpBG,KAAOzB,aAAauB,SACnBG,GAAIC,IAAMH,KAAOC,KAAO,CAACD,KAAMC,MAAQ,CAACA,KAAMD,aAC3CE,GAAK,MAASC,GAAK,cAUtB7C,aAAaJ,UAAWkD,aAASC,6DAAQ,KAC1CC,SAAWT,iBAAiB3C,UAAWkD,SACvCG,iBAA6B,QAAVF,MAAkB,EAAI,WACtCC,UAAYC,uBAGV/C,wBAA2BgD,SAChCA,OAAOC,MAAKpD,OAAyB,WAAhBA,MAAME,OAAqC,iBAAfF,MAAMqD,SAI3DF,OAASA,OAAOpD,QAAOC,OAAyB,WAAhBA,MAAME,SAE/BoD,KAAK,CACRD,KAAM,eACNE,KAAM,4BACNrD,MAAO,SACPsD,KAAM,eATCL,uEA0EFM,oBAAsB,CAACC,OAAQC,aACzB,cAAXA,OAAwB,OAClBC,0BAA2B,+CACjCF,OAAOG,QAAQC,SAASvD,aAAc,CAClCwD,UAAW,MACP7D,MAAO0D,yBACPI,OAAO,YAEA,WAGTC,gBAAkBzD,SAAS0D,OAAOC,iBAAiBT,OAAOU,UAAUC,WAAWjE,iBAChF6D,iBAAuC,YAApBA,iBACpBR,oBAAoBC,OAAQ,kBAG7B,GAAe,cAAXC,OAAwB,OACzBW,oBAAqB,yCAC3BZ,OAAOG,QAAQC,SAASzD,aAAc,CAClC0D,UAAW,MACP7D,MAAOoE,mBACPN,OAAO,YAEA,WAGTO,kBAAoB/D,SAAS0D,OAAOC,iBAAiBT,OAAOU,UAAUC,WAAWrE,OAClFuE,mBAA2C,YAAtBA,mBACtBd,oBAAoBC,OAAQ"}