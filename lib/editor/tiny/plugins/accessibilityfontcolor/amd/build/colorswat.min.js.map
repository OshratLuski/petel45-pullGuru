{"version":3,"file":"colorswat.min.js","sources":["../src/colorswat.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Color palette setter for Tiny Font Color plugin.\n * This code is mostly reused from the TinyMCE silver theme. However, this\n * code is enhanced to have two different color maps for background and\n * text color. Also, the option to enable or disable custom colors\n * via a colorpicker can be set independently on both text- and\n * background color. If the colorpicker is disabled and the color\n * map is empty for one of the text- or background color, the menu entry as\n * well as the toolbar button will not appear in the editor.\n *\n * @module      tiny_accessibilityfontcolor\n * @copyright   2023 Luca BÃ¶sch <luca.boesch@bfh.ch>\n * @copyright   2023 Stephan Robotta <stephan.robotta@bfh.ch>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// ESLint directives.\n\nimport * as pf from './polyfill';\nimport {getBackcolorMap, getForecolorMap, isBackcolorPickerOn, isForecolorPickerOn} from './options';\nimport {forecolor, backcolor} from './common';\nimport {isHexString, isNullable} from \"./polyfill\";\nimport {resetFilteredColors} from './coloraccessibility';\n\nlet global$4 = localStorage;\n\nconst map$2 = (xs, f) => {\n  const len = xs.length;\n  const r = new Array(len);\n  for (let i = 0; i < len; i++) {\n    const x = xs[i];\n    r[i] = f(x, i);\n  }\n  return r;\n};\n\nconst Label = () => {\n  let labels;\n  const register = txt => {\n    labels = txt;\n  };\n  const get = (name, ...args) => {\n    let val = !isNullable(labels[name]) ? labels[name] : name;\n    if (!isNullable(args)) {\n      for (let x = 0; x < args.length; x++) {\n        val = val.replace('{' + x + '}', args[x]);\n      }\n    }\n    return val;\n  };\n  return {\n    get,\n    register,\n  };\n};\n// eslint-disable-next-line\nconst labels = Label();\n\nconst Cell = initial => {\n  let value = initial;\n  const get = () => {\n    return value;\n  };\n  const set = v => {\n    value = v;\n  };\n  return {\n    get,\n    set\n  };\n};\n\nconst fireTextColorChange = (editor, data) => {\n  editor.dispatch('TextColorChange', data);\n};\n\nconst storageName = 'tinymce-custom-colors';\nconst ColorCache = (max = 10, suffix = '') => {\n  const storageString = global$4.getItem(storageName + suffix);\n  const localstorage = pf.isString(storageString) ? JSON.parse(storageString) : [];\n  const prune = list => {\n    const diff = max - list.length;\n    return diff < 0 ? list.slice(0, max) : list;\n  };\n  const cache = prune(localstorage);\n  const add = key => {\n    pf.indexOf(cache, key).each(remove);\n    cache.unshift(key);\n    if (cache.length > max) {\n      cache.pop();\n    }\n    global$4.setItem(storageName, JSON.stringify(cache));\n  };\n  const remove = idx => {\n    cache.splice(idx, 1);\n  };\n  const state = () => cache.slice(0);\n  return {\n    add,\n    state\n  };\n};\n\n// eslint-disable-next-line\nconst colorCache = ColorCache(10);\n// eslint-disable-next-line\nconst colorCacheBg = ColorCache(10, '-background');\n\nconst option$1 = name => editor => editor.options.get(name);\n\nconst getColorCols$1 = option$1('color_cols');\nconst getColors$3 = (editor, name) => {\n  if (name === forecolor) {\n    return getForecolorMap(editor);\n  }\n  return getBackcolorMap(editor);\n};\n/* eslint-disable no-unused-vars */\nconst getCurrentColors = (type) => map$2(type === forecolor ? colorCache.state() : colorCacheBg.state(), color => ({\n  type: 'choiceitem',\n  text: color,\n  value: color\n}));\nconst addColor = color => {\n  colorCache.add(color);\n};\n/* eslint-enable no-unused-vars */\n\nconst fallbackColor = '#000000';\nconst hasStyleApi = node => pf.isNonNullable(node.style);\nconst getCurrentColor = (editor, format) => {\n  let color;\n  editor.dom.getParents(editor.selection.getStart(), elm => {\n    const value = hasStyleApi(elm) ? elm.style[format === forecolor ? 'color' : 'backgroundColor'] : null;\n    if (value) {\n      color = color ? color : value;\n    }\n  });\n  return pf.Optional.from(color);\n};\nconst applyFormat = (editor, format, value) => {\n  editor.undoManager.transact(() => {\n    editor.focus();\n    editor.formatter.apply(format, {value});\n    editor.nodeChanged();\n  });\n};\nconst removeFormat = (editor, format) => {\n  editor.undoManager.transact(() => {\n    editor.focus();\n    editor.formatter.remove(format, {value: null}, undefined, true);\n    editor.nodeChanged();\n  });\n};\nconst registerLabels = txt => {\n    labels.register(txt);\n};\nconst registerCommands = editor => {\n  editor.addCommand('mceApplyTextcolor', (format, value) => {\n    applyFormat(editor, format, value);\n  });\n  editor.addCommand('mceRemoveTextcolor', format => {\n    removeFormat(editor, format);\n  });\n};\n/* eslint-disable no-unused-vars */\nconst getAdditionalColors = hasCustom => {\n  const type = 'choiceitem';\n  const remove = {\n    type,\n    text: labels.get('removeColor'),\n    icon: 'color-swatch-remove-color',\n    value: 'remove'\n  };\n  const custom = {\n    type,\n    text: labels.get('customColor'),\n    icon: 'color-picker',\n    value: 'custom'\n  };\n  return hasCustom ? [\n    remove,\n    custom\n  ] : [remove];\n};\n/* eslint-enable no-unused-vars */\nconst applyColor = (editor, format, value, onChoice) => {\n  if (value === 'custom') {\n    const dialog = colorPickerDialog(editor);\n    dialog(colorOpt => {\n      colorOpt.each(color => {\n        addColor(color);\n        editor.execCommand('mceApplyTextcolor', format, color);\n        onChoice(color);\n      });\n    }, fallbackColor);\n  } else if (value === 'remove') {\n    onChoice('');\n    editor.execCommand('mceRemoveTextcolor', format);\n    resetFilteredColors(editor, format);\n  } else {\n    onChoice(value);\n    editor.execCommand('mceApplyTextcolor', format, value);\n  }\n};\n\n// const getColors$1 = (colors, hasCustom, type) => colors.concat(getCurrentColors(type).concat(getAdditionalColors(hasCustom)));\n// const getFetch$1 = (colors, hasCustom, type) => callback => {\n//   callback(getColors$1(colors, hasCustom, type));\n// };\n\nconst setIconColor = (splitButtonApi, name, newColor) => {\n  const id = name === forecolor ? 'tox-icon-text-color__color' : 'tox-icon-highlight-bg-color__color';\n  splitButtonApi.setIconFill(id, newColor);\n};\n\nconst registerTextColorButton = (editor, name, format, tooltip, lastColor) => {\n  let iconName;\n  if (name === forecolor) {\n    iconName = 'text-color';\n    // hasCustom = isForecolorPickerOn(editor);\n  } else {\n    iconName = 'highlight-bg-color';\n    // hasCustom = isBackcolorPickerOn(editor);\n  }\n  editor.ui.registry.addSplitButton(name, {\n    tooltip,\n    presets: 'color',\n    icon: iconName,\n    select: value => {\n      const optCurrentRgb = getCurrentColor(editor, format);\n      return optCurrentRgb.bind(currentRgb => pf.fromString(currentRgb).map(rgba => {\n        const currentHex = pf.fromRgba(rgba).value;\n        return pf.contains$1(value.toLowerCase(), currentHex);\n      })).getOr(false);\n    },\n    columns: getColorCols$1(editor),\n    // fetch: getFetch$1(getColors$3(editor, name), hasCustom, name),\n    fetch: callback => {\n      let colors = name === forecolor ? getForecolorMap(editor) : getBackcolorMap(editor);\n      if (!Array.isArray(colors)) {\n        colors = [];\n      }\n      callback(colors);\n    },\n    onAction: () => {\n      applyColor(editor, format, lastColor.get(), pf.noop);\n    },\n    onItemAction: (_splitButtonApi, value) => {\n      applyColor(editor, format, value, newColor => {\n        lastColor.set(newColor);\n        fireTextColorChange(editor, {\n          name,\n          color: newColor\n        });\n      });\n    },\n    onSetup: splitButtonApi => {\n      setIconColor(splitButtonApi, name, lastColor.get());\n      const handler = e => {\n        if (e.name === name) {\n          setIconColor(splitButtonApi, e.name, e.color);\n        }\n      };\n      editor.on('TextColorChange', handler);\n      return () => {\n        editor.off('TextColorChange', handler);\n      };\n    }\n  });\n};\n\nconst registerTextColorMenuItem = (editor, name, format, text) => {\n  editor.ui.registry.addNestedMenuItem(name, {\n    text,\n    icon: name === forecolor ? 'text-color' : 'highlight-bg-color',\n    getSubmenuItems: () => [{\n      type: 'fancymenuitem',\n      fancytype: 'colorswatch',\n      initData: {\n        allowCustomColors: false,\n        colors: getColors$3(editor, name),\n      },\n      onAction: data => {\n        applyColor(editor, format, data.value, pf.noop);\n      }\n    }]\n  });\n};\n\nconst colorPickerDialog = editor => (callback, value) => {\n  const onSubmit = api => {\n    const data = api.getData();\n    const hex = data.colorpicker;\n    const err = document.querySelector('.dlg-color-picker-error');\n    let isValid = true;\n    err.parentNode.parentNode.querySelectorAll('input').forEach((i, x) => {\n      if (x < 3) {\n        const m = ['R', 'G', 'B'];\n        const r = parseInt(i.value);\n        if (!i.value.match(/^\\d{1,3}$/) || r < 0 || r > 255) {\n          err.innerHTML = labels.get('colorPickerErrRgbCode', m[x] + ' = ' + i.value);\n          i.focus();\n          isValid = false;\n        }\n      } else if (!isHexString('#' + i.value)) {\n        err.innerHTML = labels.get('colorPickerErrHexCode', hex);\n        i.focus();\n        isValid = false;\n      }\n    });\n    if (isValid) {\n      callback(pf.Optional.from(hex));\n      api.close();\n    } else {\n      err.classList.remove('hidden');\n      err.classList.add('alert');\n    }\n  };\n  const initialData = {colorpicker: value};\n  editor.windowManager.open({\n    title: labels.get('colorPickerTitle'),\n    size: 'normal',\n    body: {\n      type: 'panel',\n      items: [{\n        type: 'htmlpanel',\n        html: '<span class=\"dlg-color-picker-error hidden\"></span>',\n      }, {\n        type: 'colorpicker',\n        name: 'colorpicker',\n        label: labels.get('colorPickerColor'),\n      }]\n    },\n    buttons: [\n      {\n        type: 'cancel',\n        name: 'cancel',\n        text: labels.get('colorPickerCancel'),\n      },\n      {\n        type: 'submit',\n        name: 'save',\n        text: labels.get('colorPickerSave'),\n        primary: true\n      }\n    ],\n    initialData,\n    onSubmit,\n    onClose: pf.noop,\n    onCancel: () => {\n      callback(pf.Optional.none());\n    }\n  });\n};\nconst register$c = (editor, txt) => {\n  if (!isForecolorPickerOn(editor) && !isBackcolorPickerOn(editor)\n    && getForecolorMap(editor).length === 0 && getBackcolorMap(editor).length === 0) {\n    return;\n  }\n  registerLabels(txt);\n  registerCommands(editor);\n  if (isForecolorPickerOn(editor) || getForecolorMap(editor).length > 0) {\n    // eslint-disable-next-line\n    const lastForeColor = Cell(fallbackColor);\n    registerTextColorButton(editor, forecolor, 'forecolor', labels.get('btnFgColor'), lastForeColor);\n    registerTextColorMenuItem(editor, forecolor, 'forecolor', labels.get('menuItemFgcolor'));\n  }\n  if (isBackcolorPickerOn(editor) || getBackcolorMap(editor).length > 0) {\n    // eslint-disable-next-line\n    const lastBackColor = Cell(fallbackColor);\n    registerTextColorButton(editor, backcolor, 'hilitecolor', labels.get('btnBgcolor'), lastBackColor);\n    registerTextColorMenuItem(editor, backcolor, 'hilitecolor', labels.get('menuItemBgcolor'));\n  }\n\n};\n\nexport {\n  register$c,\n};"],"names":["global$4","localStorage","labels","get","name","val","args","x","length","replace","register","txt","Label","Cell","initial","value","set","v","storageName","ColorCache","max","suffix","storageString","getItem","localstorage","pf","isString","JSON","parse","prune","list","slice","cache","add","key","indexOf","each","remove","unshift","pop","setItem","stringify","idx","splice","state","colorCache","getColorCols$1","editor","options","getColors$3","forecolor","getCurrentColor","format","color","dom","getParents","selection","getStart","elm","node","isNonNullable","style","Optional","from","applyColor","onChoice","colorPickerDialog","dialog","colorOpt","addColor","execCommand","setIconColor","splitButtonApi","newColor","id","setIconFill","registerTextColorButton","tooltip","lastColor","iconName","ui","registry","addSplitButton","presets","icon","select","bind","currentRgb","fromString","map","rgba","currentHex","fromRgba","contains$1","toLowerCase","getOr","columns","fetch","callback","colors","Array","isArray","onAction","noop","onItemAction","_splitButtonApi","data","dispatch","fireTextColorChange","onSetup","handler","e","on","off","registerTextColorMenuItem","text","addNestedMenuItem","getSubmenuItems","type","fancytype","initData","allowCustomColors","initialData","colorpicker","windowManager","open","title","size","body","items","html","label","buttons","primary","onSubmit","api","hex","getData","err","document","querySelector","isValid","parentNode","querySelectorAll","forEach","i","m","r","parseInt","match","innerHTML","focus","close","classList","onClose","onCancel","none","registerLabels","addCommand","undoManager","transact","formatter","apply","nodeChanged","applyFormat","undefined","removeFormat","registerCommands","lastForeColor","lastBackColor","backcolor"],"mappings":"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"}