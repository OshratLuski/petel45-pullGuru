{"version":3,"file":"plugin.min.js","sources":["../src/plugin.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Plugin version and other meta-data are defined here.\n *\n * @module     tiny_styles/plugin\n * @copyright   2025 Oshrat Luski <oshrat.luski@weizmann.ac.il>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getTinyMCE} from 'editor_tiny/loader';\nimport {pluginName, component} from './common';\nimport * as Configuration from './configuration';\nimport {getPluginMetadata} from 'editor_tiny/utils';\nimport {getSetupCommands} from './commands';\nimport {register as registerOptions} from './options';\n\n// Setup the tiny_accessibilityfontcolor plugin.\n// eslint-disable-next-line no-async-promise-executor\nexport default new Promise(async(resolve) => {\n    // Note: The PluginManager.add function does not support asynchronous configuration.\n    // Perform any asynchronous configuration here, and then call the PluginManager.add function.\n    const [\n        tinyMCE,\n        setupCommands,\n        pluginMetadata,\n    ] = await Promise.all([\n        getTinyMCE(),\n        getSetupCommands(),\n        getPluginMetadata(component, pluginName),\n    ]);\n\n    // Reminder: Any asynchronous code must be run before this point.\n    tinyMCE.PluginManager.add(pluginName, (editor) => {\n\n        // Load the custom CSS file into the TinyMCE iframe.\n        const styles = editor.contentCSS.push(M.cfg.wwwroot + '/lib/editor/tiny/plugins/styles/styles.css');\n\n        // Register options first\n        registerOptions(editor);\n\n        const pluginConfig = {\n            styles,\n        };\n\n        // Register options.\n        editor.plugins[component] = pluginConfig;\n\n        // Setup commands\n        setupCommands(editor);\n\n        // Return pluginMetadata + config so getParam('styles') works\n        return {\n            ...pluginMetadata,\n            ...pluginConfig\n        };\n    });\n\n    resolve([pluginName, Configuration]);\n});\n"],"names":["Promise","async","tinyMCE","setupCommands","pluginMetadata","all","component","pluginName","PluginManager","add","editor","styles","contentCSS","push","M","cfg","wwwroot","pluginConfig","plugins","resolve","Configuration"],"mappings":";;;;;;;kCAgCe,IAAIA,SAAQC,MAAAA,gBAInBC,QACAC,cACAC,sBACMJ,QAAQK,IAAI,EAClB,yBACA,iCACA,4BAAkBC,kBAAWC,sBAIjCL,QAAQM,cAAcC,IAAIF,oBAAaG,eAG7BC,OAASD,OAAOE,WAAWC,KAAKC,EAAEC,IAAIC,QAAU,oEAGtCN,cAEVO,aAAe,CACjBN,OAAAA,eAIJD,OAAOQ,QAAQZ,mBAAaW,aAG5Bd,cAAcO,QAGP,IACAN,kBACAa,iBAIXE,QAAQ,CAACZ,mBAAYa"}