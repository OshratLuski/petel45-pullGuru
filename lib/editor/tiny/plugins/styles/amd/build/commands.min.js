define("tiny_styles/commands",["exports","./common","editor_tiny/utils","core/str","./styleactions","./options"],(function(_exports,_common,_utils,_str,_styleactions,_options){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.getSetupCommands=void 0;_exports.getSetupCommands=async()=>{const[buttonText,buttonImage,clearstyle]=await Promise.all([(0,_str.getString)("buttontitle",_common.component),(0,_utils.getButtonImage)("icon",_common.component),(0,_str.getString)("clearstyle",_common.component)]),clearAttostylesboxStyles=editor=>{const currentNode=editor.selection.getNode(),targetDiv=editor.dom.getParent(currentNode,(node=>"DIV"===node.nodeName&&node.classList&&[...node.classList].some((c=>c.startsWith("attostylesbox")))));if(targetDiv){const remainingClasses=[...targetDiv.classList].filter((c=>!c.startsWith("attostylesbox")));targetDiv.removeAttribute("class"),remainingClasses.length&&(targetDiv.className=remainingClasses.join(" "))}},buildMenuItems=(editor,styles,clearstyle)=>styles.map((style=>({type:"menuitem",text:style.title,onAction:()=>(0,_styleactions.applyStyle)(editor,style.classes.split(" "))})));return editor=>{const styles=(0,_options.getStyles)(editor)||[];editor.ui.registry.addIcon(_common.buttonIcon,buttonImage.html),editor.ui.registry.addButton(_common.buttonName,{icon:_common.buttonIcon,tooltip:buttonText,onAction:()=>{}}),editor.ui.registry.addMenuButton(_common.buttonName,{icon:_common.buttonIcon,tooltip:buttonText,fetch:callback=>{callback(buildMenuItems(editor,styles))}}),editor.ui.registry.addNestedMenuItem(_common.buttonName,{icon:_common.buttonIcon,text:buttonText,getSubmenuItems:()=>buildMenuItems(editor,styles)}),editor.addShortcut("alt+shift+c","Clear style",(()=>{clearAttostylesboxStyles(editor)}));let lastEnterTime=0;editor.on("keydown",(e=>{if(13===e.keyCode){const currentTime=Date.now();currentTime-lastEnterTime<300&&clearAttostylesboxStyles(editor),lastEnterTime=currentTime}}));["\n            .tiny-styles-menu.tox-collection.tox-collection--list {\n                min-width: 300px !important;\n            }\n\n            .tiny-styles-menu .tox-collection__item-label {\n                white-space: normal !important;\n                word-break: break-word;\n                display: flex !important;\n                align-items: center !important;\n                gap: 8px !important;\n            }\n            ","\n            .tiny-style-icon {\n                display: inline-block;\n                flex-shrink: 0 !important;\n            }\n            ","\n            .attostylesbox {\n                display: inline-block;\n                padding: 6px 10px !important;\n            }\n            ","\n            .tox-collection__item--active {\n                background-color: #f5f5f5 !important;\n                color: black !important;\n                border-radius: 4px;\n            }\n            ",'\n            /* Make the styles plugin icon smaller to match other toolbar icons */\n            .tox-toolbar .tox-tbtn[aria-label*="Style"] svg,\n            .tox-toolbar .tox-tbtn[aria-label*="עיצוב"] svg {\n                width: 16px !important;\n                height: 16px !important;\n            }\n            \n            .tox-toolbar .tox-tbtn[aria-label*="Style"] image,\n            .tox-toolbar .tox-tbtn[aria-label*="עיצוב"] image {\n                width: 16px !important;\n                height: 16px !important;\n            }\n            '].forEach((css=>{const style=document.createElement("style");style.innerHTML=css,document.head.appendChild(style)}));const observer=new MutationObserver((mutations=>{mutations.forEach((mutation=>{mutation.addedNodes.forEach((node=>{if(1===node.nodeType&&((node,styles)=>!!node.classList.contains("tox-menu")&&[...node.querySelectorAll(".tox-collection__item-label")].some((label=>styles.some((style=>label.textContent===style.title)))))(node,styles)){node.classList.add("tiny-styles-menu");node.querySelectorAll(".tox-collection__item-label").forEach(((label,index)=>{const text=label.textContent;label.innerHTML="";const iconWrapper=document.createElement("div");iconWrapper.classList.add("tiny-style-icon"),iconWrapper.innerHTML=buttonImage.html;const image=iconWrapper.querySelector("image");image&&image.setAttribute("style","width: 15px; height: 15px;");const div=document.createElement("div"),style=styles[index-1];null!=style&&style.classes&&div.classList.add(...style.classes.split(" "));const textNode=document.createTextNode(text);div.appendChild(textNode),label.appendChild(iconWrapper),label.appendChild(div)}))}}))}))}));observer.observe(document.body,{childList:!0,subtree:!0})}}}));

//# sourceMappingURL=commands.min.js.map