{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Plugin version and other meta-data are defined here.\n *\n * @module     tiny_styles/commands\n * @copyright   2025 Oshrat Luski <oshrat.luski@weizmann.ac.il>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {component, buttonName, buttonIcon} from './common';\nimport {getButtonImage} from 'editor_tiny/utils';\nimport {getString} from 'core/str';\nimport {applyStyle} from './styleactions';\nimport {getStyles} from './options';\n\nexport const getSetupCommands = async () => {\n\n    const [buttonText, buttonImage, clearstyle] = await Promise.all([\n        getString('buttontitle', component),\n        getButtonImage('icon', component),\n        getString('clearstyle', component),\n    ]);\n\n    // Helper function to clear attostylesbox styles\n    const clearAttostylesboxStyles = (editor) => {\n        const currentNode = editor.selection.getNode();\n        const targetDiv = editor.dom.getParent(currentNode, (node) =>\n            node.nodeName === 'DIV' &&\n            node.classList &&\n            [...node.classList].some(c => c.startsWith('attostylesbox'))\n        );\n\n        if (targetDiv) {\n            const remainingClasses = [...targetDiv.classList].filter(\n                c => !c.startsWith('attostylesbox')\n            );\n            targetDiv.removeAttribute('class');\n            if (remainingClasses.length) {\n                targetDiv.className = remainingClasses.join(' ');\n            }\n        }\n    };\n\n    const buildMenuItems = (editor, styles, clearstyle) => {\n        const items = styles.map(style => ({\n            type: 'menuitem',\n            text: style.title,\n            onAction: () => applyStyle(editor, style.classes.split(' '))\n        }));\n\n        return items;\n    };\n\n    return (editor) => {\n        const styles = getStyles(editor) || [];\n\n        editor.ui.registry.addIcon(buttonIcon, buttonImage.html);\n\n        editor.ui.registry.addButton(buttonName, {\n            icon: buttonIcon,\n            tooltip: buttonText,\n            onAction: () => {\n                // No action needed for now; just shows icon in toolbar\n            }\n        });\n\n        editor.ui.registry.addMenuButton(buttonName, {\n            icon: buttonIcon,\n            tooltip: buttonText,\n            fetch: (callback) => {\n                callback(buildMenuItems(editor, styles, clearstyle));\n            }\n        });\n\n        editor.ui.registry.addNestedMenuItem(buttonName, {\n            icon: buttonIcon,\n            text: buttonText,\n            getSubmenuItems: () => buildMenuItems(editor, styles, clearstyle)\n        });\n\n        // Add keyboard shortcuts\n        editor.addShortcut('alt+shift+c', 'Clear style', () => {\n            clearAttostylesboxStyles(editor);\n        });\n\n        // Override Enter key behavior to clear styles on double Enter\n        let lastEnterTime = 0;\n        editor.on('keydown', (e) => {\n            if (e.keyCode === 13) { // Enter key\n                const currentTime = Date.now();\n                if (currentTime - lastEnterTime < 300) { // Double Enter within 300ms\n                    clearAttostylesboxStyles(editor);\n                }\n                lastEnterTime = currentTime;\n            }\n        });\n\n        const globalStyles = [\n            `\n            .tiny-styles-menu.tox-collection.tox-collection--list {\n                min-width: 300px !important;\n            }\n\n            .tiny-styles-menu .tox-collection__item-label {\n                white-space: normal !important;\n                word-break: break-word;\n                display: flex !important;\n                align-items: center !important;\n                gap: 8px !important;\n            }\n            `,\n            `\n            .tiny-style-icon {\n                display: inline-block;\n                flex-shrink: 0 !important;\n            }\n            `,\n            `\n            .attostylesbox {\n                display: inline-block;\n                padding: 6px 10px !important;\n            }\n            `,\n            `\n            .tox-collection__item--active {\n                background-color: #f5f5f5 !important;\n                color: black !important;\n                border-radius: 4px;\n            }\n            `,\n            `\n            /* Make the styles plugin icon smaller to match other toolbar icons */\n            .tox-toolbar .tox-tbtn[aria-label*=\"Style\"] svg,\n            .tox-toolbar .tox-tbtn[aria-label*=\"עיצוב\"] svg {\n                width: 16px !important;\n                height: 16px !important;\n            }\n            \n            .tox-toolbar .tox-tbtn[aria-label*=\"Style\"] image,\n            .tox-toolbar .tox-tbtn[aria-label*=\"עיצוב\"] image {\n                width: 16px !important;\n                height: 16px !important;\n            }\n            `\n        ];\n\n        globalStyles.forEach(css => {\n            const style = document.createElement('style');\n            style.innerHTML = css;\n            document.head.appendChild(style);\n        });\n\n        const isTinyStylesMenu = (node, styles) => {\n            if (!node.classList.contains('tox-menu')) {\n                return false;\n            }\n\n            const labels = node.querySelectorAll('.tox-collection__item-label');\n            return [...labels].some(label =>\n                styles.some(style => label.textContent === style.title)\n            );\n        };\n\n        const observer = new MutationObserver((mutations) => {\n            mutations.forEach(mutation => {\n                mutation.addedNodes.forEach(node => {\n                    if (node.nodeType === 1 && isTinyStylesMenu(node, styles)) {\n                        node.classList.add('tiny-styles-menu');\n                        const items = node.querySelectorAll('.tox-collection__item-label');\n\n                        items.forEach((label, index) => {\n                            const text = label.textContent;\n                            label.innerHTML = '';\n\n                            const iconWrapper = document.createElement('div');\n                            iconWrapper.classList.add('tiny-style-icon');\n                            iconWrapper.innerHTML = buttonImage.html;\n\n                            const image = iconWrapper.querySelector('image');\n                            if (image) {\n                                image.setAttribute('style', 'width: 15px; height: 15px;');\n                            }\n\n                            const div = document.createElement('div');\n                            const style = styles[index - 1];\n                            if (style?.classes) {\n                                div.classList.add(...style.classes.split(' '));\n                            }\n\n                            const textNode = document.createTextNode(text);\n                            div.appendChild(textNode);\n\n                            label.appendChild(iconWrapper);\n                            label.appendChild(div);\n\n                        });\n                    }\n                });\n            });\n        });\n\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n    };\n};\n"],"names":["async","buttonText","buttonImage","clearstyle","Promise","all","component","clearAttostylesboxStyles","editor","currentNode","selection","getNode","targetDiv","dom","getParent","node","nodeName","classList","some","c","startsWith","remainingClasses","filter","removeAttribute","length","className","join","buildMenuItems","styles","map","style","type","text","title","onAction","classes","split","ui","registry","addIcon","buttonIcon","html","addButton","buttonName","icon","tooltip","addMenuButton","fetch","callback","addNestedMenuItem","getSubmenuItems","addShortcut","lastEnterTime","on","e","keyCode","currentTime","Date","now","forEach","css","document","createElement","innerHTML","head","appendChild","observer","MutationObserver","mutations","mutation","addedNodes","nodeType","contains","querySelectorAll","label","textContent","isTinyStylesMenu","add","index","iconWrapper","image","querySelector","setAttribute","div","textNode","createTextNode","observe","body","childList","subtree"],"mappings":"mSA6BgCA,gBAErBC,WAAYC,YAAaC,kBAAoBC,QAAQC,IAAI,EAC5D,kBAAU,cAAeC,oBACzB,yBAAe,OAAQA,oBACvB,kBAAU,aAAcA,qBAItBC,yBAA4BC,eACxBC,YAAcD,OAAOE,UAAUC,UAC/BC,UAAYJ,OAAOK,IAAIC,UAAUL,aAAcM,MAC/B,QAAlBA,KAAKC,UACLD,KAAKE,WACL,IAAIF,KAAKE,WAAWC,MAAKC,GAAKA,EAAEC,WAAW,wBAG3CR,UAAW,OACLS,iBAAmB,IAAIT,UAAUK,WAAWK,QAC9CH,IAAMA,EAAEC,WAAW,mBAEvBR,UAAUW,gBAAgB,SACtBF,iBAAiBG,SACjBZ,UAAUa,UAAYJ,iBAAiBK,KAAK,QAKlDC,eAAiB,CAACnB,OAAQoB,OAAQzB,aACtByB,OAAOC,KAAIC,SACrBC,KAAM,WACNC,KAAMF,MAAMG,MACZC,SAAU,KAAM,4BAAW1B,OAAQsB,MAAMK,QAAQC,MAAM,iBAMvD5B,eACEoB,QAAS,sBAAUpB,SAAW,GAEpCA,OAAO6B,GAAGC,SAASC,QAAQC,mBAAYtC,YAAYuC,MAEnDjC,OAAO6B,GAAGC,SAASI,UAAUC,mBAAY,CACrCC,KAAMJ,mBACNK,QAAS5C,WACTiC,SAAU,SAKd1B,OAAO6B,GAAGC,SAASQ,cAAcH,mBAAY,CACzCC,KAAMJ,mBACNK,QAAS5C,WACT8C,MAAQC,WACJA,SAASrB,eAAenB,OAAQoB,YAIxCpB,OAAO6B,GAAGC,SAASW,kBAAkBN,mBAAY,CAC7CC,KAAMJ,mBACNR,KAAM/B,WACNiD,gBAAiB,IAAMvB,eAAenB,OAAQoB,UAIlDpB,OAAO2C,YAAY,cAAe,eAAe,KAC7C5C,yBAAyBC,eAIzB4C,cAAgB,EACpB5C,OAAO6C,GAAG,WAAYC,OACA,KAAdA,EAAEC,QAAgB,OACZC,YAAcC,KAAKC,MACrBF,YAAcJ,cAAgB,KAC9B7C,yBAAyBC,QAE7B4C,cAAgBI,gBAIH,g/CAiDRG,SAAQC,YACX9B,MAAQ+B,SAASC,cAAc,SACrChC,MAAMiC,UAAYH,IAClBC,SAASG,KAAKC,YAAYnC,gBAcxBoC,SAAW,IAAIC,kBAAkBC,YACnCA,UAAUT,SAAQU,WACdA,SAASC,WAAWX,SAAQ5C,UACF,IAAlBA,KAAKwD,UAdI,EAACxD,KAAMa,WACvBb,KAAKE,UAAUuD,SAAS,aAKtB,IADQzD,KAAK0D,iBAAiB,gCAClBvD,MAAKwD,OACpB9C,OAAOV,MAAKY,OAAS4C,MAAMC,cAAgB7C,MAAMG,UAOlB2C,CAAiB7D,KAAMa,QAAS,CACvDb,KAAKE,UAAU4D,IAAI,oBACL9D,KAAK0D,iBAAiB,+BAE9Bd,SAAQ,CAACe,MAAOI,eACZ9C,KAAO0C,MAAMC,YACnBD,MAAMX,UAAY,SAEZgB,YAAclB,SAASC,cAAc,OAC3CiB,YAAY9D,UAAU4D,IAAI,mBAC1BE,YAAYhB,UAAY7D,YAAYuC,WAE9BuC,MAAQD,YAAYE,cAAc,SACpCD,OACAA,MAAME,aAAa,QAAS,oCAG1BC,IAAMtB,SAASC,cAAc,OAC7BhC,MAAQF,OAAOkD,MAAQ,GACzBhD,MAAAA,OAAAA,MAAOK,SACPgD,IAAIlE,UAAU4D,OAAO/C,MAAMK,QAAQC,MAAM,YAGvCgD,SAAWvB,SAASwB,eAAerD,MACzCmD,IAAIlB,YAAYmB,UAEhBV,MAAMT,YAAYc,aAClBL,MAAMT,YAAYkB,kBAQtCjB,SAASoB,QAAQzB,SAAS0B,KAAM,CAC5BC,WAAW,EACXC,SAAS"}