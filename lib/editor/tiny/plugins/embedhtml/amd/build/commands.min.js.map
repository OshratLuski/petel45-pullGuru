{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Commands helper for the Moodle tiny_embedhtml plugin.\r\n *\r\n * @module      tiny_embedhtml/commands\r\n * @copyright   2025 Nadav Kavalerchik <nadav.kavalerchik@weizmann.ac.il>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {getButtonImage} from 'editor_tiny/utils';\r\nimport {get_string as getString} from 'core/str';\r\nimport {\r\n    component,\r\n    icon\r\n} from './common';\r\n\r\n/**\r\n * Handle the action for your plugin.\r\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\r\n */\r\nconst uploadHTMLFileDialog = (editor) => {\r\n    const input = document.createElement('input');\r\n    input.type = 'file';\r\n    input.accept = '.html';\r\n\r\n    input.onchange = async () => {\r\n        const file = input.files[0];\r\n        if (!file) return;\r\n\r\n        const formData = new FormData();\r\n        // formData.append('contextid', window.contextid);\r\n        formData.append('file', file);\r\n        formData.append('sesskey', M.cfg.sesskey);\r\n        formData.append('courseid', M.cfg.courseId);\r\n\r\n        try {\r\n            const response = await fetch(M.cfg.wwwroot + '/lib/editor/tiny/plugins/embedhtml/ajax.php', {\r\n                method: 'POST',\r\n                body: formData,\r\n                credentials: 'same-origin'\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (result.url) {\r\n                editor.insertContent(`<iframe src=\"${result.url}\" width=\"100%\" height=\"400\" frameborder=\"0\"></iframe>`);\r\n            } else {\r\n                window.alert('Upload failed: ' + result.error);\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    input.click();\r\n};\r\n\r\n/**\r\n * Get the setup function for the buttons.\r\n *\r\n * This is performed in an async function which ultimately returns the registration function as the\r\n * Tiny.AddOnManager.Add() function does not support async functions.\r\n *\r\n * @returns {function} The registration function to call within the Plugin.add function.\r\n */\r\nexport const getSetup = async() => {\r\n    const [\r\n        buttonImage,\r\n        buttonTitle\r\n    ] = await Promise.all([\r\n        getButtonImage('icon', component),\r\n        getString('pluginname', component)\r\n    ]);\r\n\r\n    return (editor) => {\r\n        // Register the Moodle SVG as an icon suitable for use as a TinyMCE toolbar button.\r\n        editor.ui.registry.addIcon(icon, buttonImage.html);\r\n        editor.ui.registry.addButton('embedhtml', {\r\n            icon: icon, tooltip: buttonTitle, onAction: () => uploadHTMLFileDialog(editor),\r\n        });\r\n        editor.ui.registry.addMenuItem('embedhtml', {\r\n            icon: icon, text: buttonTitle,  type: 'menuitem', onAction: () => uploadHTMLFileDialog(editor),\r\n        });\r\n    };\r\n};\r\n"],"names":["uploadHTMLFileDialog","editor","input","document","createElement","type","accept","onchange","async","file","files","formData","FormData","append","M","cfg","sesskey","courseId","response","fetch","wwwroot","method","body","credentials","result","json","url","insertContent","window","alert","error","err","console","click","_exports","getSetup","buttonImage","buttonTitle","Promise","all","getButtonImage","component","getString","ui","registry","addIcon","icon","html","addButton","tooltip","onAction","addMenuItem","text"],"mappings":";;;;;;;;AAkCA,MAAMA,qBAAwBC,SAC1B,MAAMC,MAAQC,SAASC,cAAc,SACrCF,MAAMG,KAAO,OACbH,MAAMI,OAAS,QAEfJ,MAAMK,SAAWC,UACb,MAAMC,KAAOP,MAAMQ,MAAM,GACzB,IAAKD,KAAM,OAEX,MAAME,SAAW,IAAIC,SAErBD,SAASE,OAAO,OAAQJ,MACxBE,SAASE,OAAO,UAAWC,EAAEC,IAAIC,SACjCL,SAASE,OAAO,WAAYC,EAAEC,IAAIE,UAElC,IACI,MAAMC,eAAiBC,MAAML,EAAEC,IAAIK,QAAU,8CAA+C,CACxFC,OAAQ,OACRC,KAAMX,SACNY,YAAa,gBAGXC,aAAeN,SAASO,OAE1BD,OAAOE,IACPzB,OAAO0B,cAAc,gBAAgBH,OAAOE,4DAE5CE,OAAOC,MAAM,kBAAoBL,OAAOM,MAE/C,CAAC,MAAOC,KACLC,QAAQF,MAAMC,IAClB,GAGJ7B,MAAM+B,OAAO,EA8BfC,SAAAC,SAnBsB3B,UACpB,MACI4B,YACAC,mBACMC,QAAQC,IAAI,EAClB,EAAAC,OAAAA,gBAAe,OAAQC,QAAAA,YACvB,EAAAC,KAAAA,YAAU,aAAcD,QAAAA,aAG5B,OAAQxC,SAEJA,OAAO0C,GAAGC,SAASC,QAAQC,QAAAA,KAAMV,YAAYW,MAC7C9C,OAAO0C,GAAGC,SAASI,UAAU,YAAa,CACtCF,KAAMA,QAAIA,KAAEG,QAASZ,YAAaa,SAAUA,IAAMlD,qBAAqBC,UAE3EA,OAAO0C,GAAGC,SAASO,YAAY,YAAa,CACxCL,KAAMA,QAAIA,KAAEM,KAAMf,YAAchC,KAAM,WAAY6C,SAAUA,IAAMlD,qBAAqBC,SACzF,CACL,CACH"}