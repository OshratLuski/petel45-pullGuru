define("tiny_embedhtml/commands",["exports","editor_tiny/utils","core/str","./common"],(function(_exports,_utils,_str,_common){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.getSetup=void 0;
/**
   * Commands helper for the Moodle tiny_embedhtml plugin.
   *
   * @module      tiny_embedhtml/commands
   * @copyright   2025 Nadav Kavalerchik <nadav.kavalerchik@weizmann.ac.il>
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */
const uploadHTMLFileDialog=editor=>{const input=document.createElement("input");input.type="file",input.accept=".html",input.onchange=async()=>{const file=input.files[0];if(!file)return;const formData=new FormData;formData.append("file",file),formData.append("sesskey",M.cfg.sesskey),formData.append("courseid",M.cfg.courseId);try{const response=await fetch(M.cfg.wwwroot+"/lib/editor/tiny/plugins/embedhtml/ajax.php",{method:"POST",body:formData,credentials:"same-origin"}),result=await response.json();result.url?editor.insertContent(`<iframe src="${result.url}" width="100%" height="400" frameborder="0"></iframe>`):window.alert("Upload failed: "+result.error)}catch(err){console.error(err)}},input.click()};_exports.getSetup=async()=>{const[buttonImage,buttonTitle]=await Promise.all([(0,_utils.getButtonImage)("icon",_common.component),(0,_str.get_string)("pluginname",_common.component)]);return editor=>{editor.ui.registry.addIcon(_common.icon,buttonImage.html),editor.ui.registry.addButton("embedhtml",{icon:_common.icon,tooltip:buttonTitle,onAction:()=>uploadHTMLFileDialog(editor)}),editor.ui.registry.addMenuItem("embedhtml",{icon:_common.icon,text:buttonTitle,type:"menuitem",onAction:()=>uploadHTMLFileDialog(editor)})}}}));

//# sourceMappingURL=commands.min.js.map