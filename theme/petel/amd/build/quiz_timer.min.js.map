{"version":3,"file":"quiz_timer.min.js","sources":["../src/quiz_timer.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\n\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript controller for the aside blocks.\n *\n * @module     theme_petel/quiz_timer\n * @package\n * @copyright  2019 Devlion <info@devlion.co>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      3.7\n */\n\nimport {exception as displayException} from 'core/notification';\nimport Ajax from 'core/ajax';\nimport * as Str from 'core/str';\nimport * as Templates from 'core/templates';\nimport * as timeHumanizer from 'theme_petel/humanize_duration';\n\n\nconst SELECTORS = {};\nconst STRINGS = {};\nconst TIMER = {\n    endtime: 0, // Timestamp at which time runs out, according to the student's computer's clock.\n    timeoutid: null, // This records the id of the timeout that updates the clock periodically, so we can cancel.\n    timeLimitTotal: 0,\n    start: null,\n    timerEnabled: false\n};\n\nexport const REMINDER = {\n    type: 'withoutWarnings',\n    isVisible: false,\n};\n\nconst initSelectors = () => {\n    SELECTORS.alltimeInfo = document.getElementById('alltime_info');\n    SELECTORS.displayStopwatch = document.getElementById('displayStopwatch');\n    SELECTORS.form = document.getElementById('responseform');\n    SELECTORS.quizProgressLabel = document.getElementById('quiz_progress_label');\n    SELECTORS.quizTimeBlock = document.getElementById('quiz-time-block');\n    SELECTORS.quizTimeBlockBody = document.querySelector('.quiz-time-block-body');\n    SELECTORS.quizTimeBlockWrapper = document.querySelector('.quiz-time-block-wrapper');\n    SELECTORS.quizTimecounterLabel = document.getElementById('quiz_timecounter_label');\n    SELECTORS.quizTimecounterLabelWrapper = document.querySelector('.quiz_timecounter_label-wrapper');\n    SELECTORS.quizTotalLabel = document.getElementById('quiz_total_label');\n    SELECTORS.reminderInfo = document.querySelector('.reminder-info');\n    SELECTORS.reminderInfoWrapper = document.querySelector('.reminder-info-wrapper');\n    SELECTORS.reminderTypeInfo = document.getElementById('reminder_type_info');\n    SELECTORS.setAlertTimer = document.querySelectorAll('[name=\"setAlertTimer\"]');\n    SELECTORS.timeLeftInfo = document.getElementById('time_left_info');\n    SELECTORS.timelineProgress = document.getElementById('timeline_progress');\n    SELECTORS.timelineProgressInner = document.getElementById('timeline_progress_inner');\n    SELECTORS.timeupInput = document.querySelector('input[name=timeup]');\n    SELECTORS.textWrapper = document.querySelector('.text-wrapper');\n    SELECTORS.turnOffAlerts = document.getElementById('turnoffalerts');\n\n};\n\nconst stop = () => {\n    if (TIMER.timeoutid) {\n        clearTimeout(TIMER.timeoutid);\n    }\n};\n\nconst twoDigit = (num) => {\n    if (num < 10) {\n        return '0' + num;\n    } else {\n        return num;\n    }\n};\n\nconst checkTimer = () => {\nif (+TIMER.timelimit === 0) {\n    SELECTORS.quizTimecounterLabel.innerText = '';\n}\n};\nconst updateTimer = () => {\n    let secondslefttotal = Math.floor((TIMER.endtime - new Date().getTime()) / 1000);\n\n\n    if (secondslefttotal < 0 || secondslefttotal === 0) {\n        stop();\n\n        SELECTORS.timeupInput.value = 1;\n        let form = SELECTORS.timeupInput.closest('form');\n        if (form.querySelector('input[name=finishattempt]')) {\n            form.querySelector('input[name=finishattempt]')[0].value = 0;\n        }\n        SELECTORS.quizTimecounterLabel.innerText = STRINGS.timeisup;\n        // M.core_formchangechecker.set_form_submitted();\n        form.submit();\n        return;\n    }\n\n    let secondsleft = secondslefttotal;\n    // Update the time display.\n    let hours = Math.floor(secondsleft / 3600);\n    secondsleft -= hours * 3600;\n    let minutes = Math.floor(secondsleft / 60);\n    secondsleft -= minutes * 60;\n\n    let left = hours + ':' + twoDigit(minutes);\n    let minutesBeenPassed = Math.floor((TIMER.timeLimitTotal - secondslefttotal) / 60);\n\n    if (SELECTORS.quizTimecounterLabel) {\n        if (secondslefttotal > 0) {\n            SELECTORS.quizTimecounterLabel.innerText = STRINGS.timeStr(secondslefttotal * 1000) + ' ' + STRINGS.minutesleft;\n        } else {\n            SELECTORS.quizTimecounterLabel.innerText = STRINGS.timeisup;\n        }\n    }\n\n    switch (REMINDER.type) {\n        case 'withoutWarnings':\n            break;\n        case 'every30Min':\n            if (Math.floor(minutesBeenPassed / 30) !== 0) {\n                showReminder(hours + ':' + +twoDigit(minutes) + 1);\n            }\n            break;\n        case 'thirtyMinBeforeEnd':\n            if (Math.floor(secondslefttotal / 60) === 30) {\n                showReminder(30);\n            }\n            break;\n        case 'fifteenMinBeforeEnd':\n            if (Math.floor(secondslefttotal / 60) === 15) {\n                showReminder(15);\n            }\n            break;\n        case 'fiveMinBeforeEnd':\n            if (Math.floor(secondslefttotal / 60) === 5) {\n                showReminder(5);\n            }\n            break;\n        default:\n\n    }\n\n\n    let leftPerc = Math.floor(secondslefttotal / TIMER.timeLimitTotal * 100);\n\n    if (SELECTORS.timelineProgress) {\n\n        SELECTORS.timelineProgress.setAttribute('title', left);\n    }\n    if (SELECTORS.timelineProgressInner) {\n\n        SELECTORS.timelineProgressInner.style.width = leftPerc + '%';\n    }\n    if (SELECTORS.timeLeftInfo) {\n        SELECTORS.timeLeftInfo.innerText = STRINGS.timeStr(secondslefttotal * 1000);\n    }\n    // Arrange for this method to be called again soon.\n    TIMER.timeoutid = setTimeout(updateTimer, 30000);\n};\n\n\nexport const showReminder = (timeleft, target = document.querySelector('[role=\"main\"]')) => {\n\n    const strings = [\n        {\n            key: 'thirteenminutesleftuntiltheend',\n            component: 'theme_petel'\n        },\n        {\n            key: 'minutesleftuntiltheend',\n            component: 'theme_petel',\n            param: {\n                timeleft: timeleft\n            }\n        },\n        {\n            key: 'every30minutes',\n            component: 'theme_petel'\n        },\n        {\n            key: 'thirthyminutesbeforetheend',\n            component: 'theme_petel'\n        },\n        {\n            key: 'withoutwarnings',\n            component: 'theme_petel'\n        },\n    ];\n\n    Str.get_strings(strings)\n        .then(function(results) {\n            STRINGS.thirteenminutesleftuntiltheend = results[0];\n            STRINGS.minutesleftuntiltheend = results[1];\n            STRINGS.every30Min = results[2];\n            STRINGS.thirtyMinBeforeEnd = results[3];\n            STRINGS.withoutWarnings = results[4];\n            STRINGS.alert = results[5];\n\n            const context = {\n                text: STRINGS.minutesleftuntiltheend,\n            };\n\n            return Templates.renderForPromise('theme_petel/quiz_timer_alert', context)\n                .then(({html, js}) => {\n                    return Templates.appendNodeContents(target, html, js);\n                })\n                .catch(ex => displayException(ex));\n\n        })\n        .catch(ex => displayException(ex));\n\n};\n\nexport const setReminder = (reminderType, isVisible, cmid) => {\n    Ajax.call([{\n        methodname: 'theme_petel_quiz_set_timer_preferences',\n        args: {\n            isvisible: isVisible,\n            cmid: +cmid,\n            remindertype: reminderType,\n        },\n        done: response => {\n            if (response) {\n                REMINDER.type = response.remindertype;\n                REMINDER.isVisible = response.isvisible;\n            }\n        },\n        fail: error => displayException(error)\n    }]);\n};\n\nexport const getReminder = (cmid) => {\n    Ajax.call([{\n        methodname: 'theme_petel_quiz_get_timer_preferences',\n        args: {\n            cmid: cmid,\n        },\n        done: response => {\n            REMINDER.type = response.remindertype;\n            REMINDER.isVisible = response.isvisible;\n            updateTimer();\n            checkState();\n            return response;\n        },\n        fail: error => displayException(error)\n    }]);\n};\n\nexport const checkState = () => {\n\n    SELECTORS.displayStopwatch.checked = REMINDER.isVisible;\n\n    if (REMINDER.isVisible === 'false' || REMINDER.isVisible === false) {\n        SELECTORS.quizTimeBlockBody.classList.add('hidden');\n        SELECTORS.reminderInfoWrapper.classList.add('hidden');\n        SELECTORS.reminderInfoWrapper.classList.remove('d-flex');\n        SELECTORS.displayStopwatch.parentElement.classList.remove('active');\n        SELECTORS.quizTimecounterLabelWrapper.classList.add('hidden');\n\n        SELECTORS.setAlertTimer.forEach((el) => {\n            el.setAttribute('disabled', 'true');\n        });\n\n    } else {\n        SELECTORS.quizTimecounterLabelWrapper.classList.remove('hidden');\n        SELECTORS.quizTimeBlockBody.classList.remove('hidden');\n        SELECTORS.reminderInfoWrapper.classList.remove('hidden');\n        SELECTORS.reminderInfoWrapper.classList.add('d-flex');\n\n        SELECTORS.setAlertTimer.forEach((el) => {\n            el.removeAttribute('disabled');\n        });\n\n        SELECTORS.displayStopwatch.parentElement.classList.add('active');\n\n    }\n\n\n    let text;\n    for (const [key, value] of Object.entries(STRINGS)) {\n        if (key === REMINDER.type) {\n            text = value;\n        }\n    }\n\n    SELECTORS.reminderTypeInfo.innerText = STRINGS.alert + text;\n\n    SELECTORS.setAlertTimer.forEach((el) => {\n        if (el.id === REMINDER.type) {\n            el.checked = true;\n        } else {\n            el.checked = false;\n        }\n    });\n\n    SELECTORS.reminderInfo.classList.remove('hidden');\n};\n\nexport const init = function(start, timeleft, timelimit,\n    ispreview, progress, attemptid, cmid, userid, answered, totalquestions, timerEnabled, active) {\n\n    TIMER.timerEnabled = timerEnabled;\n\n    let lang = document.documentElement.lang;\n\n    if (lang === 'he-kids') {\n        lang = 'he';\n    }\n\n    TIMER.lang = lang || 'en';\n\n    const strings = [\n        {\n            key: 'every30minutes',\n            component: 'theme_petel'\n        },\n        {\n            key: 'thirthyminutesbeforetheend',\n            component: 'theme_petel'\n        },\n        {\n            key: 'withoutwarnings',\n            component: 'theme_petel'\n        },\n        {\n            key: 'fifteenminutesbeforebnd',\n            component: 'theme_petel'\n        },\n        {\n            key: 'fiveminutesbeforetheend',\n            component: 'theme_petel'\n        },\n        {\n            key: 'alert',\n            component: 'theme_petel'\n        },\n        {\n            key: 'timeisup',\n            component: 'theme_petel'\n        },\n        {\n            key: 'minutesleft',\n            component: 'theme_petel'\n        },\n    ];\n\n    Str.get_strings(strings)\n        .then(function(results) {\n            STRINGS.every30Min = results[0];\n            STRINGS.thirtyMinBeforeEnd = results[1];\n            STRINGS.withoutWarnings = results[2];\n            STRINGS.fifteenMinBeforeEnd = results[3];\n            STRINGS.fiveMinBeforeEnd = results[4];\n            STRINGS.alert = results[5];\n            STRINGS.timeisup = results[6];\n            STRINGS.minutesleft = results[7];\n\n            STRINGS.timeStr = timeHumanizer.humanizer({\n                language: TIMER.lang,\n                units: [\"h\", \"m\"],\n                maxDecimalPoints: 0\n            });\n            TIMER.timelimit = +timelimit;\n            initSelectors();\n            checkTimer();\n            // If quiz has timelimit in preferencess.\n            if (TIMER.timerEnabled) {\n                TIMER.start = +start;\n                TIMER.timeLimitTotal = +timelimit;\n                REMINDER.cmid = +cmid;\n                let hours = Math.floor(timelimit / 3600);\n                let minutes = Math.floor(timelimit / 60) % 60;\n                TIMER.endtime = new Date().getTime() + start * 1000;\n\n                getReminder(REMINDER.cmid);\n\n                // SELECTORS.alltimeInfo.innerText = hours + ':' + minutes;\n                SELECTORS.alltimeInfo.innerText = STRINGS.timeStr(TIMER.timeLimitTotal * 1000);\n\n\n                SELECTORS.setAlertTimer.forEach((el) => {\n                    el.onchange = (e) => {\n                        REMINDER.type = e.target.value;\n                        checkState();\n                        setReminder(REMINDER.type, REMINDER.isVisible, REMINDER.cmid);\n                    };\n                });\n\n                SELECTORS.displayStopwatch.onchange = (e) => {\n                    REMINDER.isVisible = e.target.checked;\n                    checkState();\n                    setReminder(REMINDER.type, REMINDER.isVisible, REMINDER.cmid);\n                };\n                updateTimer();\n\n            }\n\n            SELECTORS.quizProgressLabel.innerText = answered;\n            SELECTORS.quizTotalLabel.innerText = totalquestions;\n            SELECTORS.textWrapper.classList.remove('d-none');\n\n            if (active) {\n                SELECTORS.form.onsubmit = () => {\n                    stop();\n                };\n            }\n            return;\n\n        })\n        .catch(ex => displayException(ex));\n};\n\n"],"names":["SELECTORS","STRINGS","TIMER","endtime","timeoutid","timeLimitTotal","start","timerEnabled","REMINDER","type","isVisible","stop","clearTimeout","twoDigit","num","updateTimer","secondslefttotal","Math","floor","Date","getTime","timeupInput","value","form","closest","querySelector","quizTimecounterLabel","innerText","timeisup","submit","secondsleft","hours","minutes","left","minutesBeenPassed","timeStr","minutesleft","showReminder","leftPerc","timelineProgress","setAttribute","timelineProgressInner","style","width","timeLeftInfo","setTimeout","timeleft","target","document","strings","key","component","param","Str","get_strings","then","results","thirteenminutesleftuntiltheend","minutesleftuntiltheend","every30Min","thirtyMinBeforeEnd","withoutWarnings","alert","context","text","Templates","renderForPromise","_ref","html","js","appendNodeContents","catch","ex","setReminder","reminderType","cmid","call","methodname","args","isvisible","remindertype","done","response","fail","error","getReminder","checkState","displayStopwatch","checked","quizTimeBlockBody","classList","add","reminderInfoWrapper","remove","parentElement","quizTimecounterLabelWrapper","setAlertTimer","forEach","el","removeAttribute","Object","entries","reminderTypeInfo","id","reminderInfo","timelimit","ispreview","progress","attemptid","userid","answered","totalquestions","active","lang","documentElement","fifteenMinBeforeEnd","fiveMinBeforeEnd","timeHumanizer","humanizer","language","units","maxDecimalPoints","alltimeInfo","getElementById","quizProgressLabel","quizTimeBlock","quizTimeBlockWrapper","quizTotalLabel","querySelectorAll","textWrapper","turnOffAlerts","onchange","e","onsubmit"],"mappings":";;;;;;;;;4yCAkCMA,UAAY,GACZC,QAAU,GACVC,MAAQ,CACVC,QAAS,EACTC,UAAW,KACXC,eAAgB,EAChBC,MAAO,KACPC,cAAc,GAGLC,SAAW,CACpBC,KAAM,kBACNC,WAAW,oCA2BTC,KAAO,KACLT,MAAME,WACNQ,aAAaV,MAAME,YAIrBS,SAAYC,KACVA,IAAM,GACC,IAAMA,IAENA,IASTC,YAAc,SACZC,iBAAmBC,KAAKC,OAAOhB,MAAMC,SAAU,IAAIgB,MAAOC,WAAa,QAGvEJ,iBAAmB,GAA0B,IAArBA,iBAAwB,CAChDL,OAEAX,UAAUqB,YAAYC,MAAQ,MAC1BC,KAAOvB,UAAUqB,YAAYG,QAAQ,eACrCD,KAAKE,cAAc,+BACnBF,KAAKE,cAAc,6BAA6B,GAAGH,MAAQ,GAE/DtB,UAAU0B,qBAAqBC,UAAY1B,QAAQ2B,cAEnDL,KAAKM,aAILC,YAAcd,iBAEde,MAAQd,KAAKC,MAAMY,YAAc,MACrCA,aAAuB,KAARC,UACXC,QAAUf,KAAKC,MAAMY,YAAc,IACvCA,aAAyB,GAAVE,YAEXC,KAAOF,MAAQ,IAAMlB,SAASmB,SAC9BE,kBAAoBjB,KAAKC,OAAOhB,MAAMG,eAAiBW,kBAAoB,WAE3EhB,UAAU0B,uBAEN1B,UAAU0B,qBAAqBC,UAD/BX,iBAAmB,EACwBf,QAAQkC,QAA2B,IAAnBnB,kBAA2B,IAAMf,QAAQmC,YAEzDnC,QAAQ2B,UAInDpB,SAASC,UACR,4BAEA,aAC0C,IAAvCQ,KAAKC,MAAMgB,kBAAoB,KAC/BG,aAAaN,MAAQ,MAAOlB,SAASmB,SAAW,aAGnD,qBACyC,KAAtCf,KAAKC,MAAMF,iBAAmB,KAC9BqB,aAAa,cAGhB,sBACyC,KAAtCpB,KAAKC,MAAMF,iBAAmB,KAC9BqB,aAAa,cAGhB,mBACyC,IAAtCpB,KAAKC,MAAMF,iBAAmB,KAC9BqB,aAAa,OAQrBC,SAAWrB,KAAKC,MAAMF,iBAAmBd,MAAMG,eAAiB,KAEhEL,UAAUuC,kBAEVvC,UAAUuC,iBAAiBC,aAAa,QAASP,MAEjDjC,UAAUyC,wBAEVzC,UAAUyC,sBAAsBC,MAAMC,MAAQL,SAAW,KAEzDtC,UAAU4C,eACV5C,UAAU4C,aAAajB,UAAY1B,QAAQkC,QAA2B,IAAnBnB,mBAGvDd,MAAME,UAAYyC,WAAW9B,YAAa,MAIjCsB,aAAe,SAACS,cAAUC,8DAASC,SAASvB,cAAc,uBAE7DwB,QAAU,CACZ,CACIC,IAAK,iCACLC,UAAW,eAEf,CACID,IAAK,yBACLC,UAAW,cACXC,MAAO,CACHN,SAAUA,WAGlB,CACII,IAAK,iBACLC,UAAW,eAEf,CACID,IAAK,6BACLC,UAAW,eAEf,CACID,IAAK,kBACLC,UAAW,gBAInBE,IAAIC,YAAYL,SACXM,MAAK,SAASC,SACXvD,QAAQwD,+BAAiCD,QAAQ,GACjDvD,QAAQyD,uBAAyBF,QAAQ,GACzCvD,QAAQ0D,WAAaH,QAAQ,GAC7BvD,QAAQ2D,mBAAqBJ,QAAQ,GACrCvD,QAAQ4D,gBAAkBL,QAAQ,GAClCvD,QAAQ6D,MAAQN,QAAQ,SAElBO,QAAU,CACZC,KAAM/D,QAAQyD,+BAGXO,UAAUC,iBAAiB,+BAAgCH,SAC7DR,MAAKY,WAACC,KAACA,KAADC,GAAOA,gBACHJ,UAAUK,mBAAmBvB,OAAQqB,KAAMC,OAErDE,OAAMC,KAAM,2BAAiBA,SAGrCD,OAAMC,KAAM,2BAAiBA,gDAIzBC,YAAc,CAACC,aAAchE,UAAWiE,sBAC5CC,KAAK,CAAC,CACPC,WAAY,yCACZC,KAAM,CACFC,UAAWrE,UACXiE,MAAOA,KACPK,aAAcN,cAElBO,KAAMC,WACEA,WACA1E,SAASC,KAAOyE,SAASF,aACzBxE,SAASE,UAAYwE,SAASH,YAGtCI,KAAMC,QAAS,2BAAiBA,kDAI3BC,YAAeV,qBACnBC,KAAK,CAAC,CACPC,WAAY,yCACZC,KAAM,CACFH,KAAMA,MAEVM,KAAMC,WACF1E,SAASC,KAAOyE,SAASF,aACzBxE,SAASE,UAAYwE,SAASH,UAC9BhE,cACAuE,aACOJ,UAEXC,KAAMC,QAAS,2BAAiBA,kDAI3BE,WAAa,SA8BlBtB,KA5BJhE,UAAUuF,iBAAiBC,QAAUhF,SAASE,UAEnB,UAAvBF,SAASE,YAAgD,IAAvBF,SAASE,WAC3CV,UAAUyF,kBAAkBC,UAAUC,IAAI,UAC1C3F,UAAU4F,oBAAoBF,UAAUC,IAAI,UAC5C3F,UAAU4F,oBAAoBF,UAAUG,OAAO,UAC/C7F,UAAUuF,iBAAiBO,cAAcJ,UAAUG,OAAO,UAC1D7F,UAAU+F,4BAA4BL,UAAUC,IAAI,UAEpD3F,UAAUgG,cAAcC,SAASC,KAC7BA,GAAG1D,aAAa,WAAY,aAIhCxC,UAAU+F,4BAA4BL,UAAUG,OAAO,UACvD7F,UAAUyF,kBAAkBC,UAAUG,OAAO,UAC7C7F,UAAU4F,oBAAoBF,UAAUG,OAAO,UAC/C7F,UAAU4F,oBAAoBF,UAAUC,IAAI,UAE5C3F,UAAUgG,cAAcC,SAASC,KAC7BA,GAAGC,gBAAgB,eAGvBnG,UAAUuF,iBAAiBO,cAAcJ,UAAUC,IAAI,eAMtD,MAAOzC,IAAK5B,SAAU8E,OAAOC,QAAQpG,SAClCiD,MAAQ1C,SAASC,OACjBuD,KAAO1C,OAIftB,UAAUsG,iBAAiB3E,UAAY1B,QAAQ6D,MAAQE,KAEvDhE,UAAUgG,cAAcC,SAASC,KACzBA,GAAGK,KAAO/F,SAASC,KACnByF,GAAGV,SAAU,EAEbU,GAAGV,SAAU,KAIrBxF,UAAUwG,aAAad,UAAUG,OAAO,wDAGxB,SAASvF,MAAOwC,SAAU2D,UAC1CC,UAAWC,SAAUC,UAAWjC,KAAMkC,OAAQC,SAAUC,eAAgBxG,aAAcyG,QAEtF9G,MAAMK,aAAeA,iBAEjB0G,KAAOjE,SAASkE,gBAAgBD,KAEvB,YAATA,OACAA,KAAO,MAGX/G,MAAM+G,KAAOA,MAAQ,KAqCrB5D,IAAIC,YAnCY,CACZ,CACIJ,IAAK,iBACLC,UAAW,eAEf,CACID,IAAK,6BACLC,UAAW,eAEf,CACID,IAAK,kBACLC,UAAW,eAEf,CACID,IAAK,0BACLC,UAAW,eAEf,CACID,IAAK,0BACLC,UAAW,eAEf,CACID,IAAK,QACLC,UAAW,eAEf,CACID,IAAK,WACLC,UAAW,eAEf,CACID,IAAK,cACLC,UAAW,iBAKdI,MAAK,SAASC,YACXvD,QAAQ0D,WAAaH,QAAQ,GAC7BvD,QAAQ2D,mBAAqBJ,QAAQ,GACrCvD,QAAQ4D,gBAAkBL,QAAQ,GAClCvD,QAAQkH,oBAAsB3D,QAAQ,GACtCvD,QAAQmH,iBAAmB5D,QAAQ,GACnCvD,QAAQ6D,MAAQN,QAAQ,GACxBvD,QAAQ2B,SAAW4B,QAAQ,GAC3BvD,QAAQmC,YAAcoB,QAAQ,GAE9BvD,QAAQkC,QAAUkF,cAAcC,UAAU,CACtCC,SAAUrH,MAAM+G,KAChBO,MAAO,CAAC,IAAK,KACbC,iBAAkB,IAEtBvH,MAAMuG,WAAaA,UArU3BzG,UAAU0H,YAAc1E,SAAS2E,eAAe,gBAChD3H,UAAUuF,iBAAmBvC,SAAS2E,eAAe,oBACrD3H,UAAUuB,KAAOyB,SAAS2E,eAAe,gBACzC3H,UAAU4H,kBAAoB5E,SAAS2E,eAAe,uBACtD3H,UAAU6H,cAAgB7E,SAAS2E,eAAe,mBAClD3H,UAAUyF,kBAAoBzC,SAASvB,cAAc,yBACrDzB,UAAU8H,qBAAuB9E,SAASvB,cAAc,4BACxDzB,UAAU0B,qBAAuBsB,SAAS2E,eAAe,0BACzD3H,UAAU+F,4BAA8B/C,SAASvB,cAAc,mCAC/DzB,UAAU+H,eAAiB/E,SAAS2E,eAAe,oBACnD3H,UAAUwG,aAAexD,SAASvB,cAAc,kBAChDzB,UAAU4F,oBAAsB5C,SAASvB,cAAc,0BACvDzB,UAAUsG,iBAAmBtD,SAAS2E,eAAe,sBACrD3H,UAAUgG,cAAgBhD,SAASgF,iBAAiB,0BACpDhI,UAAU4C,aAAeI,SAAS2E,eAAe,kBACjD3H,UAAUuC,iBAAmBS,SAAS2E,eAAe,qBACrD3H,UAAUyC,sBAAwBO,SAAS2E,eAAe,2BAC1D3H,UAAUqB,YAAc2B,SAASvB,cAAc,sBAC/CzB,UAAUiI,YAAcjF,SAASvB,cAAc,iBAC/CzB,UAAUkI,cAAgBlF,SAAS2E,eAAe,iBAmB7B,IAApBzH,MAAMuG,YACPzG,UAAU0B,qBAAqBC,UAAY,IAkS/BzB,MAAMK,aAAc,CACpBL,MAAMI,OAASA,MACfJ,MAAMG,gBAAkBoG,UACxBjG,SAASmE,MAAQA,KACL1D,KAAKC,MAAMuF,UAAY,MACrBxF,KAAKC,MAAMuF,UAAY,IACrCvG,MAAMC,SAAU,IAAIgB,MAAOC,UAAoB,IAARd,MAEvC+E,YAAY7E,SAASmE,MAGrB3E,UAAU0H,YAAY/F,UAAY1B,QAAQkC,QAA+B,IAAvBjC,MAAMG,gBAGxDL,UAAUgG,cAAcC,SAASC,KAC7BA,GAAGiC,SAAYC,IACX5H,SAASC,KAAO2H,EAAErF,OAAOzB,MACzBgE,aACAb,YAAYjE,SAASC,KAAMD,SAASE,UAAWF,SAASmE,UAIhE3E,UAAUuF,iBAAiB4C,SAAYC,IACnC5H,SAASE,UAAY0H,EAAErF,OAAOyC,QAC9BF,aACAb,YAAYjE,SAASC,KAAMD,SAASE,UAAWF,SAASmE,OAE5D5D,cAIJf,UAAU4H,kBAAkBjG,UAAYmF,SACxC9G,UAAU+H,eAAepG,UAAYoF,eACrC/G,UAAUiI,YAAYvC,UAAUG,OAAO,UAEnCmB,SACAhH,UAAUuB,KAAK8G,SAAW,KACtB1H,YAMX4D,OAAMC,KAAM,2BAAiBA"}