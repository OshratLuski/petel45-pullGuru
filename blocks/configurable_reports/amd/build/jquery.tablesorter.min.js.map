{"version":3,"file":"jquery.tablesorter.min.js","sources":["../src/jquery.tablesorter.js"],"sourcesContent":["/*eslint-disable*/\n(function(factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else if (typeof module === 'object' && typeof module.exports === 'object') {\n        module.exports = factory(require('jquery'));\n    } else {\n        factory(jQuery);\n    }\n}(function(jQuery) {\n\n    /*! TableSorter (FORK) v2.31.0 *//*\n* Client-side table sorting with ease!\n* @requires jQuery v1.2.6+\n*\n* Copyright (c) 2007 Christian Bach\n* fork maintained by Rob Garrison\n*\n* Examples and original docs at: http://tablesorter.com\n* Dual licensed under the MIT and GPL licenses:\n* http://www.opensource.org/licenses/mit-license.php\n* http://www.gnu.org/licenses/gpl.html\n*\n* @type jQuery\n* @name tablesorter (FORK)\n* @cat Plugins/Tablesorter\n* @author Christian Bach - christian.bach@polyester.se\n* @contributor Rob Garrison - https://github.com/Mottie/tablesorter\n* @docs (fork) - https://mottie.github.io/tablesorter/docs/\n*/\n    /*jshint browser:true, jquery:true, unused:false, expr: true */\n    ;(function($) {\n        'use strict';\n        var ts = $.tablesorter = {\n\n            version: '2.31.3',\n\n            parsers: [],\n            widgets: [],\n            defaults: {\n\n                // *** appearance\n                theme: 'default',  // adds tablesorter-{theme} to the table for styling\n                widthFixed: false,      // adds colgroup to fix widths of columns\n                showProcessing: false,      // show an indeterminate timer icon in the header when the table is sorted or filtered.\n\n                headerTemplate: '{content}',// header layout template (HTML ok); {content} = innerHTML, {icon} = <i></i> // class from cssIcon\n                onRenderTemplate: null,       // function( index, template ) { return template; }, // template is a string\n                onRenderHeader: null,       // function( index ) {}, // nothing to return\n\n                // *** functionality\n                cancelSelection: true,       // prevent text selection in the header\n                tabIndex: true,       // add tabindex to header for keyboard accessibility\n                dateFormat: 'mmddyyyy', // other options: 'ddmmyyy' or 'yyyymmdd'\n                sortMultiSortKey: 'shiftKey', // key used to select additional columns\n                sortResetKey: 'ctrlKey',  // key used to remove sorting on a column\n                usNumberFormat: true,       // false for German '1.234.567,89' or French '1 234 567,89'\n                delayInit: false,      // if false, the parsed table contents will not update until the first sort\n                serverSideSorting: false,      // if true, server-side sorting should be performed because client-side sorting will be disabled, but the ui and events will still be used.\n                resort: true,       // default setting to trigger a resort after an 'update', 'addRows', 'updateCell', etc has completed\n\n                // *** sort options\n                headers: {},         // set sorter, string, empty, locked order, sortInitialOrder, filter, etc.\n                ignoreCase: true,       // ignore case while sorting\n                sortForce: null,       // column(s) first sorted; always applied\n                sortList: [],         // Initial sort order; applied initially; updated when manually sorted\n                sortAppend: null,       // column(s) sorted last; always applied\n                sortStable: false,      // when sorting two rows with exactly the same content, the original sort order is maintained\n\n                sortInitialOrder: 'asc',      // sort direction on first click\n                sortLocaleCompare: false,      // replace equivalent character (accented characters)\n                sortReset: false,      // third click on the header will reset column to default - unsorted\n                sortRestart: false,      // restart sort to 'sortInitialOrder' when clicking on previously unsorted columns\n\n                emptyTo: 'bottom',   // sort empty cell to bottom, top, none, zero, emptyMax, emptyMin\n                stringTo: 'max',      // sort strings in numerical column as max, min, top, bottom, zero\n                duplicateSpan: true,       // colspan cells in the tbody will have duplicated content in the cache for each spanned column\n                textExtraction: 'basic',    // text extraction method/function - function( node, table, cellIndex ) {}\n                textAttribute: 'data-text',// data-attribute that contains alternate cell text (used in default textExtraction function)\n                textSorter: null,       // choose overall or specific column sorter function( a, b, direction, table, columnIndex ) [alt: ts.sortText]\n                numberSorter: null,       // choose overall numeric sorter function( a, b, direction, maxColumnValue )\n\n                // *** widget options\n                initWidgets: true,       // apply widgets on tablesorter initialization\n                widgetClass: 'widget-{name}', // table class name template to match to include a widget\n                widgets: [],         // method to add widgets, e.g. widgets: ['zebra']\n                widgetOptions: {\n                    zebra: ['even', 'odd']  // zebra widget alternating row class names\n                },\n\n                // *** callbacks\n                initialized: null,       // function( table ) {},\n\n                // *** extra css class names\n                tableClass: '',\n                cssAsc: '',\n                cssDesc: '',\n                cssNone: '',\n                cssHeader: '',\n                cssHeaderRow: '',\n                cssProcessing: '', // processing icon applied to header during sort/filter\n\n                cssChildRow: 'tablesorter-childRow', // class name indiciating that a row is to be attached to its parent\n                cssInfoBlock: 'tablesorter-infoOnly', // don't sort tbody with this class name (only one class name allowed here!)\n                cssNoSort: 'tablesorter-noSort',   // class name added to element inside header; clicking on it won't cause a sort\n                cssIgnoreRow: 'tablesorter-ignoreRow',// header row to ignore; cells within this row will not be added to c.$headers\n\n                cssIcon: 'tablesorter-icon', // if this class does not exist, the {icon} will not be added from the headerTemplate\n                cssIconNone: '', // class name added to the icon when there is no column sort\n                cssIconAsc: '', // class name added to the icon when the column has an ascending sort\n                cssIconDesc: '', // class name added to the icon when the column has a descending sort\n                cssIconDisabled: '', // class name added to the icon when the column has a disabled sort\n\n                // *** events\n                pointerClick: 'click',\n                pointerDown: 'mousedown',\n                pointerUp: 'mouseup',\n\n                // *** selectors\n                selectorHeaders: '> thead th, > thead td',\n                selectorSort: 'th, td', // jQuery selector of content within selectorHeaders that is clickable to trigger a sort\n                selectorRemove: '.remove-me',\n\n                // *** advanced\n                debug: false,\n\n                // *** Internal variables\n                headerList: [],\n                empties: {},\n                strings: {},\n                parsers: [],\n\n                // *** parser options for validator; values must be falsy!\n                globalize: 0,\n                imgAttr: 0\n\n                // removed: widgetZebra: { css: ['even', 'odd'] }\n\n            },\n\n            // internal css classes - these will ALWAYS be added to\n            // the table and MUST only contain one class name - fixes #381\n            css: {\n                table: 'tablesorter',\n                cssHasChild: 'tablesorter-hasChildRow',\n                childRow: 'tablesorter-childRow',\n                colgroup: 'tablesorter-colgroup',\n                header: 'tablesorter-header',\n                headerRow: 'tablesorter-headerRow',\n                headerIn: 'tablesorter-header-inner',\n                icon: 'tablesorter-icon',\n                processing: 'tablesorter-processing',\n                sortAsc: 'tablesorter-headerAsc',\n                sortDesc: 'tablesorter-headerDesc',\n                sortNone: 'tablesorter-headerUnSorted'\n            },\n\n            // labels applied to sortable headers for accessibility (aria) support\n            language: {\n                sortAsc: 'Ascending sort applied, ',\n                sortDesc: 'Descending sort applied, ',\n                sortNone: 'No sort applied, ',\n                sortDisabled: 'sorting is disabled',\n                nextAsc: 'activate to apply an ascending sort',\n                nextDesc: 'activate to apply a descending sort',\n                nextNone: 'activate to remove the sort'\n            },\n\n            regex: {\n                templateContent: /\\{content\\}/g,\n                templateIcon: /\\{icon\\}/g,\n                templateName: /\\{name\\}/i,\n                spaces: /\\s+/g,\n                nonWord: /\\W/g,\n                formElements: /(input|select|button|textarea)/i,\n\n                // *** sort functions ***\n                // regex used in natural sort\n                // chunk/tokenize numbers & letters\n                chunk: /(^([+\\-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?$|^0x[0-9a-f]+$|\\d+)/gi,\n                // replace chunks @ ends\n                chunks: /(^\\\\0|\\\\0$)/,\n                hex: /^0x[0-9a-f]+$/i,\n\n                // *** formatFloat ***\n                comma: /,/g,\n                digitNonUS: /[\\s|\\.]/g,\n                digitNegativeTest: /^\\s*\\([.\\d]+\\)/,\n                digitNegativeReplace: /^\\s*\\(([.\\d]+)\\)/,\n\n                // *** isDigit ***\n                digitTest: /^[\\-+(]?\\d+[)]?$/,\n                digitReplace: /[,.'\"\\s]/g\n\n            },\n\n            // digit sort, text location\n            string: {\n                max: 1,\n                min: -1,\n                emptymin: 1,\n                emptymax: -1,\n                zero: 0,\n                none: 0,\n                'null': 0,\n                top: true,\n                bottom: false\n            },\n\n            keyCodes: {\n                enter: 13\n            },\n\n            // placeholder date parser data (globalize)\n            dates: {},\n\n            // These methods can be applied on table.config instance\n            instanceMethods: {},\n\n            /*\n            ▄█████ ██████ ██████ ██  ██ █████▄\n            ▀█▄    ██▄▄     ██   ██  ██ ██▄▄██\n               ▀█▄ ██▀▀     ██   ██  ██ ██▀▀▀\n            █████▀ ██████   ██   ▀████▀ ██\n            */\n\n            setup: function(table, c) {\n                // if no thead or tbody, or tablesorter is already present, quit\n                if (!table || !table.tHead || table.tBodies.length === 0 || table.hasInitialized === true) {\n                    if (ts.debug(c, 'core')) {\n                        if (table.hasInitialized) {\n                            console.warn('Stopping initialization. Tablesorter has already been initialized');\n                        } else {\n                            console.error('Stopping initialization! No table, thead or tbody', table);\n                        }\n                    }\n                    return;\n                }\n\n                var tmp = '',\n                    $table = $(table),\n                    meta = $.metadata;\n                // initialization flag\n                table.hasInitialized = false;\n                // table is being processed flag\n                table.isProcessing = true;\n                // make sure to store the config object\n                table.config = c;\n                // save the settings where they read\n                $.data(table, 'tablesorter', c);\n                if (ts.debug(c, 'core')) {\n                    console[console.group ? 'group' : 'log']('Initializing tablesorter v' + ts.version);\n                    $.data(table, 'startoveralltimer', new Date());\n                }\n\n                // removing this in version 3 (only supports jQuery 1.7+)\n                c.supportsDataObject = (function(version) {\n                    version[0] = parseInt(version[0], 10);\n                    return (version[0] > 1) || (version[0] === 1 && parseInt(version[1], 10) >= 4);\n                })($.fn.jquery.split('.'));\n                // ensure case insensitivity\n                c.emptyTo = c.emptyTo.toLowerCase();\n                c.stringTo = c.stringTo.toLowerCase();\n                c.last = {sortList: [], clickedIndex: -1};\n                // add table theme class only if there isn't already one there\n                if (!/tablesorter\\-/.test($table.attr('class'))) {\n                    tmp = (c.theme !== '' ? ' tablesorter-' + c.theme : '');\n                }\n\n                // give the table a unique id, which will be used in namespace binding\n                if (!c.namespace) {\n                    c.namespace = '.tablesorter' + Math.random().toString(16).slice(2);\n                } else {\n                    // make sure namespace starts with a period & doesn't have weird characters\n                    c.namespace = '.' + c.namespace.replace(ts.regex.nonWord, '');\n                }\n\n                c.table = table;\n                c.$table = $table\n                    // add namespace to table to allow bindings on extra elements to target\n                    // the parent table (e.g. parser-input-select)\n                    .addClass(ts.css.table + ' ' + c.tableClass + tmp + ' ' + c.namespace.slice(1))\n                    .attr('role', 'grid');\n                c.$headers = $table.find(c.selectorHeaders);\n\n                c.$table.children().children('tr').attr('role', 'row');\n                c.$tbodies = $table.children('tbody:not(.' + c.cssInfoBlock + ')').attr({\n                    'aria-live': 'polite',\n                    'aria-relevant': 'all'\n                });\n                if (c.$table.children('caption').length) {\n                    tmp = c.$table.children('caption')[0];\n                    if (!tmp.id) {\n                        tmp.id = c.namespace.slice(1) + 'caption';\n                    }\n                    c.$table.attr('aria-labelledby', tmp.id);\n                }\n                c.widgetInit = {}; // keep a list of initialized widgets\n                // change textExtraction via data-attribute\n                c.textExtraction = c.$table.attr('data-text-extraction') || c.textExtraction || 'basic';\n                // build headers\n                ts.buildHeaders(c);\n                // fixate columns if the users supplies the fixedWidth option\n                // do this after theme has been applied\n                ts.fixColumnWidth(table);\n                // add widgets from class name\n                ts.addWidgetFromClass(table);\n                // add widget options before parsing (e.g. grouping widget has parser settings)\n                ts.applyWidgetOptions(table);\n                // try to auto detect column type, and store in tables config\n                ts.setupParsers(c);\n                // start total row count at zero\n                c.totalRows = 0;\n                // only validate options while debugging. See #1528\n                if (c.debug) {\n                    ts.validateOptions(c);\n                }\n                // build the cache for the tbody cells\n                // delayInit will delay building the cache until the user starts a sort\n                if (!c.delayInit) {\n                    ts.buildCache(c);\n                }\n                // bind all header events and methods\n                ts.bindEvents(table, c.$headers, true);\n                ts.bindMethods(c);\n                // get sort list from jQuery data or metadata\n                // in jQuery < 1.4, an error occurs when calling $table.data()\n                if (c.supportsDataObject && typeof $table.data().sortlist !== 'undefined') {\n                    c.sortList = $table.data().sortlist;\n                } else if (meta && ($table.metadata() && $table.metadata().sortlist)) {\n                    c.sortList = $table.metadata().sortlist;\n                }\n                // apply widget init code\n                ts.applyWidget(table, true);\n                // if user has supplied a sort list to constructor\n                if (c.sortList.length > 0) {\n                    // save sortList before any sortAppend is added\n                    c.last.sortList = c.sortList;\n                    ts.sortOn(c, c.sortList, {}, !c.initWidgets);\n                } else {\n                    ts.setHeadersCss(c);\n                    if (c.initWidgets) {\n                        // apply widget format\n                        ts.applyWidget(table, false);\n                    }\n                }\n\n                // show processesing icon\n                if (c.showProcessing) {\n                    $table\n                        .unbind('sortBegin' + c.namespace + ' sortEnd' + c.namespace)\n                        .bind('sortBegin' + c.namespace + ' sortEnd' + c.namespace, function(e) {\n                            clearTimeout(c.timerProcessing);\n                            ts.isProcessing(table);\n                            if (e.type === 'sortBegin') {\n                                c.timerProcessing = setTimeout(function() {\n                                    ts.isProcessing(table, true);\n                                }, 500);\n                            }\n                        });\n                }\n\n                // initialized\n                table.hasInitialized = true;\n                table.isProcessing = false;\n                if (ts.debug(c, 'core')) {\n                    console.log('Overall initialization time:' + ts.benchmark($.data(table, 'startoveralltimer')));\n                    if (ts.debug(c, 'core') && console.groupEnd) {\n                        console.groupEnd();\n                    }\n                }\n                $table.triggerHandler('tablesorter-initialized', table);\n                if (typeof c.initialized === 'function') {\n                    c.initialized(table);\n                }\n            },\n\n            bindMethods: function(c) {\n                var $table = c.$table,\n                    namespace = c.namespace,\n                    events = ('sortReset update updateRows updateAll updateHeaders addRows updateCell updateComplete ' +\n                        'sorton appendCache updateCache applyWidgetId applyWidgets refreshWidgets destroy mouseup ' +\n                        'mouseleave ').split(' ')\n                        .join(namespace + ' ');\n                // apply easy methods that trigger bound events\n                $table\n                    .unbind(events.replace(ts.regex.spaces, ' '))\n                    .bind('sortReset' + namespace, function(e, callback) {\n                        e.stopPropagation();\n                        // using this.config to ensure functions are getting a non-cached version of the config\n                        ts.sortReset(this.config, function(table) {\n                            if (table.isApplyingWidgets) {\n                                // multiple triggers in a row... filterReset, then sortReset - see #1361\n                                // wait to update widgets\n                                setTimeout(function() {\n                                    ts.applyWidget(table, '', callback);\n                                }, 100);\n                            } else {\n                                ts.applyWidget(table, '', callback);\n                            }\n                        });\n                    })\n                    .bind('updateAll' + namespace, function(e, resort, callback) {\n                        e.stopPropagation();\n                        ts.updateAll(this.config, resort, callback);\n                    })\n                    .bind('update' + namespace + ' updateRows' + namespace, function(e, resort, callback) {\n                        e.stopPropagation();\n                        ts.update(this.config, resort, callback);\n                    })\n                    .bind('updateHeaders' + namespace, function(e, callback) {\n                        e.stopPropagation();\n                        ts.updateHeaders(this.config, callback);\n                    })\n                    .bind('updateCell' + namespace, function(e, cell, resort, callback) {\n                        e.stopPropagation();\n                        ts.updateCell(this.config, cell, resort, callback);\n                    })\n                    .bind('addRows' + namespace, function(e, $row, resort, callback) {\n                        e.stopPropagation();\n                        ts.addRows(this.config, $row, resort, callback);\n                    })\n                    .bind('updateComplete' + namespace, function() {\n                        this.isUpdating = false;\n                    })\n                    .bind('sorton' + namespace, function(e, list, callback, init) {\n                        e.stopPropagation();\n                        ts.sortOn(this.config, list, callback, init);\n                    })\n                    .bind('appendCache' + namespace, function(e, callback, init) {\n                        e.stopPropagation();\n                        ts.appendCache(this.config, init);\n                        if ($.isFunction(callback)) {\n                            callback(this);\n                        }\n                    })\n                    // $tbodies variable is used by the tbody sorting widget\n                    .bind('updateCache' + namespace, function(e, callback, $tbodies) {\n                        e.stopPropagation();\n                        ts.updateCache(this.config, callback, $tbodies);\n                    })\n                    .bind('applyWidgetId' + namespace, function(e, id) {\n                        e.stopPropagation();\n                        ts.applyWidgetId(this, id);\n                    })\n                    .bind('applyWidgets' + namespace, function(e, callback) {\n                        e.stopPropagation();\n                        // apply widgets (false = not initializing)\n                        ts.applyWidget(this, false, callback);\n                    })\n                    .bind('refreshWidgets' + namespace, function(e, all, dontapply) {\n                        e.stopPropagation();\n                        ts.refreshWidgets(this, all, dontapply);\n                    })\n                    .bind('removeWidget' + namespace, function(e, name, refreshing) {\n                        e.stopPropagation();\n                        ts.removeWidget(this, name, refreshing);\n                    })\n                    .bind('destroy' + namespace, function(e, removeClasses, callback) {\n                        e.stopPropagation();\n                        ts.destroy(this, removeClasses, callback);\n                    })\n                    .bind('resetToLoadState' + namespace, function(e) {\n                        e.stopPropagation();\n                        // remove all widgets\n                        ts.removeWidget(this, true, false);\n                        var tmp = $.extend(true, {}, c.originalSettings);\n                        // restore original settings; this clears out current settings, but does not clear\n                        // values saved to storage.\n                        c = $.extend(true, {}, ts.defaults, tmp);\n                        c.originalSettings = tmp;\n                        this.hasInitialized = false;\n                        // setup the entire table again\n                        ts.setup(this, c);\n                    });\n            },\n\n            bindEvents: function(table, $headers, core) {\n                table = $(table)[0];\n                var tmp,\n                    c = table.config,\n                    namespace = c.namespace,\n                    downTarget = null;\n                if (core !== true) {\n                    $headers.addClass(namespace.slice(1) + '_extra_headers');\n                    tmp = ts.getClosest($headers, 'table');\n                    if (tmp.length && tmp[0].nodeName === 'TABLE' && tmp[0] !== table) {\n                        $(tmp[0]).addClass(namespace.slice(1) + '_extra_table');\n                    }\n                }\n                tmp = (c.pointerDown + ' ' + c.pointerUp + ' ' + c.pointerClick + ' sort keyup ')\n                    .replace(ts.regex.spaces, ' ')\n                    .split(' ')\n                    .join(namespace + ' ');\n                // apply event handling to headers and/or additional headers (stickyheaders, scroller, etc)\n                $headers\n                    // http://stackoverflow.com/questions/5312849/jquery-find-self;\n                    .find(c.selectorSort)\n                    .add($headers.filter(c.selectorSort))\n                    .unbind(tmp)\n                    .bind(tmp, function(e, external) {\n                        var $cell, cell, temp,\n                            $target = $(e.target),\n                            // wrap event type in spaces, so the match doesn't trigger on inner words\n                            type = ' ' + e.type + ' ';\n                        // only recognize left clicks\n                        if (((e.which || e.button) !== 1 && !type.match(' ' + c.pointerClick + ' | sort | keyup ')) ||\n                            // allow pressing enter\n                            (type === ' keyup ' && e.which !== ts.keyCodes.enter) ||\n                            // allow triggering a click event (e.which is undefined) & ignore physical clicks\n                            (type.match(' ' + c.pointerClick + ' ') && typeof e.which !== 'undefined')) {\n                            return;\n                        }\n                        // ignore mouseup if mousedown wasn't on the same target\n                        if (type.match(' ' + c.pointerUp + ' ') && downTarget !== e.target && external !== true) {\n                            return;\n                        }\n                        // set target on mousedown\n                        if (type.match(' ' + c.pointerDown + ' ')) {\n                            downTarget = e.target;\n                            // preventDefault needed or jQuery v1.3.2 and older throws an\n                            // \"Uncaught TypeError: handler.apply is not a function\" error\n                            temp = $target.jquery.split('.');\n                            if (temp[0] === '1' && temp[1] < 4) {\n                                e.preventDefault();\n                            }\n                            return;\n                        }\n                        downTarget = null;\n                        $cell = ts.getClosest($(this), '.' + ts.css.header);\n                        // prevent sort being triggered on form elements\n                        if (ts.regex.formElements.test(e.target.nodeName) ||\n                            // nosort class name, or elements within a nosort container\n                            $target.hasClass(c.cssNoSort) || $target.parents('.' + c.cssNoSort).length > 0 ||\n                            // disabled cell directly clicked\n                            $cell.hasClass('sorter-false') ||\n                            // elements within a button\n                            $target.parents('button').length > 0) {\n                            return !c.cancelSelection;\n                        }\n                        if (c.delayInit && ts.isEmptyObject(c.cache)) {\n                            ts.buildCache(c);\n                        }\n                        // use column index from data-attribute or index of current row; fixes #1116\n                        c.last.clickedIndex = $cell.attr('data-column') || $cell.index();\n                        cell = c.$headerIndexed[c.last.clickedIndex][0];\n                        if (cell && !cell.sortDisabled) {\n                            ts.initSort(c, cell, e);\n                        }\n                    });\n                if (c.cancelSelection) {\n                    // cancel selection\n                    $headers\n                        .attr('unselectable', 'on')\n                        .bind('selectstart', false)\n                        .css({\n                            'user-select': 'none',\n                            'MozUserSelect': 'none' // not needed for jQuery 1.8+\n                        });\n                }\n            },\n\n            buildHeaders: function(c) {\n                var $temp, icon, timer, indx;\n                c.headerList = [];\n                c.headerContent = [];\n                c.sortVars = [];\n                if (ts.debug(c, 'core')) {\n                    timer = new Date();\n                }\n                // children tr in tfoot - see issue #196 & #547\n                // don't pass table.config to computeColumnIndex here - widgets (math) pass it to \"quickly\" index tbody cells\n                c.columns = ts.computeColumnIndex(c.$table.children('thead, tfoot').children('tr'));\n                // add icon if cssIcon option exists\n                icon = c.cssIcon ?\n                    '<i class=\"' + (c.cssIcon === ts.css.icon ? ts.css.icon : c.cssIcon + ' ' + ts.css.icon) + '\"></i>' :\n                    '';\n                // redefine c.$headers here in case of an updateAll that replaces or adds an entire header cell - see #683\n                c.$headers = $($.map(c.$table.find(c.selectorHeaders), function(elem, index) {\n                    var configHeaders, header, column, template, tmp,\n                        $elem = $(elem);\n                    // ignore cell (don't add it to c.$headers) if row has ignoreRow class\n                    if (ts.getClosest($elem, 'tr').hasClass(c.cssIgnoreRow)) {\n                        return;\n                    }\n                    // transfer data-column to element if not th/td - #1459\n                    if (!/(th|td)/i.test(elem.nodeName)) {\n                        tmp = ts.getClosest($elem, 'th, td');\n                        $elem.attr('data-column', tmp.attr('data-column'));\n                    }\n                    // make sure to get header cell & not column indexed cell\n                    configHeaders = ts.getColumnData(c.table, c.headers, index, true);\n                    // save original header content\n                    c.headerContent[index] = $elem.html();\n                    // if headerTemplate is empty, don't reformat the header cell\n                    if (c.headerTemplate !== '' && !$elem.find('.' + ts.css.headerIn).length) {\n                        // set up header template\n                        template = c.headerTemplate\n                            .replace(ts.regex.templateContent, $elem.html())\n                            .replace(ts.regex.templateIcon, $elem.find('.' + ts.css.icon).length ? '' : icon);\n                        if (c.onRenderTemplate) {\n                            header = c.onRenderTemplate.apply($elem, [index, template]);\n                            // only change t if something is returned\n                            if (header && typeof header === 'string') {\n                                template = header;\n                            }\n                        }\n                        $elem.html('<div class=\"' + ts.css.headerIn + '\">' + template + '</div>'); // faster than wrapInner\n                    }\n                    if (c.onRenderHeader) {\n                        c.onRenderHeader.apply($elem, [index, c, c.$table]);\n                    }\n                    column = parseInt($elem.attr('data-column'), 10);\n                    elem.column = column;\n                    tmp = ts.getOrder(ts.getData($elem, configHeaders, 'sortInitialOrder') || c.sortInitialOrder);\n                    // this may get updated numerous times if there are multiple rows\n                    c.sortVars[column] = {\n                        count: -1, // set to -1 because clicking on the header automatically adds one\n                        order: tmp ?\n                            (c.sortReset ? [1, 0, 2] : [1, 0]) : // desc, asc, unsorted\n                            (c.sortReset ? [0, 1, 2] : [0, 1]),  // asc, desc, unsorted\n                        lockedOrder: false,\n                        sortedBy: ''\n                    };\n                    tmp = ts.getData($elem, configHeaders, 'lockedOrder') || false;\n                    if (typeof tmp !== 'undefined' && tmp !== false) {\n                        c.sortVars[column].lockedOrder = true;\n                        c.sortVars[column].order = ts.getOrder(tmp) ? [1, 1] : [0, 0];\n                    }\n                    // add cell to headerList\n                    c.headerList[index] = elem;\n                    $elem.addClass(ts.css.header + ' ' + c.cssHeader);\n                    // add to parent in case there are multiple rows\n                    ts.getClosest($elem, 'tr')\n                        .addClass(ts.css.headerRow + ' ' + c.cssHeaderRow)\n                        .attr('role', 'row');\n                    // allow keyboard cursor to focus on element\n                    if (c.tabIndex) {\n                        $elem.attr('tabindex', 0);\n                    }\n                    return elem;\n                }));\n                // cache headers per column\n                c.$headerIndexed = [];\n                for (indx = 0; indx < c.columns; indx++) {\n                    // colspan in header making a column undefined\n                    if (ts.isEmptyObject(c.sortVars[indx])) {\n                        c.sortVars[indx] = {};\n                    }\n                    // Use c.$headers.parent() in case selectorHeaders doesn't point to the th/td\n                    $temp = c.$headers.filter('[data-column=\"' + indx + '\"]');\n                    // target sortable column cells, unless there are none, then use non-sortable cells\n                    // .last() added in jQuery 1.4; use .filter(':last') to maintain compatibility with jQuery v1.2.6\n                    c.$headerIndexed[indx] = $temp.length ?\n                        $temp.not('.sorter-false').length ?\n                            $temp.not('.sorter-false').filter(':last') :\n                            $temp.filter(':last') :\n                        $();\n                }\n                c.$table.find(c.selectorHeaders).attr({\n                    scope: 'col',\n                    role: 'columnheader'\n                });\n                // enable/disable sorting\n                ts.updateHeader(c);\n                if (ts.debug(c, 'core')) {\n                    console.log('Built headers:' + ts.benchmark(timer));\n                    console.log(c.$headers);\n                }\n            },\n\n            // Use it to add a set of methods to table.config which will be available for all tables.\n            // This should be done before table initialization\n            addInstanceMethods: function(methods) {\n                $.extend(ts.instanceMethods, methods);\n            },\n\n            /*\n            █████▄ ▄████▄ █████▄ ▄█████ ██████ █████▄ ▄█████\n            ██▄▄██ ██▄▄██ ██▄▄██ ▀█▄    ██▄▄   ██▄▄██ ▀█▄\n            ██▀▀▀  ██▀▀██ ██▀██     ▀█▄ ██▀▀   ██▀██     ▀█▄\n            ██     ██  ██ ██  ██ █████▀ ██████ ██  ██ █████▀\n            */\n            setupParsers: function(c, $tbodies) {\n                var rows, list, span, max, colIndex, indx, header, configHeaders,\n                    noParser, parser, extractor, time, tbody, len,\n                    table = c.table,\n                    tbodyIndex = 0,\n                    debug = ts.debug(c, 'core'),\n                    debugOutput = {};\n                // update table bodies in case we start with an empty table\n                c.$tbodies = c.$table.children('tbody:not(.' + c.cssInfoBlock + ')');\n                tbody = typeof $tbodies === 'undefined' ? c.$tbodies : $tbodies;\n                len = tbody.length;\n                if (len === 0) {\n                    return debug ? console.warn('Warning: *Empty table!* Not building a parser cache') : '';\n                } else if (debug) {\n                    time = new Date();\n                    console[console.group ? 'group' : 'log']('Detecting parsers for each column');\n                }\n                list = {\n                    extractors: [],\n                    parsers: []\n                };\n                while (tbodyIndex < len) {\n                    rows = tbody[tbodyIndex].rows;\n                    if (rows.length) {\n                        colIndex = 0;\n                        max = c.columns;\n                        for (indx = 0; indx < max; indx++) {\n                            header = c.$headerIndexed[colIndex];\n                            if (header && header.length) {\n                                // get column indexed table cell; adding true parameter fixes #1362 but\n                                // it would break backwards compatibility...\n                                configHeaders = ts.getColumnData(table, c.headers, colIndex); // , true );\n                                // get column parser/extractor\n                                extractor = ts.getParserById(ts.getData(header, configHeaders, 'extractor'));\n                                parser = ts.getParserById(ts.getData(header, configHeaders, 'sorter'));\n                                noParser = ts.getData(header, configHeaders, 'parser') === 'false';\n                                // empty cells behaviour - keeping emptyToBottom for backwards compatibility\n                                c.empties[colIndex] = (\n                                    ts.getData(header, configHeaders, 'empty') ||\n                                    c.emptyTo || (c.emptyToBottom ? 'bottom' : 'top')).toLowerCase();\n                                // text strings behaviour in numerical sorts\n                                c.strings[colIndex] = (\n                                    ts.getData(header, configHeaders, 'string') ||\n                                    c.stringTo ||\n                                    'max').toLowerCase();\n                                if (noParser) {\n                                    parser = ts.getParserById('no-parser');\n                                }\n                                if (!extractor) {\n                                    // For now, maybe detect someday\n                                    extractor = false;\n                                }\n                                if (!parser) {\n                                    parser = ts.detectParserForColumn(c, rows, -1, colIndex);\n                                }\n                                if (debug) {\n                                    debugOutput['(' + colIndex + ') ' + header.text()] = {\n                                        parser: parser.id,\n                                        extractor: extractor ? extractor.id : 'none',\n                                        string: c.strings[colIndex],\n                                        empty: c.empties[colIndex]\n                                    };\n                                }\n                                list.parsers[colIndex] = parser;\n                                list.extractors[colIndex] = extractor;\n                                span = header[0].colSpan - 1;\n                                if (span > 0) {\n                                    colIndex += span;\n                                    max += span;\n                                    while (span + 1 > 0) {\n                                        // set colspan columns to use the same parsers & extractors\n                                        list.parsers[colIndex - span] = parser;\n                                        list.extractors[colIndex - span] = extractor;\n                                        span--;\n                                    }\n                                }\n                            }\n                            colIndex++;\n                        }\n                    }\n                    tbodyIndex += (list.parsers.length) ? len : 1;\n                }\n                if (debug) {\n                    if (!ts.isEmptyObject(debugOutput)) {\n                        console[console.table ? 'table' : 'log'](debugOutput);\n                    } else {\n                        console.warn('  No parsers detected!');\n                    }\n                    console.log('Completed detecting parsers' + ts.benchmark(time));\n                    if (console.groupEnd) {\n                        console.groupEnd();\n                    }\n                }\n                c.parsers = list.parsers;\n                c.extractors = list.extractors;\n            },\n\n            addParser: function(parser) {\n                var indx,\n                    len = ts.parsers.length,\n                    add = true;\n                for (indx = 0; indx < len; indx++) {\n                    if (ts.parsers[indx].id.toLowerCase() === parser.id.toLowerCase()) {\n                        add = false;\n                    }\n                }\n                if (add) {\n                    ts.parsers[ts.parsers.length] = parser;\n                }\n            },\n\n            getParserById: function(name) {\n                /*jshint eqeqeq:false */ // eslint-disable-next-line eqeqeq\n                if (name == 'false') {\n                    return false;\n                }\n                var indx,\n                    len = ts.parsers.length;\n                for (indx = 0; indx < len; indx++) {\n                    if (ts.parsers[indx].id.toLowerCase() === (name.toString()).toLowerCase()) {\n                        return ts.parsers[indx];\n                    }\n                }\n                return false;\n            },\n\n            detectParserForColumn: function(c, rows, rowIndex, cellIndex) {\n                var cur, $node, row,\n                    indx = ts.parsers.length,\n                    node = false,\n                    nodeValue = '',\n                    debug = ts.debug(c, 'core'),\n                    keepLooking = true;\n                while (nodeValue === '' && keepLooking) {\n                    rowIndex++;\n                    row = rows[rowIndex];\n                    // stop looking after 50 empty rows\n                    if (row && rowIndex < 50) {\n                        if (row.className.indexOf(ts.cssIgnoreRow) < 0) {\n                            node = rows[rowIndex].cells[cellIndex];\n                            nodeValue = ts.getElementText(c, node, cellIndex);\n                            $node = $(node);\n                            if (debug) {\n                                console.log('Checking if value was empty on row ' + rowIndex + ', column: ' +\n                                    cellIndex + ': \"' + nodeValue + '\"');\n                            }\n                        }\n                    } else {\n                        keepLooking = false;\n                    }\n                }\n                while (--indx >= 0) {\n                    cur = ts.parsers[indx];\n                    // ignore the default text parser because it will always be true\n                    if (cur && cur.id !== 'text' && cur.is && cur.is(nodeValue, c.table, node, $node)) {\n                        return cur;\n                    }\n                }\n                // nothing found, return the generic parser (text)\n                return ts.getParserById('text');\n            },\n\n            getElementText: function(c, node, cellIndex) {\n                if (!node) {\n                    return '';\n                }\n                var tmp,\n                    extract = c.textExtraction || '',\n                    // node could be a jquery object\n                    // http://jsperf.com/jquery-vs-instanceof-jquery/2\n                    $node = node.jquery ? node : $(node);\n                if (typeof extract === 'string') {\n                    // check data-attribute first when set to 'basic'; don't use node.innerText - it's really slow!\n                    // http://www.kellegous.com/j/2013/02/27/innertext-vs-textcontent/\n                    if (extract === 'basic' && typeof (tmp = $node.attr(c.textAttribute)) !== 'undefined') {\n                        return $.trim(tmp);\n                    }\n                    return $.trim(node.textContent || $node.text());\n                } else {\n                    if (typeof extract === 'function') {\n                        return $.trim(extract($node[0], c.table, cellIndex));\n                    } else if (typeof (tmp = ts.getColumnData(c.table, extract, cellIndex)) === 'function') {\n                        return $.trim(tmp($node[0], c.table, cellIndex));\n                    }\n                }\n                // fallback\n                return $.trim($node[0].textContent || $node.text());\n            },\n\n            // centralized function to extract/parse cell contents\n            getParsedText: function(c, cell, colIndex, txt) {\n                if (typeof txt === 'undefined') {\n                    txt = ts.getElementText(c, cell, colIndex);\n                }\n                // if no parser, make sure to return the txt\n                var val = '' + txt,\n                    parser = c.parsers[colIndex],\n                    extractor = c.extractors[colIndex];\n                if (parser) {\n                    // do extract before parsing, if there is one\n                    if (extractor && typeof extractor.format === 'function') {\n                        txt = extractor.format(txt, c.table, cell, colIndex);\n                    }\n                    // allow parsing if the string is empty, previously parsing would change it to zero,\n                    // in case the parser needs to extract data from the table cell attributes\n                    val = parser.id === 'no-parser' ? '' :\n                        // make sure txt is a string (extractor may have converted it)\n                        parser.format('' + txt, c.table, cell, colIndex);\n                    if (c.ignoreCase && typeof val === 'string') {\n                        val = val.toLowerCase();\n                    }\n                }\n                return val;\n            },\n\n            /*\n            ▄████▄ ▄████▄ ▄████▄ ██  ██ ██████\n            ██  ▀▀ ██▄▄██ ██  ▀▀ ██▄▄██ ██▄▄\n            ██  ▄▄ ██▀▀██ ██  ▄▄ ██▀▀██ ██▀▀\n            ▀████▀ ██  ██ ▀████▀ ██  ██ ██████\n            */\n            buildCache: function(c, callback, $tbodies) {\n                var cache, val, txt, rowIndex, colIndex, tbodyIndex, $tbody, $row,\n                    cols, $cells, cell, cacheTime, totalRows, rowData, prevRowData,\n                    colMax, span, cacheIndex, hasParser, max, len, index,\n                    table = c.table,\n                    parsers = c.parsers,\n                    debug = ts.debug(c, 'core');\n                // update tbody variable\n                c.$tbodies = c.$table.children('tbody:not(.' + c.cssInfoBlock + ')');\n                $tbody = typeof $tbodies === 'undefined' ? c.$tbodies : $tbodies,\n                    c.cache = {};\n                c.totalRows = 0;\n                // if no parsers found, return - it's an empty table.\n                if (!parsers) {\n                    return debug ? console.warn('Warning: *Empty table!* Not building a cache') : '';\n                }\n                if (debug) {\n                    cacheTime = new Date();\n                }\n                // processing icon\n                if (c.showProcessing) {\n                    ts.isProcessing(table, true);\n                }\n                for (tbodyIndex = 0; tbodyIndex < $tbody.length; tbodyIndex++) {\n                    colMax = []; // column max value per tbody\n                    cache = c.cache[tbodyIndex] = {\n                        normalized: [] // array of normalized row data; last entry contains 'rowData' above\n                        // colMax: #   // added at the end\n                    };\n\n                    totalRows = ($tbody[tbodyIndex] && $tbody[tbodyIndex].rows.length) || 0;\n                    for (rowIndex = 0; rowIndex < totalRows; ++rowIndex) {\n                        rowData = {\n                            // order: original row order #\n                            // $row : jQuery Object[]\n                            child: [], // child row text (filter widget)\n                            raw: []    // original row text\n                        };\n                        /** Add the table data to main data array */\n                        $row = $($tbody[tbodyIndex].rows[rowIndex]);\n                        cols = [];\n                        // ignore \"remove-me\" rows\n                        if ($row.hasClass(c.selectorRemove.slice(1))) {\n                            continue;\n                        }\n                        // if this is a child row, add it to the last row's children and continue to the next row\n                        // ignore child row class, if it is the first row\n                        if ($row.hasClass(c.cssChildRow) && rowIndex !== 0) {\n                            len = cache.normalized.length - 1;\n                            prevRowData = cache.normalized[len][c.columns];\n                            prevRowData.$row = prevRowData.$row.add($row);\n                            // add 'hasChild' class name to parent row\n                            if (!$row.prev().hasClass(c.cssChildRow)) {\n                                $row.prev().addClass(ts.css.cssHasChild);\n                            }\n                            // save child row content (un-parsed!)\n                            $cells = $row.children('th, td');\n                            len = prevRowData.child.length;\n                            prevRowData.child[len] = [];\n                            // child row content does not account for colspans/rowspans; so indexing may be off\n                            cacheIndex = 0;\n                            max = c.columns;\n                            for (colIndex = 0; colIndex < max; colIndex++) {\n                                cell = $cells[colIndex];\n                                if (cell) {\n                                    prevRowData.child[len][colIndex] = ts.getParsedText(c, cell, colIndex);\n                                    span = $cells[colIndex].colSpan - 1;\n                                    if (span > 0) {\n                                        cacheIndex += span;\n                                        max += span;\n                                    }\n                                }\n                                cacheIndex++;\n                            }\n                            // go to the next for loop\n                            continue;\n                        }\n                        rowData.$row = $row;\n                        rowData.order = rowIndex; // add original row position to rowCache\n                        cacheIndex = 0;\n                        max = c.columns;\n                        for (colIndex = 0; colIndex < max; ++colIndex) {\n                            cell = $row[0].cells[colIndex];\n                            if (cell && cacheIndex < c.columns) {\n                                hasParser = typeof parsers[cacheIndex] !== 'undefined';\n                                if (!hasParser && debug) {\n                                    console.warn('No parser found for row: ' + rowIndex + ', column: ' + colIndex +\n                                        '; cell containing: \"' + $(cell).text() + '\"; does it have a header?');\n                                }\n                                val = ts.getElementText(c, cell, cacheIndex);\n                                rowData.raw[cacheIndex] = val; // save original row text\n                                // save raw column text even if there is no parser set\n                                txt = ts.getParsedText(c, cell, cacheIndex, val);\n                                cols[cacheIndex] = txt;\n                                if (hasParser && (parsers[cacheIndex].type || '').toLowerCase() === 'numeric') {\n                                    // determine column max value (ignore sign)\n                                    colMax[cacheIndex] = Math.max(Math.abs(txt) || 0, colMax[cacheIndex] || 0);\n                                }\n                                // allow colSpan in tbody\n                                span = cell.colSpan - 1;\n                                if (span > 0) {\n                                    index = 0;\n                                    while (index <= span) {\n                                        // duplicate text (or not) to spanned columns\n                                        // instead of setting duplicate span to empty string, use textExtraction to try to get a value\n                                        // see http://stackoverflow.com/q/36449711/145346\n                                        txt = c.duplicateSpan || index === 0 ?\n                                            txt :\n                                            typeof c.textExtraction !== 'string' ?\n                                                ts.getElementText(c, cell, cacheIndex + index) || '' :\n                                                '';\n                                        rowData.raw[cacheIndex + index] = txt;\n                                        cols[cacheIndex + index] = txt;\n                                        index++;\n                                    }\n                                    cacheIndex += span;\n                                    max += span;\n                                }\n                            }\n                            cacheIndex++;\n                        }\n                        // ensure rowData is always in the same location (after the last column)\n                        cols[c.columns] = rowData;\n                        cache.normalized[cache.normalized.length] = cols;\n                    }\n                    cache.colMax = colMax;\n                    // total up rows, not including child rows\n                    c.totalRows += cache.normalized.length;\n\n                }\n                if (c.showProcessing) {\n                    ts.isProcessing(table); // remove processing icon\n                }\n                if (debug) {\n                    len = Math.min(5, c.cache[0].normalized.length);\n                    console[console.group ? 'group' : 'log']('Building cache for ' + c.totalRows +\n                        ' rows (showing ' + len + ' rows in log) and ' + c.columns + ' columns' +\n                        ts.benchmark(cacheTime));\n                    val = {};\n                    for (colIndex = 0; colIndex < c.columns; colIndex++) {\n                        for (cacheIndex = 0; cacheIndex < len; cacheIndex++) {\n                            if (!val['row: ' + cacheIndex]) {\n                                val['row: ' + cacheIndex] = {};\n                            }\n                            val['row: ' + cacheIndex][c.$headerIndexed[colIndex].text()] =\n                                c.cache[0].normalized[cacheIndex][colIndex];\n                        }\n                    }\n                    console[console.table ? 'table' : 'log'](val);\n                    if (console.groupEnd) {\n                        console.groupEnd();\n                    }\n                }\n                if ($.isFunction(callback)) {\n                    callback(table);\n                }\n            },\n\n            getColumnText: function(table, column, callback, rowFilter) {\n                table = $(table)[0];\n                var tbodyIndex, rowIndex, cache, row, tbodyLen, rowLen, raw, parsed, $cell, result,\n                    hasCallback = typeof callback === 'function',\n                    allColumns = column === 'all',\n                    data = {raw: [], parsed: [], $cell: []},\n                    c = table.config;\n                if (ts.isEmptyObject(c)) {\n                    if (ts.debug(c, 'core')) {\n                        console.warn('No cache found - aborting getColumnText function!');\n                    }\n                } else {\n                    tbodyLen = c.$tbodies.length;\n                    for (tbodyIndex = 0; tbodyIndex < tbodyLen; tbodyIndex++) {\n                        cache = c.cache[tbodyIndex].normalized;\n                        rowLen = cache.length;\n                        for (rowIndex = 0; rowIndex < rowLen; rowIndex++) {\n                            row = cache[rowIndex];\n                            if (rowFilter && !row[c.columns].$row.is(rowFilter)) {\n                                continue;\n                            }\n                            result = true;\n                            parsed = (allColumns) ? row.slice(0, c.columns) : row[column];\n                            row = row[c.columns];\n                            raw = (allColumns) ? row.raw : row.raw[column];\n                            $cell = (allColumns) ? row.$row.children() : row.$row.children().eq(column);\n                            if (hasCallback) {\n                                result = callback({\n                                    tbodyIndex: tbodyIndex,\n                                    rowIndex: rowIndex,\n                                    parsed: parsed,\n                                    raw: raw,\n                                    $row: row.$row,\n                                    $cell: $cell\n                                });\n                            }\n                            if (result !== false) {\n                                data.parsed[data.parsed.length] = parsed;\n                                data.raw[data.raw.length] = raw;\n                                data.$cell[data.$cell.length] = $cell;\n                            }\n                        }\n                    }\n                    // return everything\n                    return data;\n                }\n            },\n\n            /*\n            ██  ██ █████▄ █████▄ ▄████▄ ██████ ██████\n            ██  ██ ██▄▄██ ██  ██ ██▄▄██   ██   ██▄▄\n            ██  ██ ██▀▀▀  ██  ██ ██▀▀██   ██   ██▀▀\n            ▀████▀ ██     █████▀ ██  ██   ██   ██████\n            */\n            setHeadersCss: function(c) {\n                var indx, column,\n                    list = c.sortList,\n                    len = list.length,\n                    none = ts.css.sortNone + ' ' + c.cssNone,\n                    css = [ts.css.sortAsc + ' ' + c.cssAsc, ts.css.sortDesc + ' ' + c.cssDesc],\n                    cssIcon = [c.cssIconAsc, c.cssIconDesc, c.cssIconNone],\n                    aria = ['ascending', 'descending'],\n                    updateColumnSort = function($el, index) {\n                        $el\n                            .removeClass(none)\n                            .addClass(css[index])\n                            .attr('aria-sort', aria[index])\n                            .find('.' + ts.css.icon)\n                            .removeClass(cssIcon[2])\n                            .addClass(cssIcon[index]);\n                    },\n                    // find the footer\n                    $extras = c.$table\n                        .find('tfoot tr')\n                        .children('td, th')\n                        .add($(c.namespace + '_extra_headers'))\n                        .removeClass(css.join(' ')),\n                    // remove all header information\n                    $sorted = c.$headers\n                        .add($('thead ' + c.namespace + '_extra_headers'))\n                        .removeClass(css.join(' '))\n                        .addClass(none)\n                        .attr('aria-sort', 'none')\n                        .find('.' + ts.css.icon)\n                        .removeClass(cssIcon.join(' '))\n                        .end();\n                // add css none to all sortable headers\n                $sorted\n                    .not('.sorter-false')\n                    .find('.' + ts.css.icon)\n                    .addClass(cssIcon[2]);\n                // add disabled css icon class\n                if (c.cssIconDisabled) {\n                    $sorted\n                        .filter('.sorter-false')\n                        .find('.' + ts.css.icon)\n                        .addClass(c.cssIconDisabled);\n                }\n                for (indx = 0; indx < len; indx++) {\n                    // direction = 2 means reset!\n                    if (list[indx][1] !== 2) {\n                        // multicolumn sorting updating - see #1005\n                        // .not(function() {}) needs jQuery 1.4\n                        // filter(function(i, el) {}) <- el is undefined in jQuery v1.2.6\n                        $sorted = c.$headers.filter(function(i) {\n                            // only include headers that are in the sortList (this includes colspans)\n                            var include = true,\n                                $el = c.$headers.eq(i),\n                                col = parseInt($el.attr('data-column'), 10),\n                                end = col + ts.getClosest($el, 'th, td')[0].colSpan;\n                            for (; col < end; col++) {\n                                include = include ? include || ts.isValueInArray(col, c.sortList) > -1 : false;\n                            }\n                            return include;\n                        });\n\n                        // choose the :last in case there are nested columns\n                        $sorted = $sorted\n                            .not('.sorter-false')\n                            .filter('[data-column=\"' + list[indx][0] + '\"]' + (len === 1 ? ':last' : ''));\n                        if ($sorted.length) {\n                            for (column = 0; column < $sorted.length; column++) {\n                                if (!$sorted[column].sortDisabled) {\n                                    updateColumnSort($sorted.eq(column), list[indx][1]);\n                                }\n                            }\n                        }\n                        // add sorted class to footer & extra headers, if they exist\n                        if ($extras.length) {\n                            updateColumnSort($extras.filter('[data-column=\"' + list[indx][0] + '\"]'), list[indx][1]);\n                        }\n                    }\n                }\n                // add verbose aria labels\n                len = c.$headers.length;\n                for (indx = 0; indx < len; indx++) {\n                    ts.setColumnAriaLabel(c, c.$headers.eq(indx));\n                }\n            },\n\n            getClosest: function($el, selector) {\n                // jQuery v1.2.6 doesn't have closest()\n                if ($.fn.closest) {\n                    return $el.closest(selector);\n                }\n                return $el.is(selector) ?\n                    $el :\n                    $el.parents(selector).filter(':first');\n            },\n\n            // nextSort (optional), lets you disable next sort text\n            setColumnAriaLabel: function(c, $header, nextSort) {\n                if ($header.length) {\n                    var column = parseInt($header.attr('data-column'), 10),\n                        vars = c.sortVars[column],\n                        tmp = $header.hasClass(ts.css.sortAsc) ?\n                            'sortAsc' :\n                            $header.hasClass(ts.css.sortDesc) ? 'sortDesc' : 'sortNone',\n                        txt = $.trim($header.text()) + ': ' + ts.language[tmp];\n                    if ($header.hasClass('sorter-false') || nextSort === false) {\n                        txt += ts.language.sortDisabled;\n                    } else {\n                        tmp = (vars.count + 1) % vars.order.length;\n                        nextSort = vars.order[tmp];\n                        // if nextSort\n                        txt += ts.language[nextSort === 0 ? 'nextAsc' : nextSort === 1 ? 'nextDesc' : 'nextNone'];\n                    }\n                    $header.attr('aria-label', txt);\n                    if (vars.sortedBy) {\n                        $header.attr('data-sortedBy', vars.sortedBy);\n                    } else {\n                        $header.removeAttr('data-sortedBy');\n                    }\n                }\n            },\n\n            updateHeader: function(c) {\n                var index, isDisabled, $header, col,\n                    table = c.table,\n                    len = c.$headers.length;\n                for (index = 0; index < len; index++) {\n                    $header = c.$headers.eq(index);\n                    col = ts.getColumnData(table, c.headers, index, true);\n                    // add 'sorter-false' class if 'parser-false' is set\n                    isDisabled = ts.getData($header, col, 'sorter') === 'false' || ts.getData($header, col, 'parser') === 'false';\n                    ts.setColumnSort(c, $header, isDisabled);\n                }\n            },\n\n            setColumnSort: function(c, $header, isDisabled) {\n                var id = c.table.id;\n                $header[0].sortDisabled = isDisabled;\n                $header[isDisabled ? 'addClass' : 'removeClass']('sorter-false')\n                    .attr('aria-disabled', '' + isDisabled);\n                // disable tab index on disabled cells\n                if (c.tabIndex) {\n                    if (isDisabled) {\n                        $header.removeAttr('tabindex');\n                    } else {\n                        $header.attr('tabindex', '0');\n                    }\n                }\n                // aria-controls - requires table ID\n                if (id) {\n                    if (isDisabled) {\n                        $header.removeAttr('aria-controls');\n                    } else {\n                        $header.attr('aria-controls', id);\n                    }\n                }\n            },\n\n            updateHeaderSortCount: function(c, list) {\n                var col, dir, group, indx, primary, temp, val, order,\n                    sortList = list || c.sortList,\n                    len = sortList.length;\n                c.sortList = [];\n                for (indx = 0; indx < len; indx++) {\n                    val = sortList[indx];\n                    // ensure all sortList values are numeric - fixes #127\n                    col = parseInt(val[0], 10);\n                    // prevents error if sorton array is wrong\n                    if (col < c.columns) {\n\n                        // set order if not already defined - due to colspan header without associated header cell\n                        // adding this check prevents a javascript error\n                        if (!c.sortVars[col].order) {\n                            if (ts.getOrder(c.sortInitialOrder)) {\n                                order = c.sortReset ? [1, 0, 2] : [1, 0];\n                            } else {\n                                order = c.sortReset ? [0, 1, 2] : [0, 1];\n                            }\n                            c.sortVars[col].order = order;\n                            c.sortVars[col].count = 0;\n                        }\n\n                        order = c.sortVars[col].order;\n                        dir = ('' + val[1]).match(/^(1|d|s|o|n)/);\n                        dir = dir ? dir[0] : '';\n                        // 0/(a)sc (default), 1/(d)esc, (s)ame, (o)pposite, (n)ext\n                        switch (dir) {\n                            case '1' :\n                            case 'd' : // descending\n                                dir = 1;\n                                break;\n                            case 's' : // same direction (as primary column)\n                                // if primary sort is set to 's', make it ascending\n                                dir = primary || 0;\n                                break;\n                            case 'o' :\n                                temp = order[(primary || 0) % order.length];\n                                // opposite of primary column; but resets if primary resets\n                                dir = temp === 0 ? 1 : temp === 1 ? 0 : 2;\n                                break;\n                            case 'n' :\n                                dir = order[(++c.sortVars[col].count) % order.length];\n                                break;\n                            default : // ascending\n                                dir = 0;\n                                break;\n                        }\n                        primary = indx === 0 ? dir : primary;\n                        group = [col, parseInt(dir, 10) || 0];\n                        c.sortList[c.sortList.length] = group;\n                        dir = $.inArray(group[1], order); // fixes issue #167\n                        c.sortVars[col].count = dir >= 0 ? dir : group[1] % order.length;\n                    }\n                }\n            },\n\n            updateAll: function(c, resort, callback) {\n                var table = c.table;\n                table.isUpdating = true;\n                ts.refreshWidgets(table, true, true);\n                ts.buildHeaders(c);\n                ts.bindEvents(table, c.$headers, true);\n                ts.bindMethods(c);\n                ts.commonUpdate(c, resort, callback);\n            },\n\n            update: function(c, resort, callback) {\n                var table = c.table;\n                table.isUpdating = true;\n                // update sorting (if enabled/disabled)\n                ts.updateHeader(c);\n                ts.commonUpdate(c, resort, callback);\n            },\n\n            // simple header update - see #989\n            updateHeaders: function(c, callback) {\n                c.table.isUpdating = true;\n                ts.buildHeaders(c);\n                ts.bindEvents(c.table, c.$headers, true);\n                ts.resortComplete(c, callback);\n            },\n\n            updateCell: function(c, cell, resort, callback) {\n                // updateCell for child rows is a mess - we'll ignore them for now\n                // eventually I'll break out the \"update\" row cache code to make everything consistent\n                if ($(cell).closest('tr').hasClass(c.cssChildRow)) {\n                    console.warn('Tablesorter Warning! \"updateCell\" for child row content has been disabled, use \"update\" instead');\n                    return;\n                }\n                if (ts.isEmptyObject(c.cache)) {\n                    // empty table, do an update instead - fixes #1099\n                    ts.updateHeader(c);\n                    ts.commonUpdate(c, resort, callback);\n                    return;\n                }\n                c.table.isUpdating = true;\n                c.$table.find(c.selectorRemove).remove();\n                // get position from the dom\n                var tmp, indx, row, icell, cache, len,\n                    $tbodies = c.$tbodies,\n                    $cell = $(cell),\n                    // update cache - format: function( s, table, cell, cellIndex )\n                    // no closest in jQuery v1.2.6\n                    tbodyIndex = $tbodies.index(ts.getClosest($cell, 'tbody')),\n                    tbcache = c.cache[tbodyIndex],\n                    $row = ts.getClosest($cell, 'tr');\n                cell = $cell[0]; // in case cell is a jQuery object\n                // tbody may not exist if update is initialized while tbody is removed for processing\n                if ($tbodies.length && tbodyIndex >= 0) {\n                    row = $tbodies.eq(tbodyIndex).find('tr').not('.' + c.cssChildRow).index($row);\n                    cache = tbcache.normalized[row];\n                    len = $row[0].cells.length;\n                    if (len !== c.columns) {\n                        // colspan in here somewhere!\n                        icell = 0;\n                        tmp = false;\n                        for (indx = 0; indx < len; indx++) {\n                            if (!tmp && $row[0].cells[indx] !== cell) {\n                                icell += $row[0].cells[indx].colSpan;\n                            } else {\n                                tmp = true;\n                            }\n                        }\n                    } else {\n                        icell = $cell.index();\n                    }\n                    tmp = ts.getElementText(c, cell, icell); // raw\n                    cache[c.columns].raw[icell] = tmp;\n                    tmp = ts.getParsedText(c, cell, icell, tmp);\n                    cache[icell] = tmp; // parsed\n                    if ((c.parsers[icell].type || '').toLowerCase() === 'numeric') {\n                        // update column max value (ignore sign)\n                        tbcache.colMax[icell] = Math.max(Math.abs(tmp) || 0, tbcache.colMax[icell] || 0);\n                    }\n                    tmp = resort !== 'undefined' ? resort : c.resort;\n                    if (tmp !== false) {\n                        // widgets will be reapplied\n                        ts.checkResort(c, tmp, callback);\n                    } else {\n                        // don't reapply widgets is resort is false, just in case it causes\n                        // problems with element focus\n                        ts.resortComplete(c, callback);\n                    }\n                } else {\n                    if (ts.debug(c, 'core')) {\n                        console.error('updateCell aborted, tbody missing or not within the indicated table');\n                    }\n                    c.table.isUpdating = false;\n                }\n            },\n\n            addRows: function(c, $row, resort, callback) {\n                var txt, val, tbodyIndex, rowIndex, rows, cellIndex, len, order,\n                    cacheIndex, rowData, cells, cell, span,\n                    // allow passing a row string if only one non-info tbody exists in the table\n                    valid = typeof $row === 'string' && c.$tbodies.length === 1 && /<tr/.test($row || ''),\n                    table = c.table;\n                if (valid) {\n                    $row = $($row);\n                    c.$tbodies.append($row);\n                } else if (\n                    !$row ||\n                    // row is a jQuery object?\n                    !($row instanceof $) ||\n                    // row contained in the table?\n                    (ts.getClosest($row, 'table')[0] !== c.table)\n                ) {\n                    if (ts.debug(c, 'core')) {\n                        console.error('addRows method requires (1) a jQuery selector reference to rows that have already ' +\n                            'been added to the table, or (2) row HTML string to be added to a table with only one tbody');\n                    }\n                    return false;\n                }\n                table.isUpdating = true;\n                if (ts.isEmptyObject(c.cache)) {\n                    // empty table, do an update instead - fixes #450\n                    ts.updateHeader(c);\n                    ts.commonUpdate(c, resort, callback);\n                } else {\n                    rows = $row.filter('tr').attr('role', 'row').length;\n                    tbodyIndex = c.$tbodies.index($row.parents('tbody').filter(':first'));\n                    // fixes adding rows to an empty table - see issue #179\n                    if (!(c.parsers && c.parsers.length)) {\n                        ts.setupParsers(c);\n                    }\n                    // add each row\n                    for (rowIndex = 0; rowIndex < rows; rowIndex++) {\n                        cacheIndex = 0;\n                        len = $row[rowIndex].cells.length;\n                        order = c.cache[tbodyIndex].normalized.length;\n                        cells = [];\n                        rowData = {\n                            child: [],\n                            raw: [],\n                            $row: $row.eq(rowIndex),\n                            order: order\n                        };\n                        // add each cell\n                        for (cellIndex = 0; cellIndex < len; cellIndex++) {\n                            cell = $row[rowIndex].cells[cellIndex];\n                            txt = ts.getElementText(c, cell, cacheIndex);\n                            rowData.raw[cacheIndex] = txt;\n                            val = ts.getParsedText(c, cell, cacheIndex, txt);\n                            cells[cacheIndex] = val;\n                            if ((c.parsers[cacheIndex].type || '').toLowerCase() === 'numeric') {\n                                // update column max value (ignore sign)\n                                c.cache[tbodyIndex].colMax[cacheIndex] =\n                                    Math.max(Math.abs(val) || 0, c.cache[tbodyIndex].colMax[cacheIndex] || 0);\n                            }\n                            span = cell.colSpan - 1;\n                            if (span > 0) {\n                                cacheIndex += span;\n                            }\n                            cacheIndex++;\n                        }\n                        // add the row data to the end\n                        cells[c.columns] = rowData;\n                        // update cache\n                        c.cache[tbodyIndex].normalized[order] = cells;\n                    }\n                    // resort using current settings\n                    ts.checkResort(c, resort, callback);\n                }\n            },\n\n            updateCache: function(c, callback, $tbodies) {\n                // rebuild parsers\n                if (!(c.parsers && c.parsers.length)) {\n                    ts.setupParsers(c, $tbodies);\n                }\n                // rebuild the cache map\n                ts.buildCache(c, callback, $tbodies);\n            },\n\n            // init flag (true) used by pager plugin to prevent widget application\n            // renamed from appendToTable\n            appendCache: function(c, init) {\n                var parsed, totalRows, $tbody, $curTbody, rowIndex, tbodyIndex, appendTime,\n                    table = c.table,\n                    $tbodies = c.$tbodies,\n                    rows = [],\n                    cache = c.cache;\n                // empty table - fixes #206/#346\n                if (ts.isEmptyObject(cache)) {\n                    // run pager appender in case the table was just emptied\n                    return c.appender ? c.appender(table, rows) :\n                        table.isUpdating ? c.$table.triggerHandler('updateComplete', table) : ''; // Fixes #532\n                }\n                if (ts.debug(c, 'core')) {\n                    appendTime = new Date();\n                }\n                for (tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++) {\n                    $tbody = $tbodies.eq(tbodyIndex);\n                    if ($tbody.length) {\n                        // detach tbody for manipulation\n                        $curTbody = ts.processTbody(table, $tbody, true);\n                        parsed = cache[tbodyIndex].normalized;\n                        totalRows = parsed.length;\n                        for (rowIndex = 0; rowIndex < totalRows; rowIndex++) {\n                            rows[rows.length] = parsed[rowIndex][c.columns].$row;\n                            // removeRows used by the pager plugin; don't render if using ajax - fixes #411\n                            if (!c.appender || (c.pager && !c.pager.removeRows && !c.pager.ajax)) {\n                                $curTbody.append(parsed[rowIndex][c.columns].$row);\n                            }\n                        }\n                        // restore tbody\n                        ts.processTbody(table, $curTbody, false);\n                    }\n                }\n                if (c.appender) {\n                    c.appender(table, rows);\n                }\n                if (ts.debug(c, 'core')) {\n                    console.log('Rebuilt table' + ts.benchmark(appendTime));\n                }\n                // apply table widgets; but not before ajax completes\n                if (!init && !c.appender) {\n                    ts.applyWidget(table);\n                }\n                if (table.isUpdating) {\n                    c.$table.triggerHandler('updateComplete', table);\n                }\n            },\n\n            commonUpdate: function(c, resort, callback) {\n                // remove rows/elements before update\n                c.$table.find(c.selectorRemove).remove();\n                // rebuild parsers\n                ts.setupParsers(c);\n                // rebuild the cache map\n                ts.buildCache(c);\n                ts.checkResort(c, resort, callback);\n            },\n\n            /*\n            ▄█████ ▄████▄ █████▄ ██████ ██ █████▄ ▄████▄\n            ▀█▄    ██  ██ ██▄▄██   ██   ██ ██  ██ ██ ▄▄▄\n               ▀█▄ ██  ██ ██▀██    ██   ██ ██  ██ ██ ▀██\n            █████▀ ▀████▀ ██  ██   ██   ██ ██  ██ ▀████▀\n            */\n            initSort: function(c, cell, event) {\n                if (c.table.isUpdating) {\n                    // let any updates complete before initializing a sort\n                    return setTimeout(function() {\n                        ts.initSort(c, cell, event);\n                    }, 50);\n                }\n\n                var arry, indx, headerIndx, dir, temp, tmp, $header,\n                    notMultiSort = !event[c.sortMultiSortKey],\n                    table = c.table,\n                    len = c.$headers.length,\n                    th = ts.getClosest($(cell), 'th, td'),\n                    col = parseInt(th.attr('data-column'), 10),\n                    sortedBy = event.type === 'mouseup' ? 'user' : event.type,\n                    order = c.sortVars[col].order;\n                th = th[0];\n                // Only call sortStart if sorting is enabled\n                c.$table.triggerHandler('sortStart', table);\n                // get current column sort order\n                tmp = (c.sortVars[col].count + 1) % order.length;\n                c.sortVars[col].count = event[c.sortResetKey] ? 2 : tmp;\n                // reset all sorts on non-current column - issue #30\n                if (c.sortRestart) {\n                    for (headerIndx = 0; headerIndx < len; headerIndx++) {\n                        $header = c.$headers.eq(headerIndx);\n                        tmp = parseInt($header.attr('data-column'), 10);\n                        // only reset counts on columns that weren't just clicked on and if not included in a multisort\n                        if (col !== tmp && (notMultiSort || $header.hasClass(ts.css.sortNone))) {\n                            c.sortVars[tmp].count = -1;\n                        }\n                    }\n                }\n                // user only wants to sort on one column\n                if (notMultiSort) {\n                    $.each(c.sortVars, function(i) {\n                        c.sortVars[i].sortedBy = '';\n                    });\n                    // flush the sort list\n                    c.sortList = [];\n                    c.last.sortList = [];\n                    if (c.sortForce !== null) {\n                        arry = c.sortForce;\n                        for (indx = 0; indx < arry.length; indx++) {\n                            if (arry[indx][0] !== col) {\n                                c.sortList[c.sortList.length] = arry[indx];\n                                c.sortVars[arry[indx][0]].sortedBy = 'sortForce';\n                            }\n                        }\n                    }\n                    // add column to sort list\n                    dir = order[c.sortVars[col].count];\n                    if (dir < 2) {\n                        c.sortList[c.sortList.length] = [col, dir];\n                        c.sortVars[col].sortedBy = sortedBy;\n                        // add other columns if header spans across multiple\n                        if (th.colSpan > 1) {\n                            for (indx = 1; indx < th.colSpan; indx++) {\n                                c.sortList[c.sortList.length] = [col + indx, dir];\n                                // update count on columns in colSpan\n                                c.sortVars[col + indx].count = $.inArray(dir, order);\n                                c.sortVars[col + indx].sortedBy = sortedBy;\n                            }\n                        }\n                    }\n                    // multi column sorting\n                } else {\n                    // get rid of the sortAppend before adding more - fixes issue #115 & #523\n                    c.sortList = $.extend([], c.last.sortList);\n\n                    // the user has clicked on an already sorted column\n                    if (ts.isValueInArray(col, c.sortList) >= 0) {\n                        // reverse the sorting direction\n                        c.sortVars[col].sortedBy = sortedBy;\n                        for (indx = 0; indx < c.sortList.length; indx++) {\n                            tmp = c.sortList[indx];\n                            if (tmp[0] === col) {\n                                // order.count seems to be incorrect when compared to cell.count\n                                tmp[1] = order[c.sortVars[col].count];\n                                if (tmp[1] === 2) {\n                                    c.sortList.splice(indx, 1);\n                                    c.sortVars[col].count = -1;\n                                }\n                            }\n                        }\n                    } else {\n                        // add column to sort list array\n                        dir = order[c.sortVars[col].count];\n                        c.sortVars[col].sortedBy = sortedBy;\n                        if (dir < 2) {\n                            c.sortList[c.sortList.length] = [col, dir];\n                            // add other columns if header spans across multiple\n                            if (th.colSpan > 1) {\n                                for (indx = 1; indx < th.colSpan; indx++) {\n                                    c.sortList[c.sortList.length] = [col + indx, dir];\n                                    // update count on columns in colSpan\n                                    c.sortVars[col + indx].count = $.inArray(dir, order);\n                                    c.sortVars[col + indx].sortedBy = sortedBy;\n                                }\n                            }\n                        }\n                    }\n                }\n                // save sort before applying sortAppend\n                c.last.sortList = $.extend([], c.sortList);\n                if (c.sortList.length && c.sortAppend) {\n                    arry = $.isArray(c.sortAppend) ? c.sortAppend : c.sortAppend[c.sortList[0][0]];\n                    if (!ts.isEmptyObject(arry)) {\n                        for (indx = 0; indx < arry.length; indx++) {\n                            if (arry[indx][0] !== col && ts.isValueInArray(arry[indx][0], c.sortList) < 0) {\n                                dir = arry[indx][1];\n                                temp = ('' + dir).match(/^(a|d|s|o|n)/);\n                                if (temp) {\n                                    tmp = c.sortList[0][1];\n                                    switch (temp[0]) {\n                                        case 'd' :\n                                            dir = 1;\n                                            break;\n                                        case 's' :\n                                            dir = tmp;\n                                            break;\n                                        case 'o' :\n                                            dir = tmp === 0 ? 1 : 0;\n                                            break;\n                                        case 'n' :\n                                            dir = (tmp + 1) % order.length;\n                                            break;\n                                        default:\n                                            dir = 0;\n                                            break;\n                                    }\n                                }\n                                c.sortList[c.sortList.length] = [arry[indx][0], dir];\n                                c.sortVars[arry[indx][0]].sortedBy = 'sortAppend';\n                            }\n                        }\n                    }\n                }\n                // sortBegin event triggered immediately before the sort\n                c.$table.triggerHandler('sortBegin', table);\n                // setTimeout needed so the processing icon shows up\n                setTimeout(function() {\n                    // set css for headers\n                    ts.setHeadersCss(c);\n                    ts.multisort(c);\n                    ts.appendCache(c);\n                    c.$table.triggerHandler('sortBeforeEnd', table);\n                    c.$table.triggerHandler('sortEnd', table);\n                }, 1);\n            },\n\n            // sort multiple columns\n            multisort: function(c) { /*jshint loopfunc:true */\n                var tbodyIndex, sortTime, colMax, rows, tmp,\n                    table = c.table,\n                    sorter = [],\n                    dir = 0,\n                    textSorter = c.textSorter || '',\n                    sortList = c.sortList,\n                    sortLen = sortList.length,\n                    len = c.$tbodies.length;\n                if (c.serverSideSorting || ts.isEmptyObject(c.cache)) {\n                    // empty table - fixes #206/#346\n                    return;\n                }\n                if (ts.debug(c, 'core')) {\n                    sortTime = new Date();\n                }\n                // cache textSorter to optimize speed\n                if (typeof textSorter === 'object') {\n                    colMax = c.columns;\n                    while (colMax--) {\n                        tmp = ts.getColumnData(table, textSorter, colMax);\n                        if (typeof tmp === 'function') {\n                            sorter[colMax] = tmp;\n                        }\n                    }\n                }\n                for (tbodyIndex = 0; tbodyIndex < len; tbodyIndex++) {\n                    colMax = c.cache[tbodyIndex].colMax;\n                    rows = c.cache[tbodyIndex].normalized;\n\n                    rows.sort(function(a, b) {\n                        var sortIndex, num, col, order, sort, x, y;\n                        // rows is undefined here in IE, so don't use it!\n                        for (sortIndex = 0; sortIndex < sortLen; sortIndex++) {\n                            col = sortList[sortIndex][0];\n                            order = sortList[sortIndex][1];\n                            // sort direction, true = asc, false = desc\n                            dir = order === 0;\n\n                            if (c.sortStable && a[col] === b[col] && sortLen === 1) {\n                                return a[c.columns].order - b[c.columns].order;\n                            }\n\n                            // fallback to natural sort since it is more robust\n                            num = /n/i.test(ts.getSortType(c.parsers, col));\n                            if (num && c.strings[col]) {\n                                // sort strings in numerical columns\n                                if (typeof (ts.string[c.strings[col]]) === 'boolean') {\n                                    num = (dir ? 1 : -1) * (ts.string[c.strings[col]] ? -1 : 1);\n                                } else {\n                                    num = (c.strings[col]) ? ts.string[c.strings[col]] || 0 : 0;\n                                }\n                                // fall back to built-in numeric sort\n                                // var sort = $.tablesorter['sort' + s]( a[col], b[col], dir, colMax[col], table );\n                                sort = c.numberSorter ? c.numberSorter(a[col], b[col], dir, colMax[col], table) :\n                                    ts['sortNumeric' + (dir ? 'Asc' : 'Desc')](a[col], b[col], num, colMax[col], col, c);\n                            } else {\n                                // set a & b depending on sort direction\n                                x = dir ? a : b;\n                                y = dir ? b : a;\n                                // text sort function\n                                if (typeof textSorter === 'function') {\n                                    // custom OVERALL text sorter\n                                    sort = textSorter(x[col], y[col], dir, col, table);\n                                } else if (typeof sorter[col] === 'function') {\n                                    // custom text sorter for a SPECIFIC COLUMN\n                                    sort = sorter[col](x[col], y[col], dir, col, table);\n                                } else {\n                                    // fall back to natural sort\n                                    sort = ts['sortNatural' + (dir ? 'Asc' : 'Desc')](a[col] || '', b[col] || '', col, c);\n                                }\n                            }\n                            if (sort) {\n                                return sort;\n                            }\n                        }\n                        return a[c.columns].order - b[c.columns].order;\n                    });\n                }\n                if (ts.debug(c, 'core')) {\n                    console.log('Applying sort ' + sortList.toString() + ts.benchmark(sortTime));\n                }\n            },\n\n            resortComplete: function(c, callback) {\n                if (c.table.isUpdating) {\n                    c.$table.triggerHandler('updateComplete', c.table);\n                }\n                if ($.isFunction(callback)) {\n                    callback(c.table);\n                }\n            },\n\n            checkResort: function(c, resort, callback) {\n                var sortList = $.isArray(resort) ? resort : c.sortList,\n                    // if no resort parameter is passed, fallback to config.resort (true by default)\n                    resrt = typeof resort === 'undefined' ? c.resort : resort;\n                // don't try to resort if the table is still processing\n                // this will catch spamming of the updateCell method\n                if (resrt !== false && !c.serverSideSorting && !c.table.isProcessing) {\n                    if (sortList.length) {\n                        ts.sortOn(c, sortList, function() {\n                            ts.resortComplete(c, callback);\n                        }, true);\n                    } else {\n                        ts.sortReset(c, function() {\n                            ts.resortComplete(c, callback);\n                            ts.applyWidget(c.table, false);\n                        });\n                    }\n                } else {\n                    ts.resortComplete(c, callback);\n                    ts.applyWidget(c.table, false);\n                }\n            },\n\n            sortOn: function(c, list, callback, init) {\n                var indx,\n                    table = c.table;\n                c.$table.triggerHandler('sortStart', table);\n                for (indx = 0; indx < c.columns; indx++) {\n                    c.sortVars[indx].sortedBy = ts.isValueInArray(indx, list) > -1 ? 'sorton' : '';\n                }\n                // update header count index\n                ts.updateHeaderSortCount(c, list);\n                // set css for headers\n                ts.setHeadersCss(c);\n                // fixes #346\n                if (c.delayInit && ts.isEmptyObject(c.cache)) {\n                    ts.buildCache(c);\n                }\n                c.$table.triggerHandler('sortBegin', table);\n                // sort the table and append it to the dom\n                ts.multisort(c);\n                ts.appendCache(c, init);\n                c.$table.triggerHandler('sortBeforeEnd', table);\n                c.$table.triggerHandler('sortEnd', table);\n                ts.applyWidget(table);\n                if ($.isFunction(callback)) {\n                    callback(table);\n                }\n            },\n\n            sortReset: function(c, callback) {\n                c.sortList = [];\n                var indx;\n                for (indx = 0; indx < c.columns; indx++) {\n                    c.sortVars[indx].count = -1;\n                    c.sortVars[indx].sortedBy = '';\n                }\n                ts.setHeadersCss(c);\n                ts.multisort(c);\n                ts.appendCache(c);\n                if ($.isFunction(callback)) {\n                    callback(c.table);\n                }\n            },\n\n            getSortType: function(parsers, column) {\n                return (parsers && parsers[column]) ? parsers[column].type || '' : '';\n            },\n\n            getOrder: function(val) {\n                // look for 'd' in 'desc' order; return true\n                return (/^d/i.test(val) || val === 1);\n            },\n\n            // Natural sort - https://github.com/overset/javascript-natural-sort (date sorting removed)\n            sortNatural: function(a, b) {\n                if (a === b) {\n                    return 0;\n                }\n                a = (a || '').toString();\n                b = (b || '').toString();\n                var aNum, bNum, aFloat, bFloat, indx, max,\n                    regex = ts.regex;\n                // first try and sort Hex codes\n                if (regex.hex.test(b)) {\n                    aNum = parseInt(a.match(regex.hex), 16);\n                    bNum = parseInt(b.match(regex.hex), 16);\n                    if (aNum < bNum) {\n                        return -1;\n                    }\n                    if (aNum > bNum) {\n                        return 1;\n                    }\n                }\n                // chunk/tokenize\n                aNum = a.replace(regex.chunk, '\\\\0$1\\\\0').replace(regex.chunks, '').split('\\\\0');\n                bNum = b.replace(regex.chunk, '\\\\0$1\\\\0').replace(regex.chunks, '').split('\\\\0');\n                max = Math.max(aNum.length, bNum.length);\n                // natural sorting through split numeric strings and default strings\n                for (indx = 0; indx < max; indx++) {\n                    // find floats not starting with '0', string or 0 if not defined\n                    aFloat = isNaN(aNum[indx]) ? aNum[indx] || 0 : parseFloat(aNum[indx]) || 0;\n                    bFloat = isNaN(bNum[indx]) ? bNum[indx] || 0 : parseFloat(bNum[indx]) || 0;\n                    // handle numeric vs string comparison - number < string - (Kyle Adams)\n                    if (isNaN(aFloat) !== isNaN(bFloat)) {\n                        return isNaN(aFloat) ? 1 : -1;\n                    }\n                    // rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'\n                    if (typeof aFloat !== typeof bFloat) {\n                        aFloat += '';\n                        bFloat += '';\n                    }\n                    if (aFloat < bFloat) {\n                        return -1;\n                    }\n                    if (aFloat > bFloat) {\n                        return 1;\n                    }\n                }\n                return 0;\n            },\n\n            sortNaturalAsc: function(a, b, col, c) {\n                if (a === b) {\n                    return 0;\n                }\n                var empty = ts.string[(c.empties[col] || c.emptyTo)];\n                if (a === '' && empty !== 0) {\n                    return typeof empty === 'boolean' ? (empty ? -1 : 1) : -empty || -1;\n                }\n                if (b === '' && empty !== 0) {\n                    return typeof empty === 'boolean' ? (empty ? 1 : -1) : empty || 1;\n                }\n                return ts.sortNatural(a, b);\n            },\n\n            sortNaturalDesc: function(a, b, col, c) {\n                if (a === b) {\n                    return 0;\n                }\n                var empty = ts.string[(c.empties[col] || c.emptyTo)];\n                if (a === '' && empty !== 0) {\n                    return typeof empty === 'boolean' ? (empty ? -1 : 1) : empty || 1;\n                }\n                if (b === '' && empty !== 0) {\n                    return typeof empty === 'boolean' ? (empty ? 1 : -1) : -empty || -1;\n                }\n                return ts.sortNatural(b, a);\n            },\n\n            // basic alphabetical sort\n            sortText: function(a, b) {\n                return a > b ? 1 : (a < b ? -1 : 0);\n            },\n\n            // return text string value by adding up ascii value\n            // so the text is somewhat sorted when using a digital sort\n            // this is NOT an alphanumeric sort\n            getTextValue: function(val, num, max) {\n                if (max) {\n                    // make sure the text value is greater than the max numerical value (max)\n                    var indx,\n                        len = val ? val.length : 0,\n                        n = max + num;\n                    for (indx = 0; indx < len; indx++) {\n                        n += val.charCodeAt(indx);\n                    }\n                    return num * n;\n                }\n                return 0;\n            },\n\n            sortNumericAsc: function(a, b, num, max, col, c) {\n                if (a === b) {\n                    return 0;\n                }\n                var empty = ts.string[(c.empties[col] || c.emptyTo)];\n                if (a === '' && empty !== 0) {\n                    return typeof empty === 'boolean' ? (empty ? -1 : 1) : -empty || -1;\n                }\n                if (b === '' && empty !== 0) {\n                    return typeof empty === 'boolean' ? (empty ? 1 : -1) : empty || 1;\n                }\n                if (isNaN(a)) {\n                    a = ts.getTextValue(a, num, max);\n                }\n                if (isNaN(b)) {\n                    b = ts.getTextValue(b, num, max);\n                }\n                return a - b;\n            },\n\n            sortNumericDesc: function(a, b, num, max, col, c) {\n                if (a === b) {\n                    return 0;\n                }\n                var empty = ts.string[(c.empties[col] || c.emptyTo)];\n                if (a === '' && empty !== 0) {\n                    return typeof empty === 'boolean' ? (empty ? -1 : 1) : empty || 1;\n                }\n                if (b === '' && empty !== 0) {\n                    return typeof empty === 'boolean' ? (empty ? 1 : -1) : -empty || -1;\n                }\n                if (isNaN(a)) {\n                    a = ts.getTextValue(a, num, max);\n                }\n                if (isNaN(b)) {\n                    b = ts.getTextValue(b, num, max);\n                }\n                return b - a;\n            },\n\n            sortNumeric: function(a, b) {\n                return a - b;\n            },\n\n            /*\n            ██ ██ ██ ██ █████▄ ▄████▄ ██████ ██████ ▄█████\n            ██ ██ ██ ██ ██  ██ ██ ▄▄▄ ██▄▄     ██   ▀█▄\n            ██ ██ ██ ██ ██  ██ ██ ▀██ ██▀▀     ██      ▀█▄\n            ███████▀ ██ █████▀ ▀████▀ ██████   ██   █████▀\n            */\n            addWidget: function(widget) {\n                if (widget.id && !ts.isEmptyObject(ts.getWidgetById(widget.id))) {\n                    console.warn('\"' + widget.id + '\" widget was loaded more than once!');\n                }\n                ts.widgets[ts.widgets.length] = widget;\n            },\n\n            hasWidget: function($table, name) {\n                $table = $($table);\n                return $table.length && $table[0].config && $table[0].config.widgetInit[name] || false;\n            },\n\n            getWidgetById: function(name) {\n                var indx, widget,\n                    len = ts.widgets.length;\n                for (indx = 0; indx < len; indx++) {\n                    widget = ts.widgets[indx];\n                    if (widget && widget.id && widget.id.toLowerCase() === name.toLowerCase()) {\n                        return widget;\n                    }\n                }\n            },\n\n            applyWidgetOptions: function(table) {\n                var indx, widget, wo,\n                    c = table.config,\n                    len = c.widgets.length;\n                if (len) {\n                    for (indx = 0; indx < len; indx++) {\n                        widget = ts.getWidgetById(c.widgets[indx]);\n                        if (widget && widget.options) {\n                            wo = $.extend(true, {}, widget.options);\n                            c.widgetOptions = $.extend(true, wo, c.widgetOptions);\n                            // add widgetOptions to defaults for option validator\n                            $.extend(true, ts.defaults.widgetOptions, widget.options);\n                        }\n                    }\n                }\n            },\n\n            addWidgetFromClass: function(table) {\n                var len, indx,\n                    c = table.config,\n                    // look for widgets to apply from table class\n                    // don't match from 'ui-widget-content'; use \\S instead of \\w to include widgets\n                    // with dashes in the name, e.g. \"widget-test-2\" extracts out \"test-2\"\n                    regex = '^' + c.widgetClass.replace(ts.regex.templateName, '(\\\\S+)+') + '$',\n                    widgetClass = new RegExp(regex, 'g'),\n                    // split up table class (widget id's can include dashes) - stop using match\n                    // otherwise only one widget gets extracted, see #1109\n                    widgets = (table.className || '').split(ts.regex.spaces);\n                if (widgets.length) {\n                    len = widgets.length;\n                    for (indx = 0; indx < len; indx++) {\n                        if (widgets[indx].match(widgetClass)) {\n                            c.widgets[c.widgets.length] = widgets[indx].replace(widgetClass, '$1');\n                        }\n                    }\n                }\n            },\n\n            applyWidgetId: function(table, id, init) {\n                table = $(table)[0];\n                var applied, time, name,\n                    c = table.config,\n                    wo = c.widgetOptions,\n                    debug = ts.debug(c, 'core'),\n                    widget = ts.getWidgetById(id);\n                if (widget) {\n                    name = widget.id;\n                    applied = false;\n                    // add widget name to option list so it gets reapplied after sorting, filtering, etc\n                    if ($.inArray(name, c.widgets) < 0) {\n                        c.widgets[c.widgets.length] = name;\n                    }\n                    if (debug) {\n                        time = new Date();\n                    }\n\n                    if (init || !(c.widgetInit[name])) {\n                        // set init flag first to prevent calling init more than once (e.g. pager)\n                        c.widgetInit[name] = true;\n                        if (table.hasInitialized) {\n                            // don't reapply widget options on tablesorter init\n                            ts.applyWidgetOptions(table);\n                        }\n                        if (typeof widget.init === 'function') {\n                            applied = true;\n                            if (debug) {\n                                console[console.group ? 'group' : 'log']('Initializing ' + name + ' widget');\n                            }\n                            widget.init(table, widget, c, wo);\n                        }\n                    }\n                    if (!init && typeof widget.format === 'function') {\n                        applied = true;\n                        if (debug) {\n                            console[console.group ? 'group' : 'log']('Updating ' + name + ' widget');\n                        }\n                        widget.format(table, c, wo, false);\n                    }\n                    if (debug) {\n                        if (applied) {\n                            console.log('Completed ' + (init ? 'initializing ' : 'applying ') + name + ' widget' + ts.benchmark(time));\n                            if (console.groupEnd) {\n                                console.groupEnd();\n                            }\n                        }\n                    }\n                }\n            },\n\n            applyWidget: function(table, init, callback) {\n                table = $(table)[0]; // in case this is called externally\n                var indx, len, names, widget, time,\n                    c = table.config,\n                    debug = ts.debug(c, 'core'),\n                    widgets = [];\n                // prevent numerous consecutive widget applications\n                if (init !== false && table.hasInitialized && (table.isApplyingWidgets || table.isUpdating)) {\n                    return;\n                }\n                if (debug) {\n                    time = new Date();\n                }\n                ts.addWidgetFromClass(table);\n                // prevent \"tablesorter-ready\" from firing multiple times in a row\n                clearTimeout(c.timerReady);\n                if (c.widgets.length) {\n                    table.isApplyingWidgets = true;\n                    // ensure unique widget ids\n                    c.widgets = $.grep(c.widgets, function(val, index) {\n                        return $.inArray(val, c.widgets) === index;\n                    });\n                    names = c.widgets || [];\n                    len = names.length;\n                    // build widget array & add priority as needed\n                    for (indx = 0; indx < len; indx++) {\n                        widget = ts.getWidgetById(names[indx]);\n                        if (widget && widget.id) {\n                            // set priority to 10 if not defined\n                            if (!widget.priority) {\n                                widget.priority = 10;\n                            }\n                            widgets[indx] = widget;\n                        } else if (debug) {\n                            console.warn('\"' + names[indx] + '\" was enabled, but the widget code has not been loaded!');\n                        }\n                    }\n                    // sort widgets by priority\n                    widgets.sort(function(a, b) {\n                        return a.priority < b.priority ? -1 : a.priority === b.priority ? 0 : 1;\n                    });\n                    // add/update selected widgets\n                    len = widgets.length;\n                    if (debug) {\n                        console[console.group ? 'group' : 'log']('Start ' + (init ? 'initializing' : 'applying') + ' widgets');\n                    }\n                    for (indx = 0; indx < len; indx++) {\n                        widget = widgets[indx];\n                        if (widget && widget.id) {\n                            ts.applyWidgetId(table, widget.id, init);\n                        }\n                    }\n                    if (debug && console.groupEnd) {\n                        console.groupEnd();\n                    }\n                }\n                c.timerReady = setTimeout(function() {\n                    table.isApplyingWidgets = false;\n                    $.data(table, 'lastWidgetApplication', new Date());\n                    c.$table.triggerHandler('tablesorter-ready');\n                    // callback executed on init only\n                    if (!init && typeof callback === 'function') {\n                        callback(table);\n                    }\n                    if (debug) {\n                        widget = c.widgets.length;\n                        console.log('Completed ' +\n                            (init === true ? 'initializing ' : 'applying ') + widget +\n                            ' widget' + (widget !== 1 ? 's' : '') + ts.benchmark(time));\n                    }\n                }, 10);\n            },\n\n            removeWidget: function(table, name, refreshing) {\n                table = $(table)[0];\n                var index, widget, indx, len,\n                    c = table.config;\n                // if name === true, add all widgets from $.tablesorter.widgets\n                if (name === true) {\n                    name = [];\n                    len = ts.widgets.length;\n                    for (indx = 0; indx < len; indx++) {\n                        widget = ts.widgets[indx];\n                        if (widget && widget.id) {\n                            name[name.length] = widget.id;\n                        }\n                    }\n                } else {\n                    // name can be either an array of widgets names,\n                    // or a space/comma separated list of widget names\n                    name = ($.isArray(name) ? name.join(',') : name || '').toLowerCase().split(/[\\s,]+/);\n                }\n                len = name.length;\n                for (index = 0; index < len; index++) {\n                    widget = ts.getWidgetById(name[index]);\n                    indx = $.inArray(name[index], c.widgets);\n                    // don't remove the widget from config.widget if refreshing\n                    if (indx >= 0 && refreshing !== true) {\n                        c.widgets.splice(indx, 1);\n                    }\n                    if (widget && widget.remove) {\n                        if (ts.debug(c, 'core')) {\n                            console.log((refreshing ? 'Refreshing' : 'Removing') + ' \"' + name[index] + '\" widget');\n                        }\n                        widget.remove(table, c, c.widgetOptions, refreshing);\n                        c.widgetInit[name[index]] = false;\n                    }\n                }\n                c.$table.triggerHandler('widgetRemoveEnd', table);\n            },\n\n            refreshWidgets: function(table, doAll, dontapply) {\n                table = $(table)[0]; // see issue #243\n                var indx, widget,\n                    c = table.config,\n                    curWidgets = c.widgets,\n                    widgets = ts.widgets,\n                    len = widgets.length,\n                    list = [],\n                    callback = function(table) {\n                        $(table).triggerHandler('refreshComplete');\n                    };\n                // remove widgets not defined in config.widgets, unless doAll is true\n                for (indx = 0; indx < len; indx++) {\n                    widget = widgets[indx];\n                    if (widget && widget.id && (doAll || $.inArray(widget.id, curWidgets) < 0)) {\n                        list[list.length] = widget.id;\n                    }\n                }\n                ts.removeWidget(table, list.join(','), true);\n                if (dontapply !== true) {\n                    // call widget init if\n                    ts.applyWidget(table, doAll || false, callback);\n                    if (doAll) {\n                        // apply widget format\n                        ts.applyWidget(table, false, callback);\n                    }\n                } else {\n                    callback(table);\n                }\n            },\n\n            /*\n            ██  ██ ██████ ██ ██     ██ ██████ ██ ██████ ▄█████\n            ██  ██   ██   ██ ██     ██   ██   ██ ██▄▄   ▀█▄\n            ██  ██   ██   ██ ██     ██   ██   ██ ██▀▀      ▀█▄\n            ▀████▀   ██   ██ ██████ ██   ██   ██ ██████ █████▀\n            */\n            benchmark: function(diff) {\n                return (' (' + (new Date().getTime() - diff.getTime()) + ' ms)');\n            },\n            // deprecated ts.log\n            log: function() {\n                console.log(arguments);\n            },\n            debug: function(c, name) {\n                return c && (\n                    c.debug === true ||\n                    typeof c.debug === 'string' && c.debug.indexOf(name) > -1\n                );\n            },\n\n            // $.isEmptyObject from jQuery v1.4\n            isEmptyObject: function(obj) {\n                /*jshint forin: false */\n                for (var name in obj) {\n                    return false;\n                }\n                return true;\n            },\n\n            isValueInArray: function(column, arry) {\n                var indx,\n                    len = arry && arry.length || 0;\n                for (indx = 0; indx < len; indx++) {\n                    if (arry[indx][0] === column) {\n                        return indx;\n                    }\n                }\n                return -1;\n            },\n\n            formatFloat: function(str, table) {\n                if (typeof str !== 'string' || str === '') {\n                    return str;\n                }\n                // allow using formatFloat without a table; defaults to US number format\n                var num,\n                    usFormat = table && table.config ? table.config.usNumberFormat !== false :\n                        typeof table !== 'undefined' ? table : true;\n                if (usFormat) {\n                    // US Format - 1,234,567.89 -> 1234567.89\n                    str = str.replace(ts.regex.comma, '');\n                } else {\n                    // German Format = 1.234.567,89 -> 1234567.89\n                    // French Format = 1 234 567,89 -> 1234567.89\n                    str = str.replace(ts.regex.digitNonUS, '').replace(ts.regex.comma, '.');\n                }\n                if (ts.regex.digitNegativeTest.test(str)) {\n                    // make (#) into a negative number -> (10) = -10\n                    str = str.replace(ts.regex.digitNegativeReplace, '-$1');\n                }\n                num = parseFloat(str);\n                // return the text instead of zero\n                return isNaN(num) ? $.trim(str) : num;\n            },\n\n            isDigit: function(str) {\n                // replace all unwanted chars and match\n                return isNaN(str) ?\n                    ts.regex.digitTest.test(str.toString().replace(ts.regex.digitReplace, '')) :\n                    str !== '';\n            },\n\n            // computeTableHeaderCellIndexes from:\n            // http://www.javascripttoolbox.com/lib/table/examples.php\n            // http://www.javascripttoolbox.com/temp/table_cellindex.html\n            computeColumnIndex: function($rows, c) {\n                var i, j, k, l, cell, cells, rowIndex, rowSpan, colSpan, firstAvailCol,\n                    // total columns has been calculated, use it to set the matrixrow\n                    columns = c && c.columns || 0,\n                    matrix = [],\n                    matrixrow = new Array(columns);\n                for (i = 0; i < $rows.length; i++) {\n                    cells = $rows[i].cells;\n                    for (j = 0; j < cells.length; j++) {\n                        cell = cells[j];\n                        rowIndex = i;\n                        rowSpan = cell.rowSpan || 1;\n                        colSpan = cell.colSpan || 1;\n                        if (typeof matrix[rowIndex] === 'undefined') {\n                            matrix[rowIndex] = [];\n                        }\n                        // Find first available column in the first row\n                        for (k = 0; k < matrix[rowIndex].length + 1; k++) {\n                            if (typeof matrix[rowIndex][k] === 'undefined') {\n                                firstAvailCol = k;\n                                break;\n                            }\n                        }\n                        // jscs:disable disallowEmptyBlocks\n                        if (columns && cell.cellIndex === firstAvailCol) {\n                            // don't to anything\n                        } else if (cell.setAttribute) {\n                            // jscs:enable disallowEmptyBlocks\n                            // add data-column (setAttribute = IE8+)\n                            cell.setAttribute('data-column', firstAvailCol);\n                        } else {\n                            // remove once we drop support for IE7 - 1/12/2016\n                            $(cell).attr('data-column', firstAvailCol);\n                        }\n                        for (k = rowIndex; k < rowIndex + rowSpan; k++) {\n                            if (typeof matrix[k] === 'undefined') {\n                                matrix[k] = [];\n                            }\n                            matrixrow = matrix[k];\n                            for (l = firstAvailCol; l < firstAvailCol + colSpan; l++) {\n                                matrixrow[l] = 'x';\n                            }\n                        }\n                    }\n                }\n                ts.checkColumnCount($rows, matrix, matrixrow.length);\n                return matrixrow.length;\n            },\n\n            checkColumnCount: function($rows, matrix, columns) {\n                // this DOES NOT report any tbody column issues, except for the math and\n                // and column selector widgets\n                var i, len,\n                    valid = true,\n                    cells = [];\n                for (i = 0; i < matrix.length; i++) {\n                    // some matrix entries are undefined when testing the footer because\n                    // it is using the rowIndex property\n                    if (matrix[i]) {\n                        len = matrix[i].length;\n                        if (matrix[i].length !== columns) {\n                            valid = false;\n                            break;\n                        }\n                    }\n                }\n                if (!valid) {\n                    $rows.each(function(indx, el) {\n                        var cell = el.parentElement.nodeName;\n                        if (cells.indexOf(cell) < 0) {\n                            cells.push(cell);\n                        }\n                    });\n                    console.error(\n                        'Invalid or incorrect number of columns in the ' +\n                        cells.join(' or ') + '; expected ' + columns +\n                        ', but found ' + len + ' columns'\n                    );\n                }\n            },\n\n            // automatically add a colgroup with col elements set to a percentage width\n            fixColumnWidth: function(table) {\n                table = $(table)[0];\n                var overallWidth, percent, $tbodies, len, index,\n                    c = table.config,\n                    $colgroup = c.$table.children('colgroup');\n                // remove plugin-added colgroup, in case we need to refresh the widths\n                if ($colgroup.length && $colgroup.hasClass(ts.css.colgroup)) {\n                    $colgroup.remove();\n                }\n                if (c.widthFixed && c.$table.children('colgroup').length === 0) {\n                    $colgroup = $('<colgroup class=\"' + ts.css.colgroup + '\">');\n                    overallWidth = c.$table.width();\n                    // only add col for visible columns - fixes #371\n                    $tbodies = c.$tbodies.find('tr:first').children(':visible');\n                    len = $tbodies.length;\n                    for (index = 0; index < len; index++) {\n                        percent = parseInt(($tbodies.eq(index).width() / overallWidth) * 1000, 10) / 10 + '%';\n                        $colgroup.append($('<col>').css('width', percent));\n                    }\n                    c.$table.prepend($colgroup);\n                }\n            },\n\n            // get sorter, string, empty, etc options for each column from\n            // jQuery data, metadata, header option or header class name ('sorter-false')\n            // priority = jQuery data > meta > headers option > header class name\n            getData: function(header, configHeader, key) {\n                var meta, cl4ss,\n                    val = '',\n                    $header = $(header);\n                if (!$header.length) {\n                    return '';\n                }\n                meta = $.metadata ? $header.metadata() : false;\n                cl4ss = ' ' + ($header.attr('class') || '');\n                if (typeof $header.data(key) !== 'undefined' ||\n                    typeof $header.data(key.toLowerCase()) !== 'undefined') {\n                    // 'data-lockedOrder' is assigned to 'lockedorder'; but 'data-locked-order' is assigned to 'lockedOrder'\n                    // 'data-sort-initial-order' is assigned to 'sortInitialOrder'\n                    val += $header.data(key) || $header.data(key.toLowerCase());\n                } else if (meta && typeof meta[key] !== 'undefined') {\n                    val += meta[key];\n                } else if (configHeader && typeof configHeader[key] !== 'undefined') {\n                    val += configHeader[key];\n                } else if (cl4ss !== ' ' && cl4ss.match(' ' + key + '-')) {\n                    // include sorter class name 'sorter-text', etc; now works with 'sorter-my-custom-parser'\n                    val = cl4ss.match(new RegExp('\\\\s' + key + '-([\\\\w-]+)'))[1] || '';\n                }\n                return $.trim(val);\n            },\n\n            getColumnData: function(table, obj, indx, getCell, $headers) {\n                if (typeof obj !== 'object' || obj === null) {\n                    return obj;\n                }\n                table = $(table)[0];\n                var $header, key,\n                    c = table.config,\n                    $cells = ($headers || c.$headers),\n                    // c.$headerIndexed is not defined initially\n                    $cell = c.$headerIndexed && c.$headerIndexed[indx] ||\n                        $cells.find('[data-column=\"' + indx + '\"]:last');\n                if (typeof obj[indx] !== 'undefined') {\n                    return getCell ? obj[indx] : obj[$cells.index($cell)];\n                }\n                for (key in obj) {\n                    if (typeof key === 'string') {\n                        $header = $cell\n                            // header cell with class/id\n                            .filter(key)\n                            // find elements within the header cell with cell/id\n                            .add($cell.find(key));\n                        if ($header.length) {\n                            return obj[key];\n                        }\n                    }\n                }\n                return;\n            },\n\n            // *** Process table ***\n            // add processing indicator\n            isProcessing: function($table, toggle, $headers) {\n                $table = $($table);\n                var c = $table[0].config,\n                    // default to all headers\n                    $header = $headers || $table.find('.' + ts.css.header);\n                if (toggle) {\n                    // don't use sortList if custom $headers used\n                    if (typeof $headers !== 'undefined' && c.sortList.length > 0) {\n                        // get headers from the sortList\n                        $header = $header.filter(function() {\n                            // get data-column from attr to keep compatibility with jQuery 1.2.6\n                            return this.sortDisabled ?\n                                false :\n                                ts.isValueInArray(parseFloat($(this).attr('data-column')), c.sortList) >= 0;\n                        });\n                    }\n                    $table.add($header).addClass(ts.css.processing + ' ' + c.cssProcessing);\n                } else {\n                    $table.add($header).removeClass(ts.css.processing + ' ' + c.cssProcessing);\n                }\n            },\n\n            // detach tbody but save the position\n            // don't use tbody because there are portions that look for a tbody index (updateCell)\n            processTbody: function(table, $tb, getIt) {\n                table = $(table)[0];\n                if (getIt) {\n                    table.isProcessing = true;\n                    $tb.before('<colgroup class=\"tablesorter-savemyplace\"/>');\n                    return $.fn.detach ? $tb.detach() : $tb.remove();\n                }\n                var holdr = $(table).find('colgroup.tablesorter-savemyplace');\n                $tb.insertAfter(holdr);\n                holdr.remove();\n                table.isProcessing = false;\n            },\n\n            clearTableBody: function(table) {\n                $(table)[0].config.$tbodies.children().detach();\n            },\n\n            // used when replacing accented characters during sorting\n            characterEquivalents: {\n                'a': '\\u00e1\\u00e0\\u00e2\\u00e3\\u00e4\\u0105\\u00e5', // áàâãäąå\n                'A': '\\u00c1\\u00c0\\u00c2\\u00c3\\u00c4\\u0104\\u00c5', // ÁÀÂÃÄĄÅ\n                'c': '\\u00e7\\u0107\\u010d', // çćč\n                'C': '\\u00c7\\u0106\\u010c', // ÇĆČ\n                'e': '\\u00e9\\u00e8\\u00ea\\u00eb\\u011b\\u0119', // éèêëěę\n                'E': '\\u00c9\\u00c8\\u00ca\\u00cb\\u011a\\u0118', // ÉÈÊËĚĘ\n                'i': '\\u00ed\\u00ec\\u0130\\u00ee\\u00ef\\u0131', // íìİîïı\n                'I': '\\u00cd\\u00cc\\u0130\\u00ce\\u00cf', // ÍÌİÎÏ\n                'o': '\\u00f3\\u00f2\\u00f4\\u00f5\\u00f6\\u014d', // óòôõöō\n                'O': '\\u00d3\\u00d2\\u00d4\\u00d5\\u00d6\\u014c', // ÓÒÔÕÖŌ\n                'ss': '\\u00df', // ß (s sharp)\n                'SS': '\\u1e9e', // ẞ (Capital sharp s)\n                'u': '\\u00fa\\u00f9\\u00fb\\u00fc\\u016f', // úùûüů\n                'U': '\\u00da\\u00d9\\u00db\\u00dc\\u016e' // ÚÙÛÜŮ\n            },\n\n            replaceAccents: function(str) {\n                var chr,\n                    acc = '[',\n                    eq = ts.characterEquivalents;\n                if (!ts.characterRegex) {\n                    ts.characterRegexArray = {};\n                    for (chr in eq) {\n                        if (typeof chr === 'string') {\n                            acc += eq[chr];\n                            ts.characterRegexArray[chr] = new RegExp('[' + eq[chr] + ']', 'g');\n                        }\n                    }\n                    ts.characterRegex = new RegExp(acc + ']');\n                }\n                if (ts.characterRegex.test(str)) {\n                    for (chr in eq) {\n                        if (typeof chr === 'string') {\n                            str = str.replace(ts.characterRegexArray[chr], chr);\n                        }\n                    }\n                }\n                return str;\n            },\n\n            validateOptions: function(c) {\n                var setting, setting2, typ, timer,\n                    // ignore options containing an array\n                    ignore = 'headers sortForce sortList sortAppend widgets'.split(' '),\n                    orig = c.originalSettings;\n                if (orig) {\n                    if (ts.debug(c, 'core')) {\n                        timer = new Date();\n                    }\n                    for (setting in orig) {\n                        typ = typeof ts.defaults[setting];\n                        if (typ === 'undefined') {\n                            console.warn('Tablesorter Warning! \"table.config.' + setting + '\" option not recognized');\n                        } else if (typ === 'object') {\n                            for (setting2 in orig[setting]) {\n                                typ = ts.defaults[setting] && typeof ts.defaults[setting][setting2];\n                                if ($.inArray(setting, ignore) < 0 && typ === 'undefined') {\n                                    console.warn('Tablesorter Warning! \"table.config.' + setting + '.' + setting2 + '\" option not recognized');\n                                }\n                            }\n                        }\n                    }\n                    if (ts.debug(c, 'core')) {\n                        console.log('validate options time:' + ts.benchmark(timer));\n                    }\n                }\n            },\n\n            // restore headers\n            restoreHeaders: function(table) {\n                var index, $cell,\n                    c = $(table)[0].config,\n                    $headers = c.$table.find(c.selectorHeaders),\n                    len = $headers.length;\n                // don't use c.$headers here in case header cells were swapped\n                for (index = 0; index < len; index++) {\n                    $cell = $headers.eq(index);\n                    // only restore header cells if it is wrapped\n                    // because this is also used by the updateAll method\n                    if ($cell.find('.' + ts.css.headerIn).length) {\n                        $cell.html(c.headerContent[index]);\n                    }\n                }\n            },\n\n            destroy: function(table, removeClasses, callback) {\n                table = $(table)[0];\n                if (!table.hasInitialized) {\n                    return;\n                }\n                // remove all widgets\n                ts.removeWidget(table, true, false);\n                var events,\n                    $t = $(table),\n                    c = table.config,\n                    $h = $t.find('thead:first'),\n                    $r = $h.find('tr.' + ts.css.headerRow).removeClass(ts.css.headerRow + ' ' + c.cssHeaderRow),\n                    $f = $t.find('tfoot:first > tr').children('th, td');\n                if (removeClasses === false && $.inArray('uitheme', c.widgets) >= 0) {\n                    // reapply uitheme classes, in case we want to maintain appearance\n                    $t.triggerHandler('applyWidgetId', ['uitheme']);\n                    $t.triggerHandler('applyWidgetId', ['zebra']);\n                }\n                // remove widget added rows, just in case\n                $h.find('tr').not($r).remove();\n                // disable tablesorter - not using .unbind( namespace ) because namespacing was\n                // added in jQuery v1.4.3 - see http://api.jquery.com/event.namespace/\n                events = 'sortReset update updateRows updateAll updateHeaders updateCell addRows updateComplete sorton ' +\n                    'appendCache updateCache applyWidgetId applyWidgets refreshWidgets removeWidget destroy mouseup mouseleave ' +\n                    'keypress sortBegin sortEnd resetToLoadState '.split(' ')\n                        .join(c.namespace + ' ');\n                $t\n                    .removeData('tablesorter')\n                    .unbind(events.replace(ts.regex.spaces, ' '));\n                c.$headers\n                    .add($f)\n                    .removeClass([ts.css.header, c.cssHeader, c.cssAsc, c.cssDesc, ts.css.sortAsc, ts.css.sortDesc, ts.css.sortNone].join(' '))\n                    .removeAttr('data-column')\n                    .removeAttr('aria-label')\n                    .attr('aria-disabled', 'true');\n                $r\n                    .find(c.selectorSort)\n                    .unbind(('mousedown mouseup keypress '.split(' ').join(c.namespace + ' ')).replace(ts.regex.spaces, ' '));\n                ts.restoreHeaders(table);\n                $t.toggleClass(ts.css.table + ' ' + c.tableClass + ' tablesorter-' + c.theme, removeClasses === false);\n                $t.removeClass(c.namespace.slice(1));\n                // clear flag in case the plugin is initialized again\n                table.hasInitialized = false;\n                delete table.config.cache;\n                if (typeof callback === 'function') {\n                    callback(table);\n                }\n                if (ts.debug(c, 'core')) {\n                    console.log('tablesorter has been removed');\n                }\n            }\n\n        };\n\n        $.fn.tablesorter = function(settings) {\n            return this.each(function() {\n                var table = this,\n                    // merge & extend config options\n                    c = $.extend(true, {}, ts.defaults, settings, ts.instanceMethods);\n                // save initial settings\n                c.originalSettings = settings;\n                // create a table from data (build table widget)\n                if (!table.hasInitialized && ts.buildTable && this.nodeName !== 'TABLE') {\n                    // return the table (in case the original target is the table's container)\n                    ts.buildTable(table, c);\n                } else {\n                    ts.setup(table, c);\n                }\n            });\n        };\n\n        // set up debug logs\n        if (!(window.console && window.console.log)) {\n            // access $.tablesorter.logs for browsers that don't have a console...\n            ts.logs = [];\n            /*jshint -W020 */\n            console = {};\n            console.log = console.warn = console.error = console.table = function() {\n                var arg = arguments.length > 1 ? arguments : arguments[0];\n                ts.logs[ts.logs.length] = {date: Date.now(), log: arg};\n            };\n        }\n\n        // add default parsers\n        ts.addParser({\n            id: 'no-parser',\n            is: function() {\n                return false;\n            },\n            format: function() {\n                return '';\n            },\n            type: 'text'\n        });\n\n        ts.addParser({\n            id: 'text',\n            is: function() {\n                return true;\n            },\n            format: function(str, table) {\n                var c = table.config;\n                if (str) {\n                    str = $.trim(c.ignoreCase ? str.toLocaleLowerCase() : str);\n                    str = c.sortLocaleCompare ? ts.replaceAccents(str) : str;\n                }\n                return str;\n            },\n            type: 'text'\n        });\n\n        ts.regex.nondigit = /[^\\w,. \\-()]/g;\n        ts.addParser({\n            id: 'digit',\n            is: function(str) {\n                return ts.isDigit(str);\n            },\n            format: function(str, table) {\n                var num = ts.formatFloat((str || '').replace(ts.regex.nondigit, ''), table);\n                return str && typeof num === 'number' ? num :\n                    str ? $.trim(str && table.config.ignoreCase ? str.toLocaleLowerCase() : str) : str;\n            },\n            type: 'numeric'\n        });\n\n        ts.regex.currencyReplace = /[+\\-,. ]/g;\n        ts.regex.currencyTest = /^\\(?\\d+[\\u00a3$\\u20ac\\u00a4\\u00a5\\u00a2?.]|[\\u00a3$\\u20ac\\u00a4\\u00a5\\u00a2?.]\\d+\\)?$/;\n        ts.addParser({\n            id: 'currency',\n            is: function(str) {\n                str = (str || '').replace(ts.regex.currencyReplace, '');\n                // test for £$€¤¥¢\n                return ts.regex.currencyTest.test(str);\n            },\n            format: function(str, table) {\n                var num = ts.formatFloat((str || '').replace(ts.regex.nondigit, ''), table);\n                return str && typeof num === 'number' ? num :\n                    str ? $.trim(str && table.config.ignoreCase ? str.toLocaleLowerCase() : str) : str;\n            },\n            type: 'numeric'\n        });\n\n        // too many protocols to add them all https://en.wikipedia.org/wiki/URI_scheme\n        // now, this regex can be updated before initialization\n        ts.regex.urlProtocolTest = /^(https?|ftp|file):\\/\\//;\n        ts.regex.urlProtocolReplace = /(https?|ftp|file):\\/\\/(www\\.)?/;\n        ts.addParser({\n            id: 'url',\n            is: function(str) {\n                return ts.regex.urlProtocolTest.test(str);\n            },\n            format: function(str) {\n                return str ? $.trim(str.replace(ts.regex.urlProtocolReplace, '')) : str;\n            },\n            type: 'text'\n        });\n\n        ts.regex.dash = /-/g;\n        ts.regex.isoDate = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}/;\n        ts.addParser({\n            id: 'isoDate',\n            is: function(str) {\n                return ts.regex.isoDate.test(str);\n            },\n            format: function(str) {\n                var date = str ? new Date(str.replace(ts.regex.dash, '/')) : str;\n                return date instanceof Date && isFinite(date) ? date.getTime() : str;\n            },\n            type: 'numeric'\n        });\n\n        ts.regex.percent = /%/g;\n        ts.regex.percentTest = /(\\d\\s*?%|%\\s*?\\d)/;\n        ts.addParser({\n            id: 'percent',\n            is: function(str) {\n                return ts.regex.percentTest.test(str) && str.length < 15;\n            },\n            format: function(str, table) {\n                return str ? ts.formatFloat(str.replace(ts.regex.percent, ''), table) : str;\n            },\n            type: 'numeric'\n        });\n\n        // added image parser to core v2.17.9\n        ts.addParser({\n            id: 'image',\n            is: function(str, table, node, $node) {\n                return $node.find('img').length > 0;\n            },\n            format: function(str, table, cell) {\n                return $(cell).find('img').attr(table.config.imgAttr || 'alt') || str;\n            },\n            parsed: true, // filter widget flag\n            type: 'text'\n        });\n\n        ts.regex.dateReplace = /(\\S)([AP]M)$/i; // used by usLongDate & time parser\n        ts.regex.usLongDateTest1 = /^[A-Z]{3,10}\\.?\\s+\\d{1,2},?\\s+(\\d{4})(\\s+\\d{1,2}:\\d{2}(:\\d{2})?(\\s+[AP]M)?)?$/i;\n        ts.regex.usLongDateTest2 = /^\\d{1,2}\\s+[A-Z]{3,10}\\s+\\d{4}/i;\n        ts.addParser({\n            id: 'usLongDate',\n            is: function(str) {\n                // two digit years are not allowed cross-browser\n                // Jan 01, 2013 12:34:56 PM or 01 Jan 2013\n                return ts.regex.usLongDateTest1.test(str) || ts.regex.usLongDateTest2.test(str);\n            },\n            format: function(str) {\n                var date = str ? new Date(str.replace(ts.regex.dateReplace, '$1 $2')) : str;\n                return date instanceof Date && isFinite(date) ? date.getTime() : str;\n            },\n            type: 'numeric'\n        });\n\n        // testing for ##-##-#### or ####-##-##, so it's not perfect; time can be included\n        ts.regex.shortDateTest = /(^\\d{1,2}[\\/\\s]\\d{1,2}[\\/\\s]\\d{4})|(^\\d{4}[\\/\\s]\\d{1,2}[\\/\\s]\\d{1,2})/;\n        // escaped \"-\" because JSHint in Firefox was showing it as an error\n        ts.regex.shortDateReplace = /[\\-.,]/g;\n        // XXY covers MDY & DMY formats\n        ts.regex.shortDateXXY = /(\\d{1,2})[\\/\\s](\\d{1,2})[\\/\\s](\\d{4})/;\n        ts.regex.shortDateYMD = /(\\d{4})[\\/\\s](\\d{1,2})[\\/\\s](\\d{1,2})/;\n        ts.convertFormat = function(dateString, format) {\n            dateString = (dateString || '')\n                .replace(ts.regex.spaces, ' ')\n                .replace(ts.regex.shortDateReplace, '/');\n            if (format === 'mmddyyyy') {\n                dateString = dateString.replace(ts.regex.shortDateXXY, '$3/$1/$2');\n            } else if (format === 'ddmmyyyy') {\n                dateString = dateString.replace(ts.regex.shortDateXXY, '$3/$2/$1');\n            } else if (format === 'yyyymmdd') {\n                dateString = dateString.replace(ts.regex.shortDateYMD, '$1/$2/$3');\n            }\n            var date = new Date(dateString);\n            return date instanceof Date && isFinite(date) ? date.getTime() : '';\n        };\n\n        ts.addParser({\n            id: 'shortDate', // 'mmddyyyy', 'ddmmyyyy' or 'yyyymmdd'\n            is: function(str) {\n                str = (str || '').replace(ts.regex.spaces, ' ').replace(ts.regex.shortDateReplace, '/');\n                return ts.regex.shortDateTest.test(str);\n            },\n            format: function(str, table, cell, cellIndex) {\n                if (str) {\n                    var c = table.config,\n                        $header = c.$headerIndexed[cellIndex],\n                        format = $header.length && $header.data('dateFormat') ||\n                            ts.getData($header, ts.getColumnData(table, c.headers, cellIndex), 'dateFormat') ||\n                            c.dateFormat;\n                    // save format because getData can be slow...\n                    if ($header.length) {\n                        $header.data('dateFormat', format);\n                    }\n                    return ts.convertFormat(str, format) || str;\n                }\n                return str;\n            },\n            type: 'numeric'\n        });\n\n        // match 24 hour time & 12 hours time + am/pm - see http://regexr.com/3c3tk\n        ts.regex.timeTest = /^(0?[1-9]|1[0-2]):([0-5]\\d)(\\s[AP]M)$|^((?:[01]\\d|[2][0-4]):[0-5]\\d)$/i;\n        ts.regex.timeMatch = /(0?[1-9]|1[0-2]):([0-5]\\d)(\\s[AP]M)|((?:[01]\\d|[2][0-4]):[0-5]\\d)/i;\n        ts.addParser({\n            id: 'time',\n            is: function(str) {\n                return ts.regex.timeTest.test(str);\n            },\n            format: function(str) {\n                // isolate time... ignore month, day and year\n                var temp,\n                    timePart = (str || '').match(ts.regex.timeMatch),\n                    orig = new Date(str),\n                    // no time component? default to 00:00 by leaving it out, but only if str is defined\n                    time = str && (timePart !== null ? timePart[0] : '00:00 AM'),\n                    date = time ? new Date('2000/01/01 ' + time.replace(ts.regex.dateReplace, '$1 $2')) : time;\n                if (date instanceof Date && isFinite(date)) {\n                    temp = orig instanceof Date && isFinite(orig) ? orig.getTime() : 0;\n                    // if original string was a valid date, add it to the decimal so the column sorts in some kind of order\n                    // luckily new Date() ignores the decimals\n                    return temp ? parseFloat(date.getTime() + '.' + orig.getTime()) : date.getTime();\n                }\n                return str;\n            },\n            type: 'numeric'\n        });\n\n        ts.addParser({\n            id: 'metadata',\n            is: function() {\n                return false;\n            },\n            format: function(str, table, cell) {\n                var c = table.config,\n                    p = (!c.parserMetadataName) ? 'sortValue' : c.parserMetadataName;\n                return $(cell).metadata()[p];\n            },\n            type: 'numeric'\n        });\n\n        /*\n            ██████ ██████ █████▄ █████▄ ▄████▄\n              ▄█▀  ██▄▄   ██▄▄██ ██▄▄██ ██▄▄██\n            ▄█▀    ██▀▀   ██▀▀██ ██▀▀█  ██▀▀██\n            ██████ ██████ █████▀ ██  ██ ██  ██\n            */\n        // add default widgets\n        ts.addWidget({\n            id: 'zebra',\n            priority: 90,\n            format: function(table, c, wo) {\n                var $visibleRows, $row, count, isEven, tbodyIndex, rowIndex, len,\n                    child = new RegExp(c.cssChildRow, 'i'),\n                    $tbodies = c.$tbodies.add($(c.namespace + '_extra_table').children('tbody:not(.' + c.cssInfoBlock + ')'));\n                for (tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++) {\n                    // loop through the visible rows\n                    count = 0;\n                    $visibleRows = $tbodies.eq(tbodyIndex).children('tr:visible').not(c.selectorRemove);\n                    len = $visibleRows.length;\n                    for (rowIndex = 0; rowIndex < len; rowIndex++) {\n                        $row = $visibleRows.eq(rowIndex);\n                        // style child rows the same way the parent row was styled\n                        if (!child.test($row[0].className)) {\n                            count++;\n                        }\n                        isEven = (count % 2 === 0);\n                        $row\n                            .removeClass(wo.zebra[isEven ? 1 : 0])\n                            .addClass(wo.zebra[isEven ? 0 : 1]);\n                    }\n                }\n            },\n            remove: function(table, c, wo, refreshing) {\n                if (refreshing) {\n                    return;\n                }\n                var tbodyIndex, $tbody,\n                    $tbodies = c.$tbodies,\n                    toRemove = (wo.zebra || ['even', 'odd']).join(' ');\n                for (tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++) {\n                    $tbody = ts.processTbody(table, $tbodies.eq(tbodyIndex), true); // remove tbody\n                    $tbody.children().removeClass(toRemove);\n                    ts.processTbody(table, $tbody, false); // restore tbody\n                }\n            }\n        });\n\n    })(jQuery);\n    return jQuery.tablesorter;\n}));"],"names":["factory","jQuery","$","ts","tablesorter","version","parsers","widgets","defaults","theme","widthFixed","showProcessing","headerTemplate","onRenderTemplate","onRenderHeader","cancelSelection","tabIndex","dateFormat","sortMultiSortKey","sortResetKey","usNumberFormat","delayInit","serverSideSorting","resort","headers","ignoreCase","sortForce","sortList","sortAppend","sortStable","sortInitialOrder","sortLocaleCompare","sortReset","sortRestart","emptyTo","stringTo","duplicateSpan","textExtraction","textAttribute","textSorter","numberSorter","initWidgets","widgetClass","widgetOptions","zebra","initialized","tableClass","cssAsc","cssDesc","cssNone","cssHeader","cssHeaderRow","cssProcessing","cssChildRow","cssInfoBlock","cssNoSort","cssIgnoreRow","cssIcon","cssIconNone","cssIconAsc","cssIconDesc","cssIconDisabled","pointerClick","pointerDown","pointerUp","selectorHeaders","selectorSort","selectorRemove","debug","headerList","empties","strings","globalize","imgAttr","css","table","cssHasChild","childRow","colgroup","header","headerRow","headerIn","icon","processing","sortAsc","sortDesc","sortNone","language","sortDisabled","nextAsc","nextDesc","nextNone","regex","templateContent","templateIcon","templateName","spaces","nonWord","formElements","chunk","chunks","hex","comma","digitNonUS","digitNegativeTest","digitNegativeReplace","digitTest","digitReplace","string","max","min","emptymin","emptymax","zero","none","null","top","bottom","keyCodes","enter","dates","instanceMethods","setup","c","tHead","tBodies","length","hasInitialized","tmp","$table","meta","metadata","isProcessing","config","data","console","group","Date","supportsDataObject","fn","jquery","split","parseInt","toLowerCase","last","clickedIndex","test","attr","namespace","replace","Math","random","toString","slice","addClass","$headers","find","children","$tbodies","id","widgetInit","buildHeaders","fixColumnWidth","addWidgetFromClass","applyWidgetOptions","setupParsers","totalRows","validateOptions","buildCache","bindEvents","bindMethods","sortlist","applyWidget","sortOn","setHeadersCss","unbind","bind","e","clearTimeout","timerProcessing","type","setTimeout","log","benchmark","groupEnd","triggerHandler","warn","error","events","join","callback","stopPropagation","this","isApplyingWidgets","updateAll","update","updateHeaders","cell","updateCell","$row","addRows","isUpdating","list","init","appendCache","isFunction","updateCache","applyWidgetId","all","dontapply","refreshWidgets","name","refreshing","removeWidget","removeClasses","destroy","extend","originalSettings","core","downTarget","getClosest","nodeName","add","filter","external","$cell","temp","$target","target","which","button","match","preventDefault","hasClass","parents","isEmptyObject","cache","index","$headerIndexed","initSort","MozUserSelect","$temp","timer","indx","headerContent","sortVars","columns","computeColumnIndex","map","elem","configHeaders","column","template","$elem","getColumnData","html","apply","getOrder","getData","count","order","lockedOrder","sortedBy","not","scope","role","updateHeader","addInstanceMethods","methods","rows","span","colIndex","noParser","parser","extractor","time","tbody","len","tbodyIndex","debugOutput","extractors","getParserById","emptyToBottom","detectParserForColumn","text","empty","colSpan","addParser","rowIndex","cellIndex","cur","$node","row","node","nodeValue","keepLooking","className","indexOf","cells","getElementText","is","extract","trim","textContent","getParsedText","txt","val","format","$tbody","cols","$cells","cacheTime","rowData","prevRowData","colMax","cacheIndex","hasParser","normalized","child","raw","prev","abs","getColumnText","rowFilter","tbodyLen","rowLen","parsed","result","hasCallback","allColumns","eq","aria","updateColumnSort","$el","removeClass","$extras","$sorted","end","i","include","col","isValueInArray","setColumnAriaLabel","selector","closest","$header","nextSort","vars","removeAttr","isDisabled","setColumnSort","updateHeaderSortCount","dir","primary","inArray","commonUpdate","resortComplete","remove","icell","tbcache","checkResort","valid","append","$curTbody","appendTime","appender","processTbody","pager","removeRows","ajax","event","arry","headerIndx","notMultiSort","th","each","splice","isArray","multisort","sortTime","sorter","sortLen","sort","a","b","sortIndex","num","x","y","getSortType","sortNatural","aNum","bNum","aFloat","bFloat","isNaN","parseFloat","sortNaturalAsc","sortNaturalDesc","sortText","getTextValue","n","charCodeAt","sortNumericAsc","sortNumericDesc","sortNumeric","addWidget","widget","getWidgetById","hasWidget","wo","options","RegExp","applied","names","timerReady","grep","priority","doAll","curWidgets","diff","getTime","arguments","obj","formatFloat","str","isDigit","$rows","j","k","l","rowSpan","firstAvailCol","matrix","matrixrow","Array","setAttribute","checkColumnCount","el","parentElement","push","overallWidth","percent","$colgroup","width","prepend","configHeader","key","cl4ss","getCell","toggle","$tb","getIt","before","detach","holdr","insertAfter","clearTableBody","characterEquivalents","A","C","E","I","o","O","ss","SS","u","U","replaceAccents","chr","acc","characterRegex","characterRegexArray","setting","setting2","typ","ignore","orig","restoreHeaders","$t","$h","$r","$f","removeData","toggleClass","settings","buildTable","window","logs","arg","date","now","toLocaleLowerCase","nondigit","currencyReplace","currencyTest","urlProtocolTest","urlProtocolReplace","dash","isoDate","isFinite","percentTest","dateReplace","usLongDateTest1","usLongDateTest2","shortDateTest","shortDateReplace","shortDateXXY","shortDateYMD","convertFormat","dateString","timeTest","timeMatch","timePart","p","parserMetadataName","$visibleRows","isEven","toRemove","define","amd","module","exports","require"],"mappings":"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"}