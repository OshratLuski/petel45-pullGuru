{"version":3,"file":"content.min.js","sources":["../../src/local/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport Component from 'core_courseformat/local/content';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport Section from 'format_flexsections/local/content/section';\nimport CmItem from 'core_courseformat/local/content/section/cmitem';\nimport Mutations from \"format_flexsections/local/courseeditor/mutations\";\nimport FlexsectionsActions from 'format_flexsections/local/content/actions';\nimport Exporter from \"format_flexsections/local/courseeditor/exporter\";\nimport inView from \"format_flexsections/inview\";\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport sharewith from 'community_sharewith/modal';\n\n/**\n * Course format component\n *\n * @module     format_flexsections/local/content\n * @copyright  2022 Marina Glancy\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class FlexsectionComponent extends Component {\n    // Extends course/format/amd/src/local/content.js\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @param {number} sectionReturn the content section return\n     * @return {Component}\n     */\n    static init(target, selectors, sectionReturn) {\n\n        const courseEditor = getCurrentCourseEditor();\n        courseEditor.getExporter = () => new Exporter(courseEditor);\n\n        // Hack to preserve legacy mutations (added in core_course/actions) after we set own plugin mutations.\n        let legacyActivityAction = courseEditor.mutations.legacyActivityAction ?? null;\n        let legacySectionAction = courseEditor.mutations.legacySectionAction ?? null;\n        courseEditor.setMutations(new Mutations());\n        courseEditor.addMutations({\n            ...(legacyActivityAction ? {legacyActivityAction} : {}),\n            ...(legacySectionAction ? {legacySectionAction} : {})});\n\n        return new FlexsectionComponent({\n            element: document.getElementById(target),\n            reactive: courseEditor,\n            selectors,\n            sectionReturn,\n        });\n    }\n\n    /**\n     * Constructor hook.\n     *\n     * @param {Object} descriptor the component descriptor\n     */\n    create(descriptor) {\n        super.create(descriptor);\n        // Optional component name for debugging.\n        this.name = 'course_format_flexsections';\n        this.selectors.COURSE_SUBSECTIONLIST = `[data-for='course_subsectionlist']`;\n        this.selectors.COURSE_SECTION = `[data-for='section']`;\n        this.selectors.SECTION_INVIEW_HEADER = `[data-for='inview']`;\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data\n     */\n    stateReady(state) {\n        super.stateReady(state);\n        if (this.reactive.supportComponents) {\n            // Actions are only available in edit mode.\n            if (this.reactive.isEditing) {\n                new FlexsectionsActions(this);\n            }\n        }\n        if (state.course.accordion) {\n            this._ensureOnlyOneSectionIsExpanded(state);\n            // Monitor hash change so that we can expand the section from the hash.\n            window.addEventListener(\n                \"hashchange\",\n                this._hashHandler.bind(this),\n            );\n        }\n\n        this._inView(state);\n    }\n\n    _ensureOnlyOneSectionIsExpanded(state) {\n        const isExpanded = (sectionInfo) => !sectionInfo.showaslink && !sectionInfo.contentcollapsed;\n        const hasExpandedChildren = (sectionInfo) =>\n            (sectionInfo.children ?? []).some(s => isExpanded(s));\n\n        let firstExpandedSection = null;\n        for (let sectionInfo of this._getSectionsWithCollapse(state)) {\n            if (!firstExpandedSection && isExpanded(sectionInfo) && !hasExpandedChildren(sectionInfo)) {\n                firstExpandedSection = sectionInfo;\n            }\n        }\n\n        if (firstExpandedSection) {\n            const sectionitem = this.getElement(this.selectors.SECTION, firstExpandedSection.id);\n            this._collapseAllSectionsExceptFor(sectionitem, false);\n        }\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        let res = super.getWatchers();\n        res.push({watch: `course.hierarchy:updated`, handler: this._refreshCourseHierarchy});\n        res.push({watch: `section.visible:updated`, handler: this._refreshSection});\n        return res;\n    }\n\n    async _refreshSection({element}) {\n        const self = this;\n        const sectionId = element.id;\n        const template = 'format_flexsections/local/content/section/cmlist';\n        const sectionToReplace = `[data-cmlistid=\"${sectionId}\"]`;\n\n        const request = {\n            methodname: 'format_flexsections_get_section_content',\n            args: {\n                sectionid: sectionId\n            }\n        };\n\n        try {\n            const response = await Ajax.call([request])[0];\n\n            if (response.result) {\n                const data = JSON.parse(response.data);\n\n                if (data.cmlist === undefined) {\n                    data.cmlist = [];\n                }\n\n                await self.reactive.dispatch('sectionState', [sectionId]);\n\n                const {html, js} = await Templates.renderForPromise(template, data.cmlist);\n                await Templates.replaceNodeContents(sectionToReplace, html, js);\n\n                if (data.sharebuttonenable) {\n                    sharewith.addShareActivityButton(null, `[data-cmlistid=\"${sectionId}\"]`);\n                }\n            } else {\n                Notification.addNotification({\n                    type: 'error',\n                    message: 'No valid response'\n                });\n            }\n        } catch (e) {\n            Notification.exception(e);\n        }\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshCourseHierarchy({element}) {\n        const hierarchy = element.hierarchy ?? [];\n        const createSection = this._createSectionItem.bind(this);\n        for (let i = 0; i < hierarchy.length; i++) {\n            const sectionlist = hierarchy[i].children;\n            const listparent = this.getElement(this.selectors.COURSE_SUBSECTIONLIST + `[data-parent='${hierarchy[i].id}']`);\n            if (listparent) {\n                this._fixOrder(listparent, sectionlist, this.selectors.SECTION, this.dettachedSections, createSection);\n            }\n        }\n    }\n\n    /**\n     * Regenerate content indexes.\n     *\n     * This method is used when a legacy action refresh some content element.\n     *\n     * Override parent method and replace with our Section and CmItem classes.\n     */\n    _indexContents() {\n        // Find unindexed sections.\n        this._scanIndex(\n            this.selectors.SECTION,\n            this.sections,\n            (item) => {\n                return new Section(item);\n            }\n        );\n\n        // Find unindexed cms.\n        this._scanIndex(\n            this.selectors.CM,\n            this.cms,\n            (item) => {\n                return new CmItem(item);\n            }\n        );\n    }\n\n    /**\n     * Setup sections toggler.\n     *\n     * Toggler click is delegated to the main course content element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _sectionTogglers(event) {\n        // Overrides parent method to add more functionality.\n        const sectionlink = event.target.closest(this.selectors.TOGGLER);\n        const closestCollapse = event.target.closest(this.selectors.COLLAPSE);\n        const isChevron = closestCollapse?.closest(this.selectors.SECTION_ITEM);\n\n        if (sectionlink || isChevron) {\n            const section = event.target.closest(this.selectors.SECTION);\n            const toggler = section.querySelector(this.selectors.COLLAPSE);\n            const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n\n            if (isChevron || isCollapsed) {\n                const sectionId = parseInt(section.getAttribute('data-id'));\n                // Update the state.\n                this.reactive.dispatch(\n                    'sectionContentCollapsed',\n                    [sectionId],\n                    !isCollapsed\n                );\n            }\n            // If we expanded a section, collapse all other expanded sections\n            // except for this section parents.\n            if (isCollapsed && this.reactive.stateManager.state.course.accordion) {\n                this._collapseAllSectionsExceptFor(section);\n            }\n        }\n    }\n\n    /**\n     * Collapse all sections except for the given one and its parents.\n     *\n     * @param {HTMLElement} section\n     * @param {Boolean} scrollToSection\n     */\n    _collapseAllSectionsExceptFor(section, scrollToSection = true) {\n        const sectionNumber = parseInt(section.getAttribute('data-sectionid'));\n        const leaveOpen = [...this._findAllParents(sectionNumber), sectionNumber];\n        if (sectionNumber > 0 && leaveOpen.includes(0)) {\n            leaveOpen.splice(leaveOpen.indexOf(0), 1);\n        }\n        const sectionIds =\n            this._getSectionsWithCollapse(this.reactive.stateManager.state)\n                .filter(s => !leaveOpen.includes(parseInt(s.section)))\n                .map(s => s.id);\n        this.reactive.dispatch(\n            'sectionContentCollapsed',\n            sectionIds,\n            true\n        );\n        if (scrollToSection) {\n            const toggler = section.querySelector(this.selectors.COLLAPSE);\n            setTimeout(() => {\n                toggler.scrollIntoView({behavior: \"smooth\", block: \"nearest\"});\n            }, 500);\n        }\n    }\n\n    /**\n     * Refresh the collapse/expand all sections element.\n     *\n     * @param {Object} state The state data\n     */\n    _refreshAllSectionsToggler(state) {\n        const target = this.getElement(this.selectors.TOGGLEALL);\n        if (!target) {\n            return;\n        }\n        // Check if we have all sections collapsed/expanded.\n        let allcollapsed = true;\n        const mainSection = this._mainSection();\n        const sections = this._getSectionsWithCollapse(state);\n        for (let i in sections) {\n            if (parseInt(sections[i].parent) === mainSection) {\n                allcollapsed = allcollapsed && sections[i].contentcollapsed;\n            }\n        }\n        // Update control.\n        if (allcollapsed) {\n            target.classList.add(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', false);\n        } else {\n            target.classList.remove(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', true);\n        }\n    }\n\n    /**\n     * Handle the collapse/expand all sections button.\n     *\n     * Toggler click is delegated to the main course content element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _allSectionToggler(event) {\n        event.preventDefault();\n\n        const target = event.target.closest(this.selectors.TOGGLEALL);\n        const isAllCollapsed = target.classList.contains(this.classes.COLLAPSED);\n\n        const sections = this._getSectionsWithCollapse();\n        let ids = [];\n        for (let i in sections) {\n            ids.push(sections[i].id);\n        }\n        this.reactive.dispatch(\n            'sectionContentCollapsed',\n            ids,\n            !isAllCollapsed\n        );\n    }\n\n    /**\n     * Find main section\n     *\n     * @returns {Number}\n     */\n    _mainSection() {\n        return parseInt(this.element.getAttribute('data-flexsections-mainsection'));\n    }\n\n    /**\n     * Get all sections that can be collapsed or expanded\n     *\n     * @param {Object} state The state data\n     * @returns {Array}\n     */\n    _getSectionsWithCollapse(state) {\n        if (state === undefined) {\n            state = this.reactive.stateManager.state;\n        }\n        const mainSection = this._mainSection();\n        let parents = {};\n        parents[`${mainSection}`] = `${mainSection}`;\n        let displayedSections = [];\n        state.section.forEach(\n            section => {\n                const sectionNumber = parseInt(section.number);\n                const toggler = this.getElement(this.selectors.SECTION, section.id)?.querySelector(this.selectors.COLLAPSE);\n\n                if (!toggler || !(`${section.parent}` in parents) || section.showaslink) {\n                    return;\n                }\n                parents[`${sectionNumber}`] = `${sectionNumber}`;\n                displayedSections.push(section);\n            }\n        );\n        return displayedSections;\n    }\n\n    /**\n     * Find all parents of the current section (section numbers, not ids)\n     *\n     * @param {Number} thisSectionNumber\n     * @returns {Array} Array of section numbers that are parents of this one\n     */\n    _findAllParents(thisSectionNumber) {\n        // Section object has properties: number, id, parent, parentid.\n        if (thisSectionNumber === this._mainSection()) {\n            return [];\n        }\n        let section = this.reactive.stateManager.state.section\n            .find(section => parseInt(section.number) === thisSectionNumber);\n        if (section && section.parent !== undefined) {\n            const parent = parseInt(section.parent);\n            return [...this._findAllParents(parent), parent];\n        }\n        return [];\n    }\n\n    /**\n     * Handler for when the page hash was changed - if in accordion mode, expand the target section\n     */\n    _hashHandler() {\n        if ((window.location.hash ?? '').length <= 1) {\n            return;\n        }\n        const target = document.querySelector(`${window.location.hash}${this.selectors.SECTION}`);\n        if (!target) {\n            return;\n        }\n        const toggler = target.querySelector(this.selectors.COLLAPSE);\n        if (toggler) {\n            const sectionNumber = parseInt(target.getAttribute('data-sectionid'));\n            const toExpand = [...this._findAllParents(sectionNumber), sectionNumber].filter(s => s > 0);\n            const sectionIds =\n                this._getSectionsWithCollapse(this.reactive.stateManager.state)\n                    .filter(s => toExpand.includes(parseInt(s.section)))\n                    .map(s => s.id);\n            this.reactive.dispatch(\n                'sectionContentCollapsed',\n                sectionIds,\n                false\n            );\n            this._collapseAllSectionsExceptFor(target);\n        }\n    }\n\n    /**\n     * Update a content section using the inview.\n     * @param {Object} state The state data\n     *\n     */\n    _inView(state) {\n        const self = this;\n        inView(this.selectors.SECTION_INVIEW_HEADER).on('enter', async function(target) {\n\n            if (target.dataset.for !== 'inview') {\n                return;\n            }\n\n            const section = target.closest(self.selectors.COURSE_SECTION);\n            const sectionId = section.getAttribute('data-id');\n            target.dataset.for = 'viwed';\n\n            const template = 'format_flexsections/local/content/section/cmlist';\n            const sectionToReplace = `[data-cmlistid=\"${sectionId}\"]`;\n\n            const request = {\n                methodname: 'format_flexsections_get_section_content',\n                args: {\n                    sectionid: sectionId\n                }\n            };\n\n            try {\n                const response = await Ajax.call([request])[0];\n\n                if (response.result) {\n                    const data = JSON.parse(response.data);\n\n                    if (data.cmlist === undefined) {\n                        data.cmlist = [];\n                    }\n\n                    await self.reactive.dispatch('sectionState', [sectionId]);\n\n                    const {html, js} = await Templates.renderForPromise(template, data.cmlist);\n                    await Templates.replaceNodeContents(sectionToReplace, html, js);\n\n                    if (data.sharebuttonenable) {\n                        sharewith.addShareActivityButton(null, `[data-cmlistid=\"${sectionId}\"]`);\n                    }\n                } else {\n                    Notification.addNotification({\n                        type: 'error',\n                        message: 'No valid response'\n                    });\n                }\n            } catch (e) {\n                Notification.exception(e);\n            }\n        });\n    }\n}"],"names":["FlexsectionComponent","Component","target","selectors","sectionReturn","courseEditor","getExporter","Exporter","legacyActivityAction","mutations","legacySectionAction","setMutations","Mutations","addMutations","element","document","getElementById","reactive","create","descriptor","name","COURSE_SUBSECTIONLIST","COURSE_SECTION","SECTION_INVIEW_HEADER","stateReady","state","this","supportComponents","isEditing","FlexsectionsActions","course","accordion","_ensureOnlyOneSectionIsExpanded","window","addEventListener","_hashHandler","bind","_inView","isExpanded","sectionInfo","showaslink","contentcollapsed","hasExpandedChildren","children","some","s","firstExpandedSection","_getSectionsWithCollapse","sectionitem","getElement","SECTION","id","_collapseAllSectionsExceptFor","getWatchers","res","super","push","watch","handler","_refreshCourseHierarchy","_refreshSection","self","sectionId","sectionToReplace","request","methodname","args","sectionid","response","Ajax","call","result","data","JSON","parse","undefined","cmlist","dispatch","html","js","Templates","renderForPromise","replaceNodeContents","sharebuttonenable","addShareActivityButton","addNotification","type","message","e","exception","hierarchy","createSection","_createSectionItem","i","length","sectionlist","listparent","_fixOrder","dettachedSections","_indexContents","_scanIndex","sections","item","Section","CM","cms","CmItem","_sectionTogglers","event","sectionlink","closest","TOGGLER","closestCollapse","COLLAPSE","isChevron","SECTION_ITEM","section","toggler","querySelector","isCollapsed","classList","contains","classes","COLLAPSED","parseInt","getAttribute","stateManager","scrollToSection","sectionNumber","leaveOpen","_findAllParents","includes","splice","indexOf","sectionIds","filter","map","setTimeout","scrollIntoView","behavior","block","_refreshAllSectionsToggler","TOGGLEALL","allcollapsed","mainSection","_mainSection","parent","add","setAttribute","remove","_allSectionToggler","preventDefault","isAllCollapsed","ids","parents","displayedSections","forEach","number","_this$getElement","thisSectionNumber","find","location","hash","toExpand","on","async","dataset","for"],"mappings":"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"}