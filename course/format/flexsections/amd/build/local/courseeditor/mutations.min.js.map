{"version":3,"file":"mutations.min.js","sources":["../../../src/local/courseeditor/mutations.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport Mutations from 'core_courseformat/local/courseeditor/mutations';\r\n\r\n/**\r\n * Mutations\r\n *\r\n * @module     format_flexsections/local/courseeditor/mutations\r\n * @copyright  2022 Marina Glancy\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nexport default class extends Mutations {\r\n    // Extends: course/format/amd/src/local/courseeditor/mutations.js\r\n\r\n    /**\r\n     * Merge section with its parent.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {number} sectionId\r\n     */\r\n    async sectionMergeUp(stateManager, sectionId) {\r\n        this.sectionLock(stateManager, [sectionId], true);\r\n        const course = stateManager.get('course');\r\n        const updates = await this._callEditWebservice('section_mergeup', course.id, [], sectionId);\r\n        stateManager.processUpdates(updates);\r\n        this.sectionLock(stateManager, [sectionId], false);\r\n    }\r\n\r\n    /**\r\n     * Add a new subsection to a specific section.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {number} parentSectionId\r\n     */\r\n    async addSubSection(stateManager, parentSectionId) {\r\n        const course = stateManager.get('course');\r\n        const updates = await this._callEditWebservice('section_add_subsection', course.id, [], parentSectionId);\r\n        stateManager.processUpdates(updates);\r\n    }\r\n\r\n    /**\r\n     * Add a new section to a specific course location.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {number} parentSectionId optional the target section id\r\n     */\r\n    async insertSubSection(stateManager, parentSectionId) {\r\n        const course = stateManager.get('course');\r\n        const updates = await this._callEditWebservice('section_insert_subsection', course.id, [], parentSectionId);\r\n        stateManager.processUpdates(updates);\r\n    }\r\n}"],"names":["Mutations","stateManager","sectionId","sectionLock","course","get","updates","this","_callEditWebservice","id","processUpdates","parentSectionId"],"mappings":";;;;;;;0KAwB6BA,wCASJC,aAAcC,gBAC1BC,YAAYF,aAAc,CAACC,YAAY,SACtCE,OAASH,aAAaI,IAAI,UAC1BC,cAAgBC,KAAKC,oBAAoB,kBAAmBJ,OAAOK,GAAI,GAAIP,WACjFD,aAAaS,eAAeJ,cACvBH,YAAYF,aAAc,CAACC,YAAY,uBAS5BD,aAAcU,uBACxBP,OAASH,aAAaI,IAAI,UAC1BC,cAAgBC,KAAKC,oBAAoB,yBAA0BJ,OAAOK,GAAI,GAAIE,iBACxFV,aAAaS,eAAeJ,gCASTL,aAAcU,uBAC3BP,OAASH,aAAaI,IAAI,UAC1BC,cAAgBC,KAAKC,oBAAoB,4BAA6BJ,OAAOK,GAAI,GAAIE,iBAC3FV,aAAaS,eAAeJ"}