{"version":3,"file":"questionindicator copy.min.js","sources":["../src/questionindicator copy.js"],"sourcesContent":["/* eslint-disable space-before-function-paren */\n/* eslint-disable block-scoped-var */\n/* eslint-disable no-empty */\n/* eslint-disable no-undef */\n/* eslint-disable no-console */\n/* eslint-disable no-dupe-keys */\n/* eslint-disable no-unused-vars */\n/* eslint-disable key-spacing */\n/* eslint-disable spaced-comment */\n/* eslint-disable capitalized-comments */\n\nimport $ from \"jquery\";\nimport Tabulator from \"https://unpkg.com/tabulator-tables/dist/js/tabulator.min.js\";\n\nexport default {\n  init: function (input, params, hascapedit) {\n    console.log(\"INIT\");\n    console.log(input);\n\n    let tabledata = Object.keys(input).map((key) => input[key]);\n    // tabledata.sort((a, b) => a.sortorder - b.sortorder);\n\n    console.log(tabledata);\n\n    var lang = $(\"html\")[0].lang;\n\n    if (lang === \"he\") {\n      // Handle Hebrew specific code if needed\n    } else {\n      var table = new Tabulator(\"#questionindicatorfulltable-table\", {\n        movableRows: hascapedit,\n        height: 540,\n        data: tabledata,\n        textDirection: \"ltr\",\n        layout: \"fitColumns\",\n        columns: [\n          {\n            rowHandle: hascapedit,\n            formatter: \"handle\",\n            headerSort: false,\n            frozen: true,\n            width: 30,\n            minWidth: 30,\n          },\n          {\n            field: \"isindicatorselected\",\n            hozAlign: \"center\",\n            headerHozAlign: \"center\",\n            headerSort: false,\n            formatter: (cell) => {\n              const catid = cell.getRow()._row.data.id;\n              const value = cell.getValue();\n              return `\n                <input class=\"n_catch n_catch2\" ${\n                  hascapedit ? \"\" : \"disabled=disabled\"\n                }\n                type=\"checkbox\" ${\n                  value ? 'checked=\"checked\"' : \"\"\n                } name=\"n_indicators_${catid}[]\"\n                id=\"n_indicators_${catid}\"/>\n              `;\n            },\n            title: hascapedit\n              ? `\n                <span>Select all</span>\n                <br>\n                <input class=\"n_catch_all\" type=\"checkbox\" name=\"n_catch_all\" id=\"n_catch_all\"/>\n                `\n              : `<span>Select all</span>`,\n          },\n          {\n            title: \"Indicatorid\",\n            field: \"indicatorid\",\n            width: \"10%\",\n            headerFilter: \"input\",\n            headerFilterLiveFilter: true,\n            headerSort: false,\n          },\n          {\n            title: \"Name\",\n            field: \"name\",\n            editor: hascapedit ? true : false,\n            width: \"30%\",\n            headerFilter: \"input\",\n            headerFilterLiveFilter: true,\n            headerSort: false,\n          },\n          {\n            title: \"Model\",\n            field: \"model\",\n            editor: hascapedit ? \"list\" : false,\n            headerFilter: \"input\",\n            headerFilterLiveFilter: true,\n            headerSort: false,\n            editorParams: {\n              values: params.models, // TODO:\n              allowEmpty: true,\n              listOnEmpty: true,\n              clearable: true,\n              itemFormatter: (label, value, item, element) => {\n                return `\n                  <strong>${label}</strong><br/>\n                `;\n              },\n            },\n            formatter: (cell, formatterParams, onRendered) => {\n              return params.models[cell.getValue()] === \"â€”\"\n                ? \"\"\n                : params.models[cell.getValue()];\n            },\n            headerSort: false,\n            cssClass: hascapedit ? \"editablecol\" : false,\n          },\n          {\n            title: \"Research\",\n            field: \"research\",\n            hozAlign: \"center\",\n            headerHozAlign: \"center\",\n            headerSort: false,\n            formatter: \"tickCross\",\n            editor: \"tickCross\",\n            editorParams: {\n              trueValue: 1,\n              falseValue: 0,\n            },\n          },\n          {\n            title: \"Visible\",\n            field: \"visible\",\n            hozAlign: \"center\",\n            headerHozAlign: \"center\",\n            headerSort: false,\n            formatter: \"tickCross\",\n            editor: \"tickCross\",\n            editorParams: {\n              trueValue: 1,\n              falseValue: 0,\n            },\n          },\n        ],\n      });\n\n      // Listeners.\n      if (hascapedit) {\n        table.on(\"tableBuilt\", function () {\n          $(\"#n_catch_all\").change(function () {\n            const cells = table.getColumn(\"isindicatorselected\").getCells();\n            cells.forEach((element) => {\n              element.setValue(this.checked);\n            });\n          });\n          $(\"form\").submit((e) => {\n            $(\"#questionindicatorfulltable\").attr(\n              \"value\",\n              JSON.stringify(table.getData())\n            );\n            return true;\n          });\n        });\n\n        // table.on(\"cellClick\", function (e, cell) {\n        //     if ($(e.target).hasClass(\"n_catch\")) {\n        //         cell.setValue($(e.target).is(\":checked\"));\n        //     }\n        // });\n      }\n    }\n  },\n};\n"],"names":["init","input","params","hascapedit","console","log","tabledata","Object","keys","map","key","lang","table","Tabulator","movableRows","height","data","textDirection","layout","columns","rowHandle","formatter","headerSort","frozen","width","minWidth","field","hozAlign","headerHozAlign","cell","catid","getRow","_row","id","value","getValue","title","headerFilter","headerFilterLiveFilter","editor","editorParams","values","models","allowEmpty","listOnEmpty","clearable","itemFormatter","label","item","element","formatterParams","onRendered","cssClass","trueValue","falseValue","on","change","getColumn","getCells","forEach","setValue","this","checked","submit","e","attr","JSON","stringify","getData"],"mappings":"6bAce,CACbA,KAAM,SAAUC,MAAOC,OAAQC,YAC7BC,QAAQC,IAAI,QACZD,QAAQC,IAAIJ,WAERK,UAAYC,OAAOC,KAAKP,OAAOQ,KAAKC,KAAQT,MAAMS,UAGtDN,QAAQC,IAAIC,WAIC,QAFF,mBAAE,QAAQ,GAAGK,UAIjB,KACDC,MAAQ,IAAIC,sBAAU,oCAAqC,CAC7DC,YAAaX,WACbY,OAAQ,IACRC,KAAMV,UACNW,cAAe,MACfC,OAAQ,aACRC,QAAS,CACP,CACEC,UAAWjB,WACXkB,UAAW,SACXC,YAAY,EACZC,QAAQ,EACRC,MAAO,GACPC,SAAU,IAEZ,CACEC,MAAO,sBACPC,SAAU,SACVC,eAAgB,SAChBN,YAAY,EACZD,UAAYQ,aACJC,MAAQD,KAAKE,SAASC,KAAKhB,KAAKiB,GAChCC,MAAQL,KAAKM,iBACX,qDAEJhC,WAAa,GAAK,wDAGlB+B,MAAQ,oBAAsB,yBACTJ,8CACJA,0BAPrB,EAUFM,MAAOjC,WACF,sLAKA,2BAEP,CACEiC,MAAO,cACPV,MAAO,cACPF,MAAO,MACPa,aAAc,QACdC,wBAAwB,EACxBhB,YAAY,GAEd,CACEc,MAAO,OACPV,MAAO,OACPa,SAAQpC,WACRqB,MAAO,MACPa,aAAc,QACdC,wBAAwB,EACxBhB,YAAY,GAEd,CACEc,MAAO,QACPV,MAAO,QACPa,SAAQpC,YAAa,OACrBkC,aAAc,QACdC,wBAAwB,EACxBhB,YAAY,EACZkB,aAAc,CACZC,OAAQvC,OAAOwC,OACfC,YAAY,EACZC,aAAa,EACbC,WAAW,EACXC,cAAe,CAACC,MAAOb,MAAOc,KAAMC,UAC1B,+BACIF,yCAIhB1B,UAAW,CAACQ,KAAMqB,gBAAiBC,aACS,MAAnCjD,OAAOwC,OAAOb,KAAKM,YACtB,GACAjC,OAAOwC,OAAOb,KAAKM,YAEzBb,YAAY,EACZ8B,WAAUjD,YAAa,eAEzB,CACEiC,MAAO,WACPV,MAAO,WACPC,SAAU,SACVC,eAAgB,SAChBN,YAAY,EACZD,UAAW,YACXkB,OAAQ,YACRC,aAAc,CACZa,UAAW,EACXC,WAAY,IAGhB,CACElB,MAAO,UACPV,MAAO,UACPC,SAAU,SACVC,eAAgB,SAChBN,YAAY,EACZD,UAAW,YACXkB,OAAQ,YACRC,aAAc,CACZa,UAAW,EACXC,WAAY,OAOhBnD,YACFS,MAAM2C,GAAG,cAAc,+BACnB,gBAAgBC,QAAO,WACT5C,MAAM6C,UAAU,uBAAuBC,WAC/CC,SAASV,UACbA,QAAQW,SAASC,KAAKC,mCAGxB,QAAQC,QAAQC,wBACd,+BAA+BC,KAC/B,QACAC,KAAKC,UAAUvD,MAAMwD,aAEhB"}