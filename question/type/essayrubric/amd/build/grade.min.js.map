{"version":3,"file":"grade.min.js","sources":["../src/grade.js"],"sourcesContent":["/* eslint-disable babel/no-unused-expressions */\r\n/* eslint-disable max-len */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable no-unreachable */\r\n/* eslint-disable babel/object-curly-spacing */\r\n/* eslint-disable no-empty-function */\r\n/* eslint-disable no-multiple-empty-lines */\r\n/* eslint-disable babel/semi */\r\n/* eslint-disable brace-style */\r\n/* eslint-disable block-spacing */\r\n/* eslint-disable max-statements-per-line */\r\n/* eslint-disable semi-spacing */\r\n/* eslint-disable no-debugger */\r\n/* eslint-disable space-before-blocks */\r\n/* eslint-disable no-trailing-spaces */\r\n/* eslint-disable space-before-function-paren */\r\n/* eslint-disable block-scoped-var */\r\n/* eslint-disable no-empty */\r\n/* eslint-disable no-undef */\r\n/* eslint-disable no-console */\r\n/* eslint-disable no-dupe-keys */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable key-spacing */\r\n/* eslint-disable spaced-comment */\r\n/* eslint-disable capitalized-comments */\r\n\r\nimport Ajax from \"core/ajax\";\r\n\r\nexport default {\r\n  init: function (qid, qaid, maxmark, minfraction, maxfraction, usageid, slot) {\r\n    Ajax.call([\r\n      {\r\n        methodname: \"qtype_essayrubric_get_grades\",\r\n        args: {\r\n          qaid: qaid,\r\n          qid: qid,\r\n        },\r\n        done: function (result) {\r\n          result = JSON.parse(result.result);\r\n          render(result);\r\n        },\r\n        fail: {},\r\n      },\r\n    ]);\r\n\r\n    const render = (data) => {\r\n      // Hide comment block. Not needed.\r\n      // let fitems = document.querySelectorAll(\".fitem\");\r\n      // fitems.forEach((fitem) => {\r\n      //   let fitemTitle = fitem.querySelector('[id$=\"-comment_id\"]');\r\n      //   if (fitemTitle) {\r\n      //     fitem.style.display = \"none\";\r\n      //   }\r\n      // });\r\n\r\n      const manualgradingform = document.getElementById(\"manualgradingform\");\r\n\r\n      manualgradingform.addEventListener(\"submit\", (event) => {\r\n        // Store grades\r\n        Ajax.call([\r\n          {\r\n            methodname: \"qtype_essayrubric_store_grades\",\r\n            args: {\r\n              data: JSON.stringify(data),\r\n              qaid: qaid,\r\n            },\r\n            done: function (result) {},\r\n            fail: {},\r\n          },\r\n        ]);\r\n      });\r\n\r\n      const gradeInputs = document.getElementsByClassName(\"gradeinput\");\r\n      for (const gradeInput of gradeInputs) {\r\n        gradeInput.addEventListener(\"change\", (event) => {\r\n          recalcGrade(manualgradingform, qaid);\r\n        });\r\n      }\r\n\r\n      const recalcGrade = (manualgradingform, qaid) => {\r\n        // const indicators = {};\r\n        for (const input of manualgradingform.querySelectorAll(\r\n          '[name^=\"indicator_' + qaid + '_\"]'\r\n        )) {\r\n          const indicatorId = input.name.split(\"_\")[2];\r\n          // indicators[indicatorId] = indicatorValue;\r\n          data.isgradestypescalar = Number(data.isgradestypescalar);\r\n          if (data.isgradestypescalar) {\r\n            const indicatorValue = input.value;\r\n            data.indicatorlist[indicatorId].checked = +indicatorValue;\r\n            data.indicatorlist[indicatorId].weightedGrade =\r\n              (indicatorValue / 5) *\r\n              data.indicatorlist[indicatorId].normalizedWeight;\r\n            data.indicatorlist[indicatorId].normalizedGrade =\r\n              data.indicatorlist[indicatorId].weightedGrade == 0\r\n                ? 0\r\n                : (data.indicatorlist[indicatorId].weightedGrade /\r\n                    data.indicatorlist[indicatorId].normalizedWeight) *\r\n                  100;\r\n          } else {\r\n            const indicatorValue = input.checked;\r\n            data.indicatorlist[indicatorId].checked = +indicatorValue;\r\n            data.indicatorlist[indicatorId].weightedGrade =\r\n              indicatorValue * data.indicatorlist[indicatorId].normalizedWeight;\r\n            data.indicatorlist[indicatorId].normalizedGrade =\r\n              data.indicatorlist[indicatorId].weightedGrade === 0\r\n                ? 0\r\n                : (indicatorValue *\r\n                    100 *\r\n                    data.indicatorlist[indicatorId].normalizedWeight) /\r\n                  data.indicatorlist[indicatorId].weightedGrade;\r\n          }\r\n        }\r\n\r\n        let questionGradeMarkEl = document.getElementById(\r\n          \"q\" + usageid + \":\" + slot + \"_-mark\"\r\n        );\r\n\r\n        let totalGrade = 0;\r\n\r\n        data.indicatorlist.forEach((element) => {\r\n          let weighted = element.weightedGrade;\r\n          totalGrade += weighted;\r\n        });\r\n\r\n        totalGrade = (totalGrade * maxmark) / 100;\r\n\r\n        totalGrade = Number(totalGrade.toFixed(2));\r\n        questionGradeMarkEl.value = totalGrade;\r\n\r\n        data.grade = totalGrade;\r\n      };\r\n\r\n      let totalWeight = 0;\r\n      let totalIndicators = data.indicatorlist.length;\r\n\r\n      data.indicatorlist = data.indicatorlist.map((ind, key) => {\r\n        let indWeight =\r\n          ind.weight == undefined || ind.weight == \"\" ? 0 : +ind.weight;\r\n        totalWeight += indWeight;\r\n        ind.weight = indWeight;\r\n        return ind;\r\n      });\r\n\r\n      data.indicatorlist = data.indicatorlist.map((ind, key) => {\r\n        ind.normalizedWeight = (ind.weight / totalWeight) * 100;\r\n        return ind;\r\n      });\r\n    };\r\n  },\r\n};\r\n"],"names":["init","qid","qaid","maxmark","minfraction","maxfraction","usageid","slot","call","methodname","args","done","result","JSON","parse","render","fail","data","manualgradingform","document","getElementById","addEventListener","event","stringify","gradeInputs","getElementsByClassName","gradeInput","recalcGrade","input","querySelectorAll","indicatorId","name","split","isgradestypescalar","Number","indicatorValue","value","indicatorlist","checked","weightedGrade","normalizedWeight","normalizedGrade","questionGradeMarkEl","totalGrade","forEach","element","weighted","toFixed","grade","totalWeight","length","map","ind","key","indWeight","undefined","weight"],"mappings":"4OA4Be,CACbA,KAAM,SAAUC,IAAKC,KAAMC,QAASC,YAAaC,YAAaC,QAASC,oBAChEC,KAAK,CACR,CACEC,WAAY,+BACZC,KAAM,CACJR,KAAMA,KACND,IAAKA,KAEPU,KAAM,SAAUC,QACdA,OAASC,KAAKC,MAAMF,OAAOA,QAC3BG,OAAOH,SAETI,KAAM,YAIJD,OAAUE,aAURC,kBAAoBC,SAASC,eAAe,qBAElDF,kBAAkBG,iBAAiB,UAAWC,sBAEvCd,KAAK,CACR,CACEC,WAAY,iCACZC,KAAM,CACJO,KAAMJ,KAAKU,UAAUN,MACrBf,KAAMA,MAERS,KAAM,SAAUC,UAChBI,KAAM,eAKNQ,YAAcL,SAASM,uBAAuB,kBAC/C,MAAMC,cAAcF,YACvBE,WAAWL,iBAAiB,UAAWC,QACrCK,YAAYT,kBAAmBhB,eAI7ByB,YAAc,CAACT,kBAAmBhB,YAEjC,MAAM0B,SAASV,kBAAkBW,iBACpC,qBAAuB3B,KAAO,OAC7B,OACK4B,YAAcF,MAAMG,KAAKC,MAAM,KAAK,MAE1Cf,KAAKgB,mBAAqBC,OAAOjB,KAAKgB,oBAClChB,KAAKgB,mBAAoB,OACrBE,eAAiBP,MAAMQ,MAC7BnB,KAAKoB,cAAcP,aAAaQ,SAAWH,eAC3ClB,KAAKoB,cAAcP,aAAaS,cAC7BJ,eAAiB,EAClBlB,KAAKoB,cAAcP,aAAaU,iBAClCvB,KAAKoB,cAAcP,aAAaW,gBACmB,GAAjDxB,KAAKoB,cAAcP,aAAaS,cAC5B,EACCtB,KAAKoB,cAAcP,aAAaS,cAC/BtB,KAAKoB,cAAcP,aAAaU,iBAClC,QACD,OACCL,eAAiBP,MAAMU,QAC7BrB,KAAKoB,cAAcP,aAAaQ,SAAWH,eAC3ClB,KAAKoB,cAAcP,aAAaS,cAC9BJ,eAAiBlB,KAAKoB,cAAcP,aAAaU,iBACnDvB,KAAKoB,cAAcP,aAAaW,gBACoB,IAAlDxB,KAAKoB,cAAcP,aAAaS,cAC5B,EAEE,IADDJ,eAEClB,KAAKoB,cAAcP,aAAaU,iBAClCvB,KAAKoB,cAAcP,aAAaS,mBAItCG,oBAAsBvB,SAASC,eACjC,IAAMd,QAAU,IAAMC,KAAO,UAG3BoC,WAAa,EAEjB1B,KAAKoB,cAAcO,SAASC,cACtBC,SAAWD,QAAQN,cACvBI,YAAcG,YAGhBH,WAAcA,WAAaxC,QAAW,IAEtCwC,WAAaT,OAAOS,WAAWI,QAAQ,IACvCL,oBAAoBN,MAAQO,WAE5B1B,KAAK+B,MAAQL,gBAGXM,YAAc,EACIhC,KAAKoB,cAAca,OAEzCjC,KAAKoB,cAAgBpB,KAAKoB,cAAcc,KAAI,CAACC,IAAKC,WAC5CC,UACYC,MAAdH,IAAII,QAAqC,IAAdJ,IAAII,OAAe,GAAKJ,IAAII,cACzDP,aAAeK,UACfF,IAAII,OAASF,UACNF,OAGTnC,KAAKoB,cAAgBpB,KAAKoB,cAAcc,KAAI,CAACC,IAAKC,OAChDD,IAAIZ,iBAAoBY,IAAII,OAASP,YAAe,IAC7CG"}