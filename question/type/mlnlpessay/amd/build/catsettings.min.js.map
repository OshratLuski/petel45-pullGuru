{"version":3,"file":"catsettings.min.js","sources":["../src/catsettings.js"],"sourcesContent":["import Ajax from \"core/ajax\";\nimport Notification, {saveCancelPromise} from \"core/notification\";\nimport Tabulator from \"qtype_mlnlpessay/tabulatorlib\";\nimport Modal from \"core/modal\";\nimport ModalEvents from \"core/modal_events\";\nimport {get_string as getString} from \"core/str\";\nimport Templates from \"core/templates\";\nimport Fragment from \"core/fragment\";\nimport $ from \"jquery\";\n\nconst SELECTORS = {\n    CATCONTAINER: '.mlnlpessay-categories-wrapper',\n    LANGCONTAINER: '.mlnlpessay-lang-wrapper',\n    ADDEDITTRIGGER: 'qtype-mlnlpessay-settingaddedit',\n    TOPICCONTAINER: '.mlnlpessay-topics-wrapper',\n    SUBTOPICCONTAINER: '.mlnlpessay-subtopics-wrapper',\n    MODALCONTAINER: '.mlnlpessay-modal',\n    DELETETRIGGER: 'qtype-mlnlpessay-settingdelete',\n    VISIBILITYTRIGGER: 'qtype-mlnlpessay-settingvisibilitytoggle',\n    CSVUPLOADTRIGGER: 'qtype-mlnlpessay-csvupload',\n    CSVVERIFYTRIGGER: 'qtype-mlnlpessay-csverify',\n    CSVCANCELTRIGGER: 'qtype-mlnlpessay-csvcancel',\n};\n\nconst getData = async(item) => {\n    let data = [];\n    let response = await Ajax.call([{\n        methodname: \"qtype_mlnlpessay_get_\" + item, args: {}\n    }])[0];\n\n    if (response.status) {\n        data = response.response;\n    }\n\n    return data;\n};\n\n// Global state for CSV modal\nwindow.qtypeMlnlpessayCsvModalState = {\n    step: 'upload', // 'upload', 'precheck', 'result'\n    precheckData: null,\n    formData: null,\n};\n\nexport const init = async(contextid) => {\n    const tables = {\n        categoriestable: new Tabulator(SELECTORS.CATCONTAINER, {\n            data: await getData('categories'), // Load row data from array\n            layout: \"fitColumns\", // Fit columns to width of table\n            responsiveLayout: \"hide\", // Hide columns that don't fit on the table\n            addRowPos: \"top\", // When adding a new row, add it to the top of the table\n            history: true, // Allow undo and redo actions on the table\n            pagination: \"local\", // Paginate the data\n            paginationSize: 7, // Allow 7 rows per page of data\n            paginationSizeSelector: true,\n            paginationCounter: \"rows\", // Display count of paginated rows in footer\n            movableColumns: true, // Allow column order to be changed\n            initialSort: [ // Set the initial sort order of the data\n                {column: \"id\", dir: \"asc\"},\n            ],\n            columnDefaults: {\n                tooltip: true, // Show tool tips on cells\n            },\n            columns: [ // Define the table columns\n                {title: M.util.get_string('catid', 'qtype_mlnlpessay'), field: \"id\", headerSort: true, sorter: \"number\"},\n                {\n                    title: M.util.get_string('categoryname', 'qtype_mlnlpessay'), field: \"name\",\n                    headerFilter: \"input\",\n                    headerFilterLiveFilter: true,\n                },\n                {\n                    title: M.util.get_string('modelid', 'qtype_mlnlpessay'), field: \"modelid\",\n                    headerFilter: \"input\",\n                    headerFilterLiveFilter: true,\n                },\n                {\n                    title: M.util.get_string('modelname', 'qtype_mlnlpessay'), field: \"model\",\n                    headerFilter: \"input\",\n                    headerFilterLiveFilter: true,\n                },\n                {\n                    title: M.util.get_string('categorytag', 'qtype_mlnlpessay'), field: \"tag\",\n                    headerFilter: \"input\",\n                    headerFilterLiveFilter: true,\n                },\n                {\n                    title: M.util.get_string('descriptioncategory', 'qtype_mlnlpessay'), field: \"description\",\n                    headerFilter: \"input\",\n                    headerFilterLiveFilter: true,\n                },\n                {\n                    title: M.util.get_string('catlang', 'qtype_mlnlpessay'), field: \"lang\",\n                    headerFilter: \"input\",\n                    headerFilterLiveFilter: true,\n                },\n                {\n                    title: M.util.get_string('cattopic', 'qtype_mlnlpessay'), field: \"topic\",\n                    headerFilter: \"input\",\n                    headerFilterLiveFilter: true,\n                },\n                {\n                    title: M.util.get_string('catsubtopic', 'qtype_mlnlpessay'), field: \"subtopic\",\n                    headerFilter: \"input\",\n                    headerFilterLiveFilter: true,\n                },\n                {title: M.util.get_string('catstatus', 'qtype_mlnlpessay'), field: \"active\", formatter: \"html\"},\n                {title: M.util.get_string('catactions', 'qtype_mlnlpessay'), field: \"catactions\", formatter: \"html\"},\n            ],\n        }),\n        langstable: new Tabulator(SELECTORS.LANGCONTAINER, {\n            data: await getData('langs'), // Load row data from array\n            layout: \"fitColumns\", // Fit columns to width of table\n            responsiveLayout: \"hide\", // Hide columns that don't fit on the table\n            addRowPos: \"top\", // When adding a new row, add it to the top of the table\n            history: true, // Allow undo and redo actions on the table\n            pagination: \"local\", // Paginate the data\n            paginationSize: 7, // Allow 7 rows per page of data\n            paginationSizeSelector: true,\n            paginationCounter: \"rows\", // Display count of paginated rows in footer\n            movableColumns: true, // Allow column order to be changed\n            initialSort: [ // Set the initial sort order of the data\n                {column: \"id\", dir: \"asc\"},\n            ],\n            columnDefaults: {\n                tooltip: true, // Show tool tips on cells\n            },\n            columns: [ // Define the table columns\n                {title: M.util.get_string('langid', 'qtype_mlnlpessay'), field: \"id\"},\n                {title: M.util.get_string('langcode', 'qtype_mlnlpessay'), field: \"code\"},\n                {title: M.util.get_string('langname', 'qtype_mlnlpessay'), field: \"name\"},\n                {title: M.util.get_string('langactive', 'qtype_mlnlpessay'), field: \"active\", formatter: \"html\"},\n                {title: M.util.get_string('langactions', 'qtype_mlnlpessay'), field: \"langactions\", formatter: \"html\"},\n            ],\n        }),\n        topicstable: new Tabulator(SELECTORS.TOPICCONTAINER, {\n            data: await getData('topics'), // Load row data from array\n            layout: \"fitColumns\", // Fit columns to width of table\n            responsiveLayout: \"hide\", // Hide columns that don't fit on the table\n            addRowPos: \"top\", // When adding a new row, add it to the top of the table\n            history: true, // Allow undo and redo actions on the table\n            pagination: \"local\", // Paginate the data\n            paginationSize: 7, // Allow 7 rows per page of data\n            paginationSizeSelector: true,\n            paginationCounter: \"rows\", // Display count of paginated rows in footer\n            movableColumns: true, // Allow column order to be changed\n            initialSort: [ // Set the initial sort order of the data\n                {column: \"id\", dir: \"asc\"},\n            ],\n            columnDefaults: {\n                tooltip: true, // Show tool tips on cells\n            },\n            columns: [ // Define the table columns\n                {title: M.util.get_string('topicid', 'qtype_mlnlpessay'), field: \"id\"},\n                {title: M.util.get_string('topicname', 'qtype_mlnlpessay'), field: \"name\"},\n                {title: M.util.get_string('topicactive', 'qtype_mlnlpessay'), field: \"active\", formatter: \"html\"},\n                {title: M.util.get_string('topicactions', 'qtype_mlnlpessay'), field: \"topicactions\", formatter: \"html\"},\n            ],\n        }),\n        subtopicstable: new Tabulator(SELECTORS.SUBTOPICCONTAINER, {\n            data: await getData('subtopics'), // Load row data from array\n            layout: \"fitColumns\", // Fit columns to width of table\n            responsiveLayout: \"hide\", // Hide columns that don't fit on the table\n            addRowPos: \"top\", // When adding a new row, add it to the top of the table\n            history: true, // Allow undo and redo actions on the table\n            pagination: \"local\", // Paginate the data\n            paginationSize: 7, // Allow 7 rows per page of data\n            paginationSizeSelector: true,\n            paginationCounter: \"rows\", // Display count of paginated rows in footer\n            movableColumns: true, // Allow column order to be changed\n            initialSort: [ // Set the initial sort order of the data\n                {column: \"id\", dir: \"asc\"},\n            ],\n            columnDefaults: {\n                tooltip: true, // Show tool tips on cells\n            },\n            columns: [ // Define the table columns\n                {title: M.util.get_string('subtopicid', 'qtype_mlnlpessay'), field: \"id\"},\n                {title: M.util.get_string('subtopicname', 'qtype_mlnlpessay'), field: \"name\"},\n                {title: M.util.get_string('subtopicactive', 'qtype_mlnlpessay'), field: \"active\", formatter: \"html\"},\n                {title: M.util.get_string('subtopicactions', 'qtype_mlnlpessay'), field: \"subtopicactions\", formatter: \"html\"},\n            ],\n        })\n    };\n\n    document.addEventListener('click', async function(e) {\n        if (e.target.classList.contains(SELECTORS.ADDEDITTRIGGER)) {\n            e.preventDefault();\n            let action = e.target.getAttribute('data-action');\n            const modal = await Modal.create({\n                title: await getString('modal' + action + 'title', 'qtype_mlnlpessay'),\n                body: await Templates.render('qtype_mlnlpessay/modal', {\"action\": action}),\n            });\n            modal.show();\n            modal.getRoot().on(ModalEvents.hidden, function() {\n                modal.destroy();\n            });\n            let fragmentargs = {action: action};\n            if (e.target.getAttribute('data-id')) {\n                fragmentargs.id = e.target.getAttribute('data-id');\n            }\n            Fragment.loadFragment('qtype_mlnlpessay', 'settingsform', contextid,\n                fragmentargs\n            ).done(async function(html, js) {\n                    Templates.replaceNodeContents($(SELECTORS.MODALCONTAINER), html, js);\n                    $(SELECTORS.MODALCONTAINER).find('form').on('submit', async function(e) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        const formData = $(this).serializeArray();\n                        const newCategoryName = formData.find(item => item.name === 'name')?.value;\n                        const existingCategories = tables.categoriestable.getData();\n                        const categoryExists = existingCategories.some(category =>\n                            category.name.toLowerCase() === newCategoryName.toLowerCase() &&\n                            (!fragmentargs.id || category.id.toString() !== fragmentargs.id)\n                        );\n\n                        if (categoryExists) {\n                            modal.hide();\n                            const errorModal = await Modal.create({\n                                title: await getString('failedaddcategory', 'qtype_mlnlpessay'),\n                                body: await getString('categoryexists', 'qtype_mlnlpessay'),\n                                type: Modal.ALERT\n                            });\n                            errorModal.show();\n                            errorModal.getRoot().on(ModalEvents.hidden, function() {\n                                errorModal.destroy();\n                            });\n                            return;\n                        }\n\n                        Notification.saveCancelPromise(\n                            M.util.get_string('saveconfirm', 'qtype_mlnlpessay'),\n                            M.util.get_string('savewarning', 'qtype_mlnlpessay')\n                        ).then(() => {\n                            let formdata = $(this).serialize();\n                            Ajax.call([{\n                                methodname: \"qtype_mlnlpessay_save_settings\", args: {action: action, formdata: formdata}\n                            }])[0].done(async function(response) {\n                                if (response.status) {\n                                    Notification.addNotification({\n                                        message: M.util.get_string('savesuccess', 'qtype_mlnlpessay'),\n                                        type: 'info'\n                                    });\n                                    modal.hide();\n                                    let actiontable = action + 'table';\n                                    tables[actiontable].replaceData(await getData(action));\n                                } else {\n                                    Notification.addNotification({\n                                        message: M.util.get_string('saveerror', 'qtype_mlnlpessay'),\n                                        type: 'error'\n                                    });\n                                }\n                            }).fail(Notification.exception);\n                        });\n                    });\n                });\n        }\n        if (e.target.classList.contains(SELECTORS.DELETETRIGGER)) {\n            e.preventDefault();\n            let action = e.target.getAttribute('data-action');\n            let id = e.target.getAttribute('data-id');\n            Notification.deleteCancelPromise(\n                M.util.get_string('deleteconfirm', 'qtype_mlnlpessay'),\n                M.util.get_string('deletewarning', 'qtype_mlnlpessay')\n            ).then(() => {\n                Ajax.call([{\n                    methodname: \"qtype_mlnlpessay_delete_setting\", args: {action: action, id: id}\n                }])[0].done(async function(response) {\n                    if (response.status) {\n                        Notification.addNotification({\n                            message: M.util.get_string('deletesuccess', 'qtype_mlnlpessay'),\n                            type: 'info'\n                        });\n                        let actiontable = action + 'table';\n                        tables[actiontable].replaceData(await getData(action));\n                    } else {\n                        Notification.addNotification({\n                            message: M.util.get_string('saveerror', 'qtype_mlnlpessay'),\n                            type: 'error'\n                        });\n                    }\n                }).fail(Notification.exception);\n            }).catch(() => {\n                return;\n            });\n        }\n\n        if (e.target.classList.contains(SELECTORS.VISIBILITYTRIGGER)) {\n            e.preventDefault();\n            let action = e.target.getAttribute('data-action');\n            let id = e.target.getAttribute('data-id');\n            Ajax.call([{\n                methodname: \"qtype_mlnlpessay_toggle_visible\", args: {action: action, id: id}\n            }])[0].done(async function(response) {\n                if (response.status) {\n                    let actiontable = action + 'table';\n                    tables[actiontable].replaceData(await getData(action));\n                } else {\n                    Notification.addNotification({\n                        message: M.util.get_string('saveerror', 'qtype_mlnlpessay'),\n                        type: 'error'\n                    });\n                }\n            }).fail(Notification.exception);\n        }\n\n        if (e.target.classList.contains(SELECTORS.CSVUPLOADTRIGGER)) {\n            e.preventDefault();\n            window.qtypeMlnlpessayCsvModalState = {step: 'upload', precheckData: null, formData: null};\n            const modal = await Modal.create({\n                title: await getString('modalcsvuploadtitle', 'qtype_mlnlpessay'),\n                body: await Templates.render('qtype_mlnlpessay/modal', {}),\n            });\n            modal.show();\n            modal.getRoot().on(ModalEvents.hidden, async function() {\n                modal.destroy();\n                if (tables && tables.categoriestable) {\n                    const newData = await getData('categories');\n                    tables.categoriestable.replaceData(newData);\n                }\n                // Clear state on close\n                window.qtypeMlnlpessayCsvModalState = {step: 'upload', precheckData: null, formData: null};\n            });\n            Fragment.loadFragment('qtype_mlnlpessay', 'csvuploadform', contextid, [])\n                .done(async function(html, js) {\n                    Templates.replaceNodeContents($(SELECTORS.MODALCONTAINER), html, js);\n                    // Restore file selection if going back\n                    if (window.qtypeMlnlpessayCsvModalState.formData) {\n                        // Try to restore file input (not always possible for security reasons)\n                        // Optionally, show a message to reselect file if needed\n                    }\n                    $(SELECTORS.MODALCONTAINER).find('form').on('submit', async function(e) {\n                        e.preventDefault();\n                        Notification.saveCancelPromise(\n                            M.util.get_string('csvconfirm', 'qtype_mlnlpessay'),\n                            M.util.get_string('csvwarning', 'qtype_mlnlpessay'),\n                            M.util.get_string('csvproceed', 'qtype_mlnlpessay'),\n                        ).then(async () => {\n                            let formdata = $(this).serialize();\n                            // Show loading indicator\n                            Templates.replaceNodeContents($(SELECTORS.MODALCONTAINER), '<div class=\"text-center p-3\"><span class=\"spinner-border\" role=\"status\"></span></div>', '');\n                            let response = await Ajax.call([{\n                                methodname: \"qtype_mlnlpessay_csv_upload\", args: {formdata: formdata}\n                            }])[0];\n                            if (!response.status || !response.response || !response.response.rows || response.response.rows.length === 0) {\n                                Notification.addNotification({\n                                    message: M.util.get_string('csvuploaderror', 'qtype_mlnlpessay'),\n                                    type: 'error'\n                                });\n                                // Go back to upload form\n                                Fragment.loadFragment('qtype_mlnlpessay', 'csvuploadform', contextid, [])\n                                    .done(function(html, js) {\n                                        Templates.replaceNodeContents($(SELECTORS.MODALCONTAINER), html, js);\n                                    });\n                                return;\n                            }\n                            // Store precheck data for back button\n                            window.qtypeMlnlpessayCsvModalState = {step: 'precheck', precheckData: response.response, formData: formdata};\n                            let html = await Templates.render('qtype_mlnlpessay/csvuploadprecheck', response.response);\n                            Templates.replaceNodeContents($(SELECTORS.MODALCONTAINER), html, '');\n                            // Disable perform upload if no rows\n                            if (!response.response.rows || response.response.rows.length === 0) {\n                                $(SELECTORS.MODALCONTAINER).find('.qtype-mlnlpessay-csvprocess').prop('disabled', true);\n                            }\n                        });\n                    });\n                });\n        }\n\n        // Handle Back button in CSV modal (precheck/result)\n        if (e.target.classList.contains('qtype-mlnlpessay-csvback')) {\n            e.preventDefault();\n            if (window.qtypeMlnlpessayCsvModalState.step === 'result') {\n                // Go back to precheck step\n                window.qtypeMlnlpessayCsvModalState.step = 'precheck';\n                if (window.qtypeMlnlpessayCsvModalState.precheckData) {\n                    Templates.render('qtype_mlnlpessay/csvuploadprecheck', window.qtypeMlnlpessayCsvModalState.precheckData)\n                        .then(function(html) {\n                            Templates.replaceNodeContents($(SELECTORS.MODALCONTAINER), html, '');\n                        });\n                }\n            } else if (window.qtypeMlnlpessayCsvModalState.step === 'precheck') {\n                // Go back to upload form\n                window.qtypeMlnlpessayCsvModalState.step = 'upload';\n                Fragment.loadFragment('qtype_mlnlpessay', 'csvuploadform', contextid, [])\n                    .done(function(html, js) {\n                        Templates.replaceNodeContents($(SELECTORS.MODALCONTAINER), html, js);\n                        // Optionally restore form data\n                    });\n            }\n        }\n\n        // Handle Perform Upload (CSV Import) button in precheck modal\n        if (e.target.classList.contains('qtype-mlnlpessay-csvprocess')) {\n            e.preventDefault();\n            let form = $(SELECTORS.MODALCONTAINER).find('form');\n            let formdata = window.qtypeMlnlpessayCsvModalState.formData || (form.length ? form.serialize() : '');\n            if (!formdata) {\n                Notification.addNotification({\n                    message: 'Could not find CSV file data to upload.',\n                    type: 'error'\n                });\n                return;\n            }\n            // Show loading indicator\n            Templates.replaceNodeContents($(SELECTORS.MODALCONTAINER), '<div class=\"text-center p-3\"><span class=\"spinner-border\" role=\"status\"></span></div>', '');\n            Ajax.call([{\n                methodname: \"qtype_mlnlpessay_csv_upload_perform\", args: {formdata: formdata}\n            }])[0].done(async function(response) {\n                if (response.status) {\n                    window.qtypeMlnlpessayCsvModalState.step = 'result';\n                    let html = await Templates.render('qtype_mlnlpessay/csvuploadresult', response.response);\n                    Templates.replaceNodeContents($(SELECTORS.MODALCONTAINER), html, '');\n                } else {\n                    Notification.addNotification({\n                        message: response.message || 'CSV import failed.',\n                        type: 'error'\n                    });\n                }\n            }).fail(Notification.exception);\n        }\n\n        // Handle Undo button in CSV result step\n        if (e.target.classList.contains('qtype-mlnlpessay-csvundo')) {\n            e.preventDefault();\n            let importid = e.target.getAttribute('data-importid');\n            if (!importid) {\n                return;\n            }\n            // Disable button during AJAX\n            e.target.disabled = true;\n            Ajax.call([{\n                methodname: \"qtype_mlnlpessay_csv_upload_undo\", args: {importid: importid}\n            }])[0].done(function(response) {\n                if (response.status) {\n                    Notification.addNotification({\n                        message: M.util.get_string('csvundodone', 'qtype_mlnlpessay'),\n                        type: 'info'\n                    });\n                    // Optionally close modal or refresh categories table\n                    $(SELECTORS.MODALCONTAINER).closest('.modal').modal('hide');\n                } else {\n                    Notification.addNotification({\n                        message: response.message || 'Undo failed.',\n                        type: 'error'\n                    });\n                }\n            }).fail(Notification.exception).always(function() {\n                e.target.disabled = false;\n            });\n        }\n    });\n\n    // Custom search for categories table\n    $(document).on('keydown', '.mlnlpessay-categories-search', function(e) {\n        if (e.key === 'Enter') {\n            e.preventDefault();\n            e.stopPropagation();\n            const query = $(this).val().toLowerCase();\n            if (!query) {\n                tables.categoriestable.clearFilter();\n                return;\n            }\n            tables.categoriestable.setFilter(function(data) {\n                return Object.values(data).some(val =>\n                    (val !== null && val !== undefined && (val + '').includes(query))\n                );\n            });\n        }\n    });\n    $(document).on('keydown', '.tabulator-col input', function(e) {\n        if (e.key === 'Enter') {\n            e.preventDefault();\n            e.stopPropagation();\n            return false;\n        }\n    });\n};"],"names":["SELECTORS","getData","async","data","response","Ajax","call","methodname","item","args","status","window","qtypeMlnlpessayCsvModalState","step","precheckData","formData","tables","categoriestable","Tabulator","layout","responsiveLayout","addRowPos","history","pagination","paginationSize","paginationSizeSelector","paginationCounter","movableColumns","initialSort","column","dir","columnDefaults","tooltip","columns","title","M","util","get_string","field","headerSort","sorter","headerFilter","headerFilterLiveFilter","formatter","langstable","topicstable","subtopicstable","document","addEventListener","e","target","classList","contains","preventDefault","action","getAttribute","modal","Modal","create","body","Templates","render","show","getRoot","on","ModalEvents","hidden","destroy","fragmentargs","id","loadFragment","contextid","done","html","js","replaceNodeContents","find","stopPropagation","newCategoryName","this","serializeArray","name","_formData$find","value","some","category","toLowerCase","toString","hide","errorModal","type","ALERT","saveCancelPromise","then","formdata","serialize","addNotification","message","replaceData","fail","Notification","exception","deleteCancelPromise","catch","newData","rows","length","prop","form","importid","disabled","closest","always","key","query","val","clearFilter","setFilter","Object","values","includes"],"mappings":"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"}