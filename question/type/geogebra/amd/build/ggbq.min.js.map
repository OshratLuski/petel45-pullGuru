{"version":3,"file":"ggbq.min.js","sources":["../src/ggbq.js"],"sourcesContent":["/**\r\n * Javascript Controller to embed GGBApplet\r\n *\r\n * STUDENT VIEW\r\n *\r\n * This class provides all the functionality for the new assign module.\r\n *\r\n * @author         Christoph Stadlbauer <christoph.stadlbauer@geogebra.org>\r\n * @copyright  (c) International GeoGebra Institute 2018\r\n * @license        http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery', 'qtype_geogebra/deployggb'], function ($, GGBApplet) {\r\n    /**\r\n     * Created by Christoph on 25.08.19.\r\n     */\r\n\r\n    const scalingContainers = {};\r\n    let resizeTimeout;\r\n    /**\r\n     * Resizes the ggb scaling containers to make the ggb applet scale properly to fit into its container.\r\n     */\r\n    const resizeScalingContainer = () => {\r\n        clearTimeout(resizeTimeout);\r\n        resizeTimeout = setTimeout(\r\n            () => Object.values(scalingContainers).forEach((containerClass) => {\r\n                    // We need to use getElementsByClassName because colons are not allowed for jquery and Vanilla JS querySelector.\r\n                    const scalingContainer = document.getElementsByClassName(containerClass)[0];\r\n                    // We retrieve the formulation div container, because this gives us the correct width to adapt\r\n                    // the scaling container to.\r\n                    const formulationDivStyle = window.getComputedStyle(\r\n                        scalingContainer.querySelector('.qtext').parentElement.parentElement);\r\n                    scalingContainer.style.width = parseInt(formulationDivStyle.width)\r\n                        - parseInt(formulationDivStyle.paddingLeft) - parseInt(formulationDivStyle.paddingRight) + 'px';\r\n                }), 250);\r\n    };\r\n\r\n    return {\r\n        b64input: [],\r\n        ggbBase64: [],\r\n        xmlinput: [],\r\n        ggbxml: [],\r\n        currentvals: [],\r\n        answerinput: [],\r\n        responsevars: [],\r\n        exerciseresultinput: [],\r\n        qdiv: [],\r\n        //parameters: {},\r\n        ggbDataset: [],\r\n        //applet1,\r\n\r\n        init: function (appletParametersID) {\r\n            window.addEventListener(\"beforeprint\", () => {$('body').width(20000)});\r\n            window.addEventListener(\"afterprint\", () => {$('body').width(window.innerWidth)});\r\n            window.GGBQ = this;\r\n            var ggbDataset = document.getElementById(appletParametersID).dataset;\r\n            var slot = ggbDataset.slot;\r\n            // Add current scaling container to the object store for being able to access it later on.\r\n            scalingContainers[slot] = ggbDataset.scalingcontainerclass;\r\n            const geogebraLoadedInterval = setInterval(() => {\r\n                //Check if geogebras are fully loaded\r\n                if($('.ggbcontainer').length === $('.applet_scaler:has(canvas)').length) {\r\n                    $('.EuclidianPanel').on('click', (e) => {\r\n                        const previousWidth = $('.GeoGebraFrame.applet-focused')[0].parentElement.offsetHeight\r\n                        $('.GeoGebraFrame.applet-focused').css('height', `${previousWidth}px`)\r\n                    })\r\n                    clearInterval(geogebraLoadedInterval)\r\n                }\r\n            }, 500)\r\n            $('.ggbloading').hide()\r\n            window.ggbAppletOnLoad = function (ggbAppletId) {\r\n                if (ggbAppletId != -1) {\r\n                    document.querySelector('article').onkeydown = this.checkEnter;\r\n                    var id = ggbAppletId.substring(9);\r\n                    var ggbApplet = window[ggbAppletId];\r\n                    var curvals = JSON.parse(window.GGBQ.currentvals[id]);\r\n                    for (var label in curvals) {\r\n                        ggbApplet.setValue(label, curvals[label]);\r\n                    }\r\n\r\n                    // Set the initial size of the scaling containers so GeoGebra applet scale a first time correctly after loading.\r\n                    resizeScalingContainer();\r\n                    // Unregister old event listeners in case we have multiple GeoGebra questions on one page.\r\n                    // We only need one for the whole page.\r\n                    window.removeEventListener('resize', resizeScalingContainer);\r\n                    window.addEventListener('resize', resizeScalingContainer);\r\n\r\n                    window.GGBQ.b64input[id].val(ggbApplet.getBase64());\r\n                    window.GGBQ.xmlinput[id].val(ggbApplet.getXML());\r\n\r\n                    window.GGBQ.qdiv[id].style.visibility = 'visible';\r\n                    if (window.GGBQ.answerinput[id].val() == '') {\r\n                        var responsestring = '';\r\n                        window.GGBQ.responsevars[id].forEach(function (responsevar) {\r\n                            if (ggbApplet.isDefined(responsevar)) {\r\n                                responsestring += ggbApplet.getValue(responsevar);\r\n                            } else {\r\n                                responsestring += 0;\r\n                            }\r\n                        });\r\n                        window.GGBQ.answerinput[id].val(responsestring);\r\n                    }\r\n                }\r\n            };\r\n\r\n            // jquery doesn't handle the colon : but later we expect a jquery optject, so ...\r\n            this.b64input[slot] = $(document.getElementById(ggbDataset.b64input));\r\n            this.ggbBase64[slot] = this.b64input[slot].val();\r\n\r\n            this.xmlinput[slot] = $(document.getElementById(ggbDataset.xmlinput));\r\n            this.ggbxml[slot] = this.xmlinput[slot].val();\r\n            this.qdiv[slot] = $(\"#q\" + (slot) + \" .qtext\")[0];\r\n\r\n            var parameters = JSON.parse(ggbDataset.parameters);\r\n            if (this.ggbBase64[slot] != '') {\r\n                parameters.ggbBase64 = this.ggbBase64[slot];\r\n            }\r\n\r\n            // Check if width and height have been manually set. The default would be \"no\", so we use the scaling container feature.\r\n            if (!ggbDataset.forcedimensions || ggbDataset.forcedimensions === '0') {\r\n                parameters.scaleContainerClass = scalingContainers[slot];\r\n                parameters.autoHeight = true;\r\n            } else {\r\n                // Width and height are specified in this case, so we use the given fixed width and height settings\r\n                // of the plugin instance. Form validation of the settings asserts that both width and height are being set.\r\n                parameters.width = ggbDataset.width;\r\n                parameters.height = ggbDataset.height;\r\n                // We need to use getElementsByClassName because colons are not allowed for jquery and Vanilla JS querySelector.\r\n                const scalingContainer = document.getElementsByClassName(scalingContainers[slot])[0];\r\n                // We should always find this container, just check to be extra safe.\r\n                if (scalingContainer) {\r\n                    // Width of the scaling container is being set after the applet has been loaded. So no need to specify it here.\r\n                    scalingContainer.style.overflowX = 'auto';\r\n                    scalingContainer.style.overflowY = 'hidden';\r\n                }\r\n            }\r\n\r\n            // parameters.currentvals = JSON.parse(ggbDataset.vars);\r\n            this.ggbDatasetVars = JSON.parse(ggbDataset.vars);\r\n            parameters.language = ggbDataset.lang;\r\n            parameters.moodle = \"takingQuiz\";\r\n            delete parameters.material_id;\r\n\r\n            parameters.id = 'ggbApplet' + slot;\r\n\r\n            var views = JSON.parse(ggbDataset.views);\r\n\r\n            var applet1 = new GGBApplet(parameters, views, ggbDataset.html5NoWebSimple);\r\n            if (ggbDataset.codebase && ggbDataset.codebase !== '') {\r\n                applet1.setHTML5Codebase(ggbDataset.codebase);\r\n            }\r\n            applet1.inject(ggbDataset.div, \"preferHTML5\");\r\n\r\n            $('#responseform').on('submit', this.getBase64andCheck);\r\n\r\n            $(document.getElementById(ggbDataset.div)).on('mouseleave', this.getBase64andCheck);\r\n\r\n            this.currentvals[slot] = ggbDataset.vars;\r\n            this.answerinput[slot] = $(document.getElementById(ggbDataset.answerinput));\r\n            this.exerciseresultinput[slot] = $(document.getElementById(ggbDataset.exerciseresultinput));\r\n            this.responsevars[slot] = JSON.parse(ggbDataset.responsevars);\r\n\r\n            let splitterInterval = setInterval(() => {\r\n                if(!$('.vsplitter')[0]) return;\r\n                $('.vsplitter').on('click',() => {\r\n                    document.ggbApplet.reset();\r\n                })\r\n                clearInterval(splitterInterval)\r\n            }, 500)\r\n        },\r\n        checkEnter: function(e) {\r\n            e = e || event;\r\n            var txtArea = /textarea/i.test((e.target || e.srcElement).tagName);\r\n            return txtArea || (e.keyCode || e.which || e.charCode || 0) !== 13;\r\n        },\r\n\r\n\r\n        getBase64andCheck: function() {\r\n            for (var i = 0; i < window.GGBQ.answerinput.length; i++) {\r\n                var ggbApplet = window['ggbApplet' + i];\r\n                if (typeof ggbApplet !== \"undefined\") {\r\n                    window.GGBQ.b64input[i].val(ggbApplet.getBase64());\r\n                    window.GGBQ.xmlinput[i].val(ggbApplet.getXML());\r\n\r\n                    // Workaround, to set all randomized variables.\r\n                    for (const [key, value] of Object.entries(window.GGBQ.ggbDatasetVars)) {\r\n                        ggbApplet.evalCommand(`${key}=${value}`);\r\n                    }\r\n\r\n                    var responsestring = '';\r\n                    for (var j = 0; j < window.GGBQ.responsevars[i].length; j++) {\r\n                        if (ggbApplet.isDefined(window.GGBQ.responsevars[i][j])) {\r\n                            responsestring += ggbApplet.getValue(window.GGBQ.responsevars[i][j]);\r\n                        } else {\r\n                            responsestring += 0;\r\n                        }\r\n                    }\r\n\r\n                    window.GGBQ.answerinput[i].val(responsestring);\r\n                }\r\n            }\r\n        },\r\n\r\n    };\r\n});"],"names":["define","$","GGBApplet","scalingContainers","resizeTimeout","resizeScalingContainer","clearTimeout","setTimeout","Object","values","forEach","containerClass","scalingContainer","document","getElementsByClassName","formulationDivStyle","window","getComputedStyle","querySelector","parentElement","style","width","parseInt","paddingLeft","paddingRight","b64input","ggbBase64","xmlinput","ggbxml","currentvals","answerinput","responsevars","exerciseresultinput","qdiv","ggbDataset","init","appletParametersID","addEventListener","innerWidth","GGBQ","this","getElementById","dataset","slot","scalingcontainerclass","geogebraLoadedInterval","setInterval","length","on","e","previousWidth","offsetHeight","css","clearInterval","hide","ggbAppletOnLoad","ggbAppletId","onkeydown","checkEnter","id","substring","ggbApplet","curvals","JSON","parse","label","setValue","removeEventListener","val","getBase64","getXML","visibility","responsestring","responsevar","isDefined","getValue","parameters","forcedimensions","height","overflowX","overflowY","scaleContainerClass","autoHeight","ggbDatasetVars","vars","language","lang","moodle","material_id","views","applet1","html5NoWebSimple","codebase","setHTML5Codebase","inject","div","getBase64andCheck","splitterInterval","reset","event","test","target","srcElement","tagName","keyCode","which","charCode","i","key","value","entries","evalCommand","j"],"mappings":"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"}