{"version":3,"file":"question.min.js","sources":["../src/question.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/*\r\n * JavaScript to allow dragging options to slots (using mouse down or touch) or tab through slots using keyboard.\r\n *\r\n * @module     qtype_ddimageortext/question\r\n * @copyright  2018 The Open University\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine([\r\n    'jquery',\r\n    'core/dragdrop',\r\n    'core/key_codes',\r\n    'core_form/changechecker',\r\n    'core_filters/events',\r\n], function(\r\n    $,\r\n    dragDrop,\r\n    keys,\r\n    FormChangeChecker,\r\n    filterEvent\r\n) {\r\n\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Initialise one drag-drop onto image question.\r\n     *\r\n     * @param {String} containerId id of the outer div for this question.\r\n     * @param {boolean} readOnly whether the question is being displayed read-only.\r\n     * @param {Array} places Information about the drop places.\r\n     * @constructor\r\n     */\r\n    function DragDropOntoImageQuestion(containerId, readOnly, places) {\r\n        this.containerId = containerId;\r\n        this.questionAnswer = {};\r\n        this.questionDragDropWidthHeight = [];\r\n        M.util.js_pending('qtype_ddimageortext-init-' + this.containerId);\r\n        this.places = places;\r\n        this.allImagesLoaded = false;\r\n        this.imageLoadingTimeoutId = null;\r\n        this.isPrinting = false;\r\n        if (readOnly) {\r\n            this.getRoot().addClass('qtype_ddimageortext-readonly');\r\n        }\r\n\r\n        var thisQ = this;\r\n        this.getNotYetLoadedImages().one('load', function() {\r\n            thisQ.waitForAllImagesToBeLoaded();\r\n        });\r\n        this.waitForAllImagesToBeLoaded();\r\n    }\r\n\r\n    /**\r\n     * Check is mobile\r\n     * @returns {any}\r\n     */\r\n    function isMobile() {\r\n        const regex = /Mobi|Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i;\r\n        return regex.test(navigator.userAgent);\r\n    }\r\n\r\n    /**\r\n     * Change all the drags and drops related to the item that has been changed by filter to correct size and content.\r\n     *\r\n     *  @param {object} filteredElement the element has been modified by filter.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.changeAllDragsAndDropsToFilteredContent = function(filteredElement) {\r\n        let currentFilteredItem = $(filteredElement);\r\n        const parentIsDD = currentFilteredItem.parent().closest('div').hasClass('placed') ||\r\n            currentFilteredItem.parent().hasClass('draghome');\r\n        const isDD = currentFilteredItem.hasClass('placed') || currentFilteredItem.hasClass('draghome');\r\n        // The filtered element or parent element should a drag or drop item.\r\n        if (!parentIsDD && !isDD) {\r\n            return;\r\n        }\r\n        if (parentIsDD) {\r\n            currentFilteredItem = currentFilteredItem.parent().closest('div');\r\n        }\r\n        if (this.getRoot().find(currentFilteredItem).length <= 0) {\r\n            // If the DD item doesn't belong to this question\r\n            // In case we have multiple questions in the same page.\r\n            return;\r\n        }\r\n        const group = this.getGroup(currentFilteredItem),\r\n            choice = this.getChoice(currentFilteredItem);\r\n        let listOfModifiedDragDrop = [];\r\n        // Get the list of drag and drop item within the same group and choice.\r\n        this.getRoot().find('.group' + group + '.choice' + choice).each(function(i, node) {\r\n            // Same modified item, skip it.\r\n            if ($(node).get(0) === currentFilteredItem.get(0)) {\r\n                return;\r\n            }\r\n            const originalClass = $(node).attr('class');\r\n            const originalStyle = $(node).attr('style');\r\n            // We want to keep all the handler and event for filtered item, so using clone is the only choice.\r\n            const filteredDragDropClone = currentFilteredItem.clone();\r\n            // Sometimes, for the question that has a lot of input groups and unlimited draggable items,\r\n            // this 'clone' process takes longer than usual,it will not add the eventHandler for this cloned drag.\r\n            // We need to make sure to add the eventHandler for the cloned drag too.\r\n            questionManager.addEventHandlersToDrag(filteredDragDropClone);\r\n            // Replace the class and style of the drag drop item we want to replace for the clone.\r\n            filteredDragDropClone.attr('class', originalClass);\r\n            filteredDragDropClone.attr('style', originalStyle);\r\n            // Insert into DOM.\r\n            $(node).before(filteredDragDropClone);\r\n            // Add the item has been replaced to a list so we can remove it later.\r\n            listOfModifiedDragDrop.push(node);\r\n        });\r\n\r\n        listOfModifiedDragDrop.forEach(function(node) {\r\n            $(node).remove();\r\n        });\r\n        // Save the current height and width.\r\n        const currentHeight = currentFilteredItem.height();\r\n        const currentWidth = currentFilteredItem.width();\r\n        // Set to auto, so we can get the real height and width of the filtered item.\r\n        currentFilteredItem.height('auto');\r\n        currentFilteredItem.width('auto');\r\n        // We need to set display block so we can get height and width.\r\n        // Some browsers can't get the offsetWidth/Height if they are an inline element like span tag.\r\n        if (!filteredElement.offsetWidth || !filteredElement.offsetHeight) {\r\n            filteredElement.classList.add('d-block');\r\n        }\r\n        if (this.questionDragDropWidthHeight[group].maxWidth < Math.ceil(filteredElement.offsetWidth) ||\r\n            this.questionDragDropWidthHeight[group].maxHeight < Math.ceil(0 + filteredElement.offsetHeight)) {\r\n            // Remove the d-block class before calculation.\r\n            filteredElement.classList.remove('d-block');\r\n            // Now resize all the items in the same group if we have new maximum width or height.\r\n            this.resizeAllDragsAndDropsInGroup(group);\r\n        } else {\r\n            // Calculate the top padding.\r\n            const top = Math.floor((this.questionDragDropWidthHeight[group].maxHeight - filteredElement.offsetHeight) / 2);\r\n            // Set top padding so the content of filtered item is center again.\r\n            currentFilteredItem.width(currentWidth).height(currentHeight).css({\r\n                'padding-top': top + 'px',\r\n            });\r\n        }\r\n        // Remove the d-block class after resize.\r\n        filteredElement.classList.remove('d-block');\r\n    };\r\n\r\n    /**\r\n     * Waits until all images are loaded before calling setupQuestion().\r\n     *\r\n     * This function is called from the onLoad of each image, and also polls with\r\n     * a time-out, because image on-loads are allegedly unreliable.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.waitForAllImagesToBeLoaded = function() {\r\n        var thisQ = this;\r\n\r\n        // This method may get called multiple times (via image on-loads or timeouts.\r\n        // If we are already done, don't do it again.\r\n        if (this.allImagesLoaded) {\r\n            return;\r\n        }\r\n\r\n        // Clear any current timeout, if set.\r\n        if (this.imageLoadingTimeoutId !== null) {\r\n            clearTimeout(this.imageLoadingTimeoutId);\r\n        }\r\n\r\n        // If we have not yet loaded all images, set a timeout to\r\n        // call ourselves again, since apparently images on-load\r\n        // events are flakey.\r\n        if (this.getNotYetLoadedImages().length > 0) {\r\n            this.imageLoadingTimeoutId = setTimeout(function() {\r\n                thisQ.waitForAllImagesToBeLoaded();\r\n            }, 100);\r\n            return;\r\n        }\r\n\r\n        // We now have all images. Carry on, but only after giving the layout a chance to settle down.\r\n        this.allImagesLoaded = true;\r\n        thisQ.setupQuestion();\r\n        // Wait for all dynamic content loaded by filter to be completed.\r\n        document.addEventListener(filterEvent.eventTypes.filterContentRenderingComplete, (elements) => {\r\n            elements.detail.nodes.forEach((element) => {\r\n                thisQ.changeAllDragsAndDropsToFilteredContent(element);\r\n            });\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Get any of the images in the drag-drop area that are not yet fully loaded.\r\n     *\r\n     * @returns {jQuery} those images.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getNotYetLoadedImages = function() {\r\n        var thisQ = this;\r\n        return this.getRoot().find('.ddarea img').not(function(i, imgNode) {\r\n            return thisQ.imageIsLoaded(imgNode);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Check if an image has loaded without errors.\r\n     *\r\n     * @param {HTMLImageElement} imgElement an image.\r\n     * @returns {boolean} true if this image has loaded without errors.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.imageIsLoaded = function(imgElement) {\r\n        return imgElement.complete && imgElement.naturalHeight !== 0;\r\n    };\r\n\r\n    /**\r\n     * Set up the question, once all images have been loaded.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.setupQuestion = function() {\r\n        this.resizeAllDragsAndDrops();\r\n        this.cloneDrags();\r\n        this.positionDragsAndDrops();\r\n        M.util.js_complete('qtype_ddimageortext-init-' + this.containerId);\r\n    };\r\n\r\n    /**\r\n     * In each group, resize all the items to be the same size.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.resizeAllDragsAndDrops = function() {\r\n        var thisQ = this;\r\n        this.getRoot().find('.draghomes > div').each(function(i, node) {\r\n            thisQ.resizeAllDragsAndDropsInGroup(\r\n                thisQ.getClassnameNumericSuffix($(node), 'dragitemgroup'));\r\n        });\r\n    };\r\n\r\n    /**\r\n     * In a given group, set all the drags and drops to be the same size.\r\n     *\r\n     * @param {int} group the group number.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.resizeAllDragsAndDropsInGroup = function(group) {\r\n        var root = this.getRoot(),\r\n            dragHomes = root.find(\".draghome.group\" + group),\r\n            maxWidth = 0,\r\n            maxHeight = 0;\r\n\r\n        // Find the maximum size of any drag in this groups.\r\n        dragHomes.each(function(i, drag) {\r\n            maxWidth = Math.max(maxWidth, Math.ceil(drag.offsetWidth));\r\n            maxHeight = Math.max(maxHeight, Math.ceil(drag.offsetHeight));\r\n        });\r\n\r\n        // The size we will want to set is a bit bigger than this.\r\n        maxWidth += 10;\r\n        maxHeight += 10;\r\n        this.questionDragDropWidthHeight[group] = {maxWidth, maxHeight};\r\n\r\n        // Set each drag home to that size.\r\n        dragHomes.each(function(i, drag) {\r\n            const top = Math.floor((maxHeight - drag.offsetHeight) / 2);\r\n            // Set top padding so the item is centred.\r\n            $(drag).width(maxWidth).height(maxHeight).css({\r\n                'padding-top': top + 'px',\r\n            });\r\n        });\r\n\r\n        // Create the drops and make them the right size.\r\n        for (var i in this.places) {\r\n            if (!this.places.hasOwnProperty((i))) {\r\n                continue;\r\n            }\r\n            var place = this.places[i],\r\n                label = place.text;\r\n            if (parseInt(place.group) !== group) {\r\n                continue;\r\n            }\r\n            if (label === '') {\r\n                label = M.util.get_string('blank', 'qtype_ddimageortext');\r\n            }\r\n            if (root.find('.dropzones .dropzone.group' + place.group + '.place' + i).length === 0) {\r\n                root.find('.dropzones').append('<div class=\"dropzone active group' + place.group +\r\n                    ' place' + i + '\" tabindex=\"0\">' +\r\n                    '<span class=\"accesshide\">' + label + '</span>&nbsp;</div>');\r\n            }\r\n            root.find('.dropzone.place' + i).width(maxWidth - 2).height(maxHeight - 2);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Invisible 'drag homes' are output by the renderer. These have the same properties\r\n     * as the drag items but are invisible. We clone these invisible elements to make the\r\n     * actual drag items.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.cloneDrags = function() {\r\n        var thisQ = this;\r\n        thisQ.getRoot().find('.draghome').each(function(index, dragHome) {\r\n            var drag = $(dragHome);\r\n            var placeHolder = drag.clone();\r\n            placeHolder.removeClass();\r\n            placeHolder.addClass('draghome choice' +\r\n                thisQ.getChoice(drag) + ' group' +\r\n                thisQ.getGroup(drag) + ' dragplaceholder');\r\n            drag.before(placeHolder);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Clone drag item for one choice.\r\n     *\r\n     * @param {jQuery} dragHome the drag home to clone.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.cloneDragsForOneChoice = function(dragHome) {\r\n        if (dragHome.hasClass('infinite')) {\r\n            var noOfDrags = this.noOfDropsInGroup(this.getGroup(dragHome));\r\n            for (var i = 0; i < noOfDrags; i++) {\r\n                this.cloneDrag(dragHome);\r\n            }\r\n        } else {\r\n            this.cloneDrag(dragHome);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Clone drag item.\r\n     *\r\n     * @param {jQuery} dragHome\r\n     */\r\n    DragDropOntoImageQuestion.prototype.cloneDrag = function(dragHome) {\r\n        var drag = dragHome.clone();\r\n        drag.removeClass('draghome')\r\n            .addClass('drag unplaced moodle-has-zindex')\r\n            .offset(dragHome.offset());\r\n        this.getRoot().find('.dragitems').append(drag);\r\n    };\r\n\r\n    /**\r\n     * Update the position of drags.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.positionDragsAndDrops = function() {\r\n        var thisQ = this,\r\n            root = this.getRoot(),\r\n            bgRatio = this.bgRatio();\r\n\r\n        // Move the drops into position.\r\n        root.find('.ddarea .dropzone').each(function(i, dropNode) {\r\n            var drop = $(dropNode),\r\n                place = thisQ.places[thisQ.getPlace(drop)];\r\n            // The xy values come from PHP as strings, so we need parseInt to stop JS doing string concatenation.\r\n            drop.css('left', parseInt(place.xy[0]) * bgRatio)\r\n                .css('top', parseInt(place.xy[1]) * bgRatio);\r\n            drop.data('originX', parseInt(place.xy[0]))\r\n                .data('originY', parseInt(place.xy[1]));\r\n            thisQ.handleElementScale(drop, 'left top');\r\n        });\r\n\r\n        // First move all items back home.\r\n        root.find('.draghome').not('.dragplaceholder').each(function(i, dragNode) {\r\n            var drag = $(dragNode),\r\n                currentPlace = thisQ.getClassnameNumericSuffix(drag, 'inplace');\r\n            drag.addClass('unplaced')\r\n                .removeClass('placed');\r\n            drag.removeAttr('tabindex');\r\n            if (currentPlace !== null) {\r\n                drag.removeClass('inplace' + currentPlace);\r\n            }\r\n        });\r\n\r\n        // Then place the ones that should be placed.\r\n        root.find('input.placeinput').each(function(i, inputNode) {\r\n            var input = $(inputNode),\r\n                choice = input.val();\r\n            if (choice.length === 0 || (choice.length > 0 && choice === '0')) {\r\n                // No item in this place.\r\n                return;\r\n            }\r\n\r\n            var place = thisQ.getPlace(input);\r\n            // Get the unplaced drag.\r\n            var unplacedDrag = thisQ.getUnplacedChoice(thisQ.getGroup(input), choice);\r\n            // Get the clone of the drag.\r\n            var hiddenDrag = thisQ.getDragClone(unplacedDrag);\r\n            if (hiddenDrag.length) {\r\n                if (unplacedDrag.hasClass('infinite')) {\r\n                    var noOfDrags = thisQ.noOfDropsInGroup(thisQ.getGroup(unplacedDrag));\r\n                    var cloneDrags = thisQ.getInfiniteDragClones(unplacedDrag, false);\r\n                    if (cloneDrags.length < noOfDrags) {\r\n                        var cloneDrag = unplacedDrag.clone();\r\n                        cloneDrag.removeClass('beingdragged');\r\n                        cloneDrag.removeAttr('tabindex');\r\n                        hiddenDrag.after(cloneDrag);\r\n                        // Sometimes, for the question that has a lot of input groups and unlimited draggable items,\r\n                        // this 'clone' process takes longer than usual, so the questionManager.init() method\r\n                        // will not add the eventHandler for this cloned drag.\r\n                        // We need to make sure to add the eventHandler for the cloned drag too.\r\n                        questionManager.addEventHandlersToDrag(cloneDrag);\r\n                    } else {\r\n                        hiddenDrag.addClass('active');\r\n                    }\r\n                } else {\r\n                    hiddenDrag.addClass('active');\r\n                }\r\n            }\r\n\r\n            // Send the drag to drop.\r\n            var drop = root.find('.dropzone.place' + place);\r\n            thisQ.sendDragToDrop(unplacedDrag, drop);\r\n        });\r\n\r\n        // Save the question answer.\r\n        thisQ.questionAnswer = thisQ.getQuestionAnsweredValues();\r\n    };\r\n\r\n    /**\r\n     * Get the question answered values.\r\n     *\r\n     * @return {Object} Contain key-value with key is the input id and value is the input value.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getQuestionAnsweredValues = function() {\r\n        let result = {};\r\n        this.getRoot().find('input.placeinput').each((i, inputNode) => {\r\n            result[inputNode.id] = inputNode.value;\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Check if the question is being interacted or not.\r\n     *\r\n     * @return {boolean} Return true if the user has changed the question-answer.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.isQuestionInteracted = function() {\r\n        const oldAnswer = this.questionAnswer;\r\n        const newAnswer = this.getQuestionAnsweredValues();\r\n        let isInteracted = false;\r\n\r\n        // First, check both answers have the same structure or not.\r\n        if (JSON.stringify(newAnswer) !== JSON.stringify(oldAnswer)) {\r\n            isInteracted = true;\r\n            return isInteracted;\r\n        }\r\n        // Check the values.\r\n        Object.keys(newAnswer).forEach(key => {\r\n            if (newAnswer[key] !== oldAnswer[key]) {\r\n                isInteracted = true;\r\n            }\r\n        });\r\n\r\n        return isInteracted;\r\n    };\r\n\r\n    /**\r\n     * Handles the start of dragging an item.\r\n     *\r\n     * @param {Event} e the touch start or mouse down event.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.handleDragStart = function(e) {\r\n        var thisQ = this,\r\n            drag = $(e.target).closest('.draghome'),\r\n            currentIndex = this.calculateZIndex(),\r\n            newIndex = currentIndex + 2;\r\n\r\n        var info = dragDrop.prepare(e);\r\n        if (!info.start || drag.hasClass('beingdragged')) {\r\n            return;\r\n        }\r\n\r\n        drag.addClass('beingdragged').css('transform', '').css('z-index', newIndex);\r\n        var currentPlace = this.getClassnameNumericSuffix(drag, 'inplace');\r\n        if (currentPlace !== null) {\r\n            this.setInputValue(currentPlace, 0);\r\n            drag.removeClass('inplace' + currentPlace);\r\n            var hiddenDrop = thisQ.getDrop(drag, currentPlace);\r\n            if (hiddenDrop.length) {\r\n                hiddenDrop.addClass('active');\r\n                drag.offset(hiddenDrop.offset());\r\n            }\r\n        } else {\r\n            var hiddenDrag = thisQ.getDragClone(drag);\r\n            if (hiddenDrag.length) {\r\n                if (drag.hasClass('infinite')) {\r\n                    var noOfDrags = this.noOfDropsInGroup(thisQ.getGroup(drag));\r\n                    var cloneDrags = this.getInfiniteDragClones(drag, false);\r\n                    if (cloneDrags.length < noOfDrags) {\r\n                        var cloneDrag = drag.clone();\r\n                        cloneDrag.removeClass('beingdragged');\r\n                        cloneDrag.removeAttr('tabindex');\r\n                        hiddenDrag.after(cloneDrag);\r\n                        questionManager.addEventHandlersToDrag(cloneDrag);\r\n                        drag.offset(cloneDrag.offset());\r\n                    } else {\r\n                        hiddenDrag.addClass('active');\r\n                        drag.offset(hiddenDrag.offset());\r\n                    }\r\n                } else {\r\n                    hiddenDrag.addClass('active');\r\n                    drag.offset(hiddenDrag.offset());\r\n                }\r\n            }\r\n        }\r\n\r\n        dragDrop.start(e, drag, function(x, y, drag) {\r\n            thisQ.dragMove(x, y, drag);\r\n        }, function(x, y, drag) {\r\n            thisQ.dragEnd(x, y, drag);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Called whenever the currently dragged items moves.\r\n     *\r\n     * @param {Number} pageX the x position.\r\n     * @param {Number} pageY the y position.\r\n     * @param {jQuery} drag the item being moved.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.dragMove = function(pageX, pageY, drag) {\r\n        var thisQ = this,\r\n            highlighted = false;\r\n        this.getRoot().find('.dropzone.group' + this.getGroup(drag)).each(function(i, dropNode) {\r\n            var drop = $(dropNode);\r\n            if (thisQ.isPointInDrop(pageX, pageY, drop) && !highlighted) {\r\n                highlighted = true;\r\n                drop.addClass('valid-drag-over-drop');\r\n            } else {\r\n                drop.removeClass('valid-drag-over-drop');\r\n            }\r\n        });\r\n        this.getRoot().find('.draghome.placed.group' + this.getGroup(drag)).not('.beingdragged').each(function(i, dropNode) {\r\n            var drop = $(dropNode);\r\n            if (thisQ.isPointInDrop(pageX, pageY, drop) && !highlighted && !thisQ.isDragSameAsDrop(drag, drop)) {\r\n                highlighted = true;\r\n                drop.addClass('valid-drag-over-drop');\r\n            } else {\r\n                drop.removeClass('valid-drag-over-drop');\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Called when user drops a drag item.\r\n     *\r\n     * @param {Number} pageX the x position.\r\n     * @param {Number} pageY the y position.\r\n     * @param {jQuery} drag the item being moved.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.dragEnd = function(pageX, pageY, drag) {\r\n        var thisQ = this,\r\n            root = this.getRoot(),\r\n            placed = false;\r\n\r\n        // Looking for drag that was dropped on a dropzone.\r\n        root.find('.dropzone.group' + this.getGroup(drag)).each(function(i, dropNode) {\r\n            var drop = $(dropNode);\r\n            if (!thisQ.isPointInDrop(pageX, pageY, drop)) {\r\n                // Not this drop.\r\n                return true;\r\n            }\r\n\r\n            // Now put this drag into the drop.\r\n            drop.removeClass('valid-drag-over-drop');\r\n            thisQ.sendDragToDrop(drag, drop);\r\n            placed = true;\r\n            return false; // Stop the each() here.\r\n        });\r\n\r\n        if (!placed) {\r\n            // Looking for drag that was dropped on a placed drag.\r\n            root.find('.draghome.placed.group' + this.getGroup(drag)).not('.beingdragged').each(function(i, placedNode) {\r\n                var placedDrag = $(placedNode);\r\n                if (!thisQ.isPointInDrop(pageX, pageY, placedDrag) || thisQ.isDragSameAsDrop(drag, placedDrag)) {\r\n                    // Not this placed drag.\r\n                    return true;\r\n                }\r\n\r\n                // Now put this drag into the drop.\r\n                placedDrag.removeClass('valid-drag-over-drop');\r\n                var currentPlace = thisQ.getClassnameNumericSuffix(placedDrag, 'inplace');\r\n                var drop = thisQ.getDrop(drag, currentPlace);\r\n                thisQ.sendDragToDrop(drag, drop);\r\n                placed = true;\r\n                return false; // Stop the each() here.\r\n            });\r\n        }\r\n\r\n        if (!placed) {\r\n            this.sendDragHome(drag);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Animate a drag item into a given place (or back home).\r\n     *\r\n     * @param {jQuery|null} drag the item to place. If null, clear the place.\r\n     * @param {jQuery} drop the place to put it.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.sendDragToDrop = function(drag, drop) {\r\n        // Is there already a drag in this drop? if so, evict it.\r\n        var oldDrag = this.getCurrentDragInPlace(this.getPlace(drop));\r\n        if (oldDrag.length !== 0) {\r\n            oldDrag.addClass('beingdragged');\r\n            oldDrag.offset(oldDrag.offset());\r\n            var currentPlace = this.getClassnameNumericSuffix(oldDrag, 'inplace');\r\n            var hiddenDrop = this.getDrop(oldDrag, currentPlace);\r\n            hiddenDrop.addClass('active');\r\n            this.sendDragHome(oldDrag);\r\n        }\r\n\r\n        if (drag.length === 0) {\r\n            this.setInputValue(this.getPlace(drop), 0);\r\n            if (drop.data('isfocus')) {\r\n                drop.focus();\r\n            }\r\n        } else {\r\n            this.setInputValue(this.getPlace(drop), this.getChoice(drag));\r\n            drag.removeClass('unplaced')\r\n                .addClass('placed inplace' + this.getPlace(drop));\r\n            drag.attr('tabindex', 0);\r\n            this.animateTo(drag, drop);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Animate a drag back to its home.\r\n     *\r\n     * @param {jQuery} drag the item being moved.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.sendDragHome = function(drag) {\r\n        var currentPlace = this.getClassnameNumericSuffix(drag, 'inplace');\r\n        if (currentPlace !== null) {\r\n            drag.removeClass('inplace' + currentPlace);\r\n        }\r\n        drag.data('unplaced', true);\r\n\r\n        this.animateTo(drag, this.getDragHome(this.getGroup(drag), this.getChoice(drag)));\r\n    };\r\n\r\n    /**\r\n     * Handles mobile events on drops.\r\n     *\r\n     * @param {KeyboardEvent} e\r\n     */\r\n    DragDropOntoImageQuestion.prototype.handleMobileDropClick = function(e) {\r\n        var drop = $(e.target).closest('.dropzone');\r\n\r\n        if (questionManager.mobileClickNdrop.currentDrop) {\r\n            questionManager.mobileClickNdrop.currentDrop.focus();\r\n        }\r\n        drop.focus();\r\n        questionManager.mobileClickNdrop.currentDrop = drop;\r\n\r\n        if (drop.length === 0) {\r\n            var placedDrag = $(e.target);\r\n            var currentPlace = this.getClassnameNumericSuffix(placedDrag, 'inplace');\r\n            if (currentPlace !== null) {\r\n                drop = this.getDrop(placedDrag, currentPlace);\r\n            }\r\n        }\r\n\r\n        // e.preventDefault();\r\n    };\r\n\r\n    /**\r\n     * Handles mobile events on drops.\r\n     *\r\n     * @param {KeyboardEvent} e\r\n     */\r\n    DragDropOntoImageQuestion.prototype.handleMobileDropSwapClick = function(e) {\r\n        $(e.currentTarget).focus();\r\n        var drop = $(e.currentTarget).prev();\r\n        questionManager.mobileClickNdrop.currentDrag = $(e.currentTarget);\r\n\r\n        if (drop.hasClass('dropzone')) {\r\n            if (questionManager.mobileClickNdrop.currentDrop) {\r\n                questionManager.mobileClickNdrop.currentDrop.focus();\r\n            }\r\n            drop.focus();\r\n            questionManager.mobileClickNdrop.currentDrop = drop;\r\n\r\n            if (drop.length === 0) {\r\n                var placedDrag = $(e.target);\r\n                var currentPlace = this.getClassnameNumericSuffix(placedDrag, 'inplace');\r\n                if (currentPlace !== null) {\r\n                    drop = this.getDrop(placedDrag, currentPlace);\r\n                }\r\n            }\r\n\r\n            e.preventDefault();\r\n        }\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Handles mobile events on draghomes.\r\n     *\r\n     * @param {KeyboardEvent} e\r\n     */\r\n    DragDropOntoImageQuestion.prototype.handleMobileDragClick = function(e) {\r\n        var draghome = $(e.target).closest('.draghome');\r\n\r\n        if (draghome && questionManager.mobileClickNdrop.currentDrop) {\r\n\r\n            questionManager.mobileClickNdrop.currentDrag = draghome;\r\n            draghome.data('isfocus', true);\r\n            draghome.addClass('beingdragged');\r\n            var hiddenDrag = this.getDragClone(draghome);\r\n            if (hiddenDrag.length) {\r\n                if (draghome.hasClass('infinite')) {\r\n                    var noOfDrags = this.noOfDropsInGroup(this.getGroup(draghome));\r\n                    var cloneDrags = this.getInfiniteDragClones(draghome, false);\r\n                    if (cloneDrags.length < noOfDrags) {\r\n                        var cloneDrag = draghome.clone();\r\n                        cloneDrag.removeClass('beingdragged');\r\n                        cloneDrag.removeAttr('tabindex');\r\n                        hiddenDrag.after(cloneDrag);\r\n                        questionManager.addEventHandlersToDrag(cloneDrag);\r\n                        draghome.offset(cloneDrag.offset());\r\n                    } else {\r\n                        hiddenDrag.addClass('active');\r\n                        draghome.offset(hiddenDrag.offset());\r\n                    }\r\n                } else {\r\n                    hiddenDrag.addClass('active');\r\n                    draghome.offset(hiddenDrag.offset());\r\n                }\r\n            }\r\n            this.sendDragToDrop(draghome, questionManager.mobileClickNdrop.currentDrop);\r\n        }\r\n\r\n        e.preventDefault();\r\n\r\n    };\r\n\r\n    /**\r\n     * Handles mobile events on click.\r\n     *\r\n     * @param {KeyboardEvent} e\r\n     */\r\n    DragDropOntoImageQuestion.prototype.handleMobileDragBackClick = function(e) {\r\n        if (isMobile) {\r\n\r\n            var thisQ = this,\r\n                drag = questionManager.mobileClickNdrop.currentDrag,\r\n                currentIndex = this.calculateZIndex(),\r\n                newIndex = currentIndex + 2;\r\n\r\n            if (drag) {\r\n\r\n                drag.addClass('beingdragged').css('transform', '').css('z-index', newIndex);\r\n                var currentPlace = this.getClassnameNumericSuffix(drag, 'inplace');\r\n                if (currentPlace !== null) {\r\n                    this.setInputValue(currentPlace, 0);\r\n                    drag.removeClass('inplace' + currentPlace);\r\n                    var hiddenDrop = thisQ.getDrop(drag, currentPlace);\r\n                    if (hiddenDrop.length) {\r\n                        hiddenDrop.addClass('active');\r\n                        drag.offset(hiddenDrop.offset());\r\n                    }\r\n                } else {\r\n                    var hiddenDrag = thisQ.getDragClone(drag);\r\n                    if (hiddenDrag.length) {\r\n                        if (drag.hasClass('infinite')) {\r\n                            var noOfDrags = this.noOfDropsInGroup(thisQ.getGroup(drag));\r\n                            var cloneDrags = this.getInfiniteDragClones(drag, false);\r\n                            if (cloneDrags.length < noOfDrags) {\r\n                                var cloneDrag = drag.clone();\r\n                                cloneDrag.removeClass('beingdragged');\r\n                                cloneDrag.removeAttr('tabindex');\r\n                                hiddenDrag.after(cloneDrag);\r\n                                questionManager.addEventHandlersToDrag(cloneDrag);\r\n                                drag.offset(cloneDrag.offset());\r\n                            } else {\r\n                                hiddenDrag.addClass('active');\r\n                                drag.offset(hiddenDrag.offset());\r\n                            }\r\n                        } else {\r\n                            hiddenDrag.addClass('active');\r\n                            drag.offset(hiddenDrag.offset());\r\n                        }\r\n                    }\r\n                }\r\n\r\n                e.type = \"mousedown\";\r\n                dragDrop.start(e, drag, function() {\r\n                    return;\r\n                }, function(x, y, drag) {\r\n                    thisQ.dragEnd(x, y, drag);\r\n                });\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * Handles keyboard events on drops.\r\n     *\r\n     * Drops are focusable. Once focused, right/down/space switches to the next choice, and\r\n     * left/up switches to the previous. Escape clear.\r\n     *\r\n     * @param {KeyboardEvent} e\r\n     */\r\n    DragDropOntoImageQuestion.prototype.handleKeyPress = function(e) {\r\n        var drop = $(e.target).closest('.dropzone');\r\n        if (drop.length === 0) {\r\n            var placedDrag = $(e.target);\r\n            var currentPlace = this.getClassnameNumericSuffix(placedDrag, 'inplace');\r\n            if (currentPlace !== null) {\r\n                drop = this.getDrop(placedDrag, currentPlace);\r\n            }\r\n        }\r\n        var currentDrag = this.getCurrentDragInPlace(this.getPlace(drop)),\r\n            nextDrag = $();\r\n\r\n        switch (e.keyCode) {\r\n            case keys.space:\r\n            case keys.arrowRight:\r\n            case keys.arrowDown:\r\n                nextDrag = this.getNextDrag(this.getGroup(drop), currentDrag);\r\n                break;\r\n\r\n            case keys.arrowLeft:\r\n            case keys.arrowUp:\r\n                nextDrag = this.getPreviousDrag(this.getGroup(drop), currentDrag);\r\n                break;\r\n\r\n            case keys.escape:\r\n                questionManager.isKeyboardNavigation = false;\r\n                break;\r\n\r\n            default:\r\n                questionManager.isKeyboardNavigation = false;\r\n                return; // To avoid the preventDefault below.\r\n        }\r\n\r\n        if (nextDrag.length) {\r\n            nextDrag.data('isfocus', true);\r\n            nextDrag.addClass('beingdragged');\r\n            var hiddenDrag = this.getDragClone(nextDrag);\r\n            if (hiddenDrag.length) {\r\n                if (nextDrag.hasClass('infinite')) {\r\n                    var noOfDrags = this.noOfDropsInGroup(this.getGroup(nextDrag));\r\n                    var cloneDrags = this.getInfiniteDragClones(nextDrag, false);\r\n                    if (cloneDrags.length < noOfDrags) {\r\n                        var cloneDrag = nextDrag.clone();\r\n                        cloneDrag.removeClass('beingdragged');\r\n                        cloneDrag.removeAttr('tabindex');\r\n                        hiddenDrag.after(cloneDrag);\r\n                        questionManager.addEventHandlersToDrag(cloneDrag);\r\n                        nextDrag.offset(cloneDrag.offset());\r\n                    } else {\r\n                        hiddenDrag.addClass('active');\r\n                        nextDrag.offset(hiddenDrag.offset());\r\n                    }\r\n                } else {\r\n                    hiddenDrag.addClass('active');\r\n                    nextDrag.offset(hiddenDrag.offset());\r\n                }\r\n            }\r\n        } else {\r\n            drop.data('isfocus', true);\r\n        }\r\n\r\n        e.preventDefault();\r\n        this.sendDragToDrop(nextDrag, drop);\r\n    };\r\n\r\n    /**\r\n     * Choose the next drag in a group.\r\n     *\r\n     * @param {int} group which group.\r\n     * @param {jQuery} drag current choice (empty jQuery if there isn't one).\r\n     * @return {jQuery} the next drag in that group, or null if there wasn't one.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getNextDrag = function(group, drag) {\r\n        var choice,\r\n            numChoices = this.noOfChoicesInGroup(group);\r\n\r\n        if (drag.length === 0) {\r\n            choice = 1; // Was empty, so we want to select the first choice.\r\n        } else {\r\n            choice = this.getChoice(drag) + 1;\r\n        }\r\n\r\n        var next = this.getUnplacedChoice(group, choice);\r\n        while (next.length === 0 && choice < numChoices) {\r\n            choice++;\r\n            next = this.getUnplacedChoice(group, choice);\r\n        }\r\n\r\n        return next;\r\n    };\r\n\r\n    /**\r\n     * Choose the previous drag in a group.\r\n     *\r\n     * @param {int} group which group.\r\n     * @param {jQuery} drag current choice (empty jQuery if there isn't one).\r\n     * @return {jQuery} the next drag in that group, or null if there wasn't one.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getPreviousDrag = function(group, drag) {\r\n        var choice;\r\n\r\n        if (drag.length === 0) {\r\n            choice = this.noOfChoicesInGroup(group);\r\n        } else {\r\n            choice = this.getChoice(drag) - 1;\r\n        }\r\n\r\n        var previous = this.getUnplacedChoice(group, choice);\r\n        while (previous.length === 0 && choice > 1) {\r\n            choice--;\r\n            previous = this.getUnplacedChoice(group, choice);\r\n        }\r\n\r\n        // Does this choice exist?\r\n        return previous;\r\n    };\r\n\r\n    /**\r\n     * Animate an object to the given destination.\r\n     *\r\n     * @param {jQuery} drag the element to be animated.\r\n     * @param {jQuery} target element marking the place to move it to.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.animateTo = function(drag, target) {\r\n        var currentPos = drag.offset(),\r\n            targetPos = target.offset(),\r\n            thisQ = this;\r\n\r\n        M.util.js_pending('qtype_ddimageortext-animate-' + thisQ.containerId);\r\n        // Animate works in terms of CSS position, whereas locating an object\r\n        // on the page works best with jQuery offset() function. So, to get\r\n        // the right target position, we work out the required change in\r\n        // offset() and then add that to the current CSS position.\r\n        drag.animate(\r\n            {\r\n                left: parseInt(drag.css('left')) + targetPos.left - currentPos.left,\r\n                top: parseInt(drag.css('top')) + targetPos.top - currentPos.top\r\n            },\r\n            {\r\n                duration: 'fast',\r\n                done: function() {\r\n                    $('body').trigger('qtype_ddimageortext-dragmoved', [drag, target, thisQ]);\r\n                    M.util.js_complete('qtype_ddimageortext-animate-' + thisQ.containerId);\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Detect if a point is inside a given DOM node.\r\n     *\r\n     * @param {Number} pageX the x position.\r\n     * @param {Number} pageY the y position.\r\n     * @param {jQuery} drop the node to check (typically a drop).\r\n     * @return {boolean} whether the point is inside the node.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.isPointInDrop = function(pageX, pageY, drop) {\r\n        var position = drop.offset();\r\n        if (drop.hasClass('draghome')) {\r\n            return pageX >= position.left && pageX < position.left + drop.outerWidth()\r\n                && pageY >= position.top && pageY < position.top + drop.outerHeight();\r\n        }\r\n        return pageX >= position.left && pageX < position.left + drop.width()\r\n            && pageY >= position.top && pageY < position.top + drop.height();\r\n    };\r\n\r\n    /**\r\n     * Set the value of the hidden input for a place, to record what is currently there.\r\n     *\r\n     * @param {int} place which place to set the input value for.\r\n     * @param {int} choice the value to set.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.setInputValue = function(place, choice) {\r\n        this.getRoot().find('input.placeinput.place' + place).val(choice);\r\n    };\r\n\r\n    /**\r\n     * Get the outer div for this question.\r\n     *\r\n     * @returns {jQuery} containing that div.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getRoot = function() {\r\n        return $(document.getElementById(this.containerId));\r\n    };\r\n\r\n    /**\r\n     * Get the img that is the background image.\r\n     * @returns {jQuery} containing that img.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.bgImage = function() {\r\n        return this.getRoot().find('img.dropbackground');\r\n    };\r\n\r\n    /**\r\n     * Get drag home for a given choice.\r\n     *\r\n     * @param {int} group the group.\r\n     * @param {int} choice the choice number.\r\n     * @returns {jQuery} containing that div.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getDragHome = function(group, choice) {\r\n        if (!this.getRoot().find('.draghome.dragplaceholder.group' + group + '.choice' + choice).is(':visible')) {\r\n            return this.getRoot().find('.dragitemgroup' + group +\r\n                ' .draghome.infinite' +\r\n                '.choice' + choice +\r\n                '.group' + group);\r\n        }\r\n        return this.getRoot().find('.draghome.dragplaceholder.group' + group + '.choice' + choice);\r\n    };\r\n\r\n    /**\r\n     * Get an unplaced choice for a particular group.\r\n     *\r\n     * @param {int} group the group.\r\n     * @param {int} choice the choice number.\r\n     * @returns {jQuery} jQuery wrapping the unplaced choice. If there isn't one, the jQuery will be empty.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getUnplacedChoice = function(group, choice) {\r\n        return this.getRoot().find('.ddarea .draghome.group' + group + '.choice' + choice + '.unplaced').slice(0, 1);\r\n    };\r\n\r\n    /**\r\n     * Get the drag that is currently in a given place.\r\n     *\r\n     * @param {int} place the place number.\r\n     * @return {jQuery} the current drag (or an empty jQuery if none).\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getCurrentDragInPlace = function(place) {\r\n        return this.getRoot().find('.ddarea .draghome.inplace' + place);\r\n    };\r\n\r\n    /**\r\n     * Return the number of blanks in a given group.\r\n     *\r\n     * @param {int} group the group number.\r\n     * @returns {int} the number of drops.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.noOfDropsInGroup = function(group) {\r\n        return this.getRoot().find('.dropzone.group' + group).length;\r\n    };\r\n\r\n    /**\r\n     * Return the number of choices in a given group.\r\n     *\r\n     * @param {int} group the group number.\r\n     * @returns {int} the number of choices.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.noOfChoicesInGroup = function(group) {\r\n        return this.getRoot().find('.dragitemgroup' + group + ' .draghome').length;\r\n    };\r\n\r\n    /**\r\n     * Return the number at the end of the CSS class name with the given prefix.\r\n     *\r\n     * @param {jQuery} node\r\n     * @param {String} prefix name prefix\r\n     * @returns {Number|null} the suffix if found, else null.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getClassnameNumericSuffix = function(node, prefix) {\r\n        var classes = node.attr('class');\r\n        if (classes !== '') {\r\n            var classesArr = classes.split(' ');\r\n            for (var index = 0; index < classesArr.length; index++) {\r\n                var patt1 = new RegExp('^' + prefix + '([0-9])+$');\r\n                if (patt1.test(classesArr[index])) {\r\n                    var patt2 = new RegExp('([0-9])+$');\r\n                    var match = patt2.exec(classesArr[index]);\r\n                    return Number(match[0]);\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Get the choice number of a drag.\r\n     *\r\n     * @param {jQuery} drag the drag.\r\n     * @returns {Number} the choice number.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getChoice = function(drag) {\r\n        return this.getClassnameNumericSuffix(drag, 'choice');\r\n    };\r\n\r\n    /**\r\n     * Given a DOM node that is significant to this question\r\n     * (drag, drop, ...) get the group it belongs to.\r\n     *\r\n     * @param {jQuery} node a DOM node.\r\n     * @returns {Number} the group it belongs to.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getGroup = function(node) {\r\n        return this.getClassnameNumericSuffix(node, 'group');\r\n    };\r\n\r\n    /**\r\n     * Get the place number of a drop, or its corresponding hidden input.\r\n     *\r\n     * @param {jQuery} node the DOM node.\r\n     * @returns {Number} the place number.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getPlace = function(node) {\r\n        return this.getClassnameNumericSuffix(node, 'place');\r\n    };\r\n\r\n    /**\r\n     * Get drag clone for a given drag.\r\n     *\r\n     * @param {jQuery} drag the drag.\r\n     * @returns {jQuery} the drag's clone.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getDragClone = function(drag) {\r\n        return this.getRoot().find('.dragitemgroup' +\r\n            this.getGroup(drag) +\r\n            ' .draghome' +\r\n            '.choice' + this.getChoice(drag) +\r\n            '.group' + this.getGroup(drag) +\r\n            '.dragplaceholder');\r\n    };\r\n\r\n    /**\r\n     * Get infinite drag clones for given drag.\r\n     *\r\n     * @param {jQuery} drag the drag.\r\n     * @param {Boolean} inHome in the home area or not.\r\n     * @returns {jQuery} the drag's clones.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getInfiniteDragClones = function(drag, inHome) {\r\n        if (inHome) {\r\n            return this.getRoot().find('.dragitemgroup' +\r\n                this.getGroup(drag) +\r\n                ' .draghome' +\r\n                '.choice' + this.getChoice(drag) +\r\n                '.group' + this.getGroup(drag) +\r\n                '.infinite').not('.dragplaceholder');\r\n        }\r\n        return this.getRoot().find('.draghome' +\r\n            '.choice' + this.getChoice(drag) +\r\n            '.group' + this.getGroup(drag) +\r\n            '.infinite').not('.dragplaceholder');\r\n    };\r\n\r\n    /**\r\n     * Get drop for a given drag and place.\r\n     *\r\n     * @param {jQuery} drag the drag.\r\n     * @param {Integer} currentPlace the current place of drag.\r\n     * @returns {jQuery} the drop's clone.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getDrop = function(drag, currentPlace) {\r\n        return this.getRoot().find('.dropzone.group' + this.getGroup(drag) + '.place' + currentPlace);\r\n    };\r\n\r\n    /**\r\n     * Handle when the window is resized.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.handleResize = function() {\r\n        var thisQ = this,\r\n            bgRatio = this.bgRatio();\r\n        if (this.isPrinting) {\r\n            bgRatio = 1;\r\n        }\r\n\r\n        this.getRoot().find('.ddarea .dropzone').each(function(i, dropNode) {\r\n            $(dropNode)\r\n                .css('left', parseInt($(dropNode).data('originX')) * parseFloat(bgRatio))\r\n                .css('top', parseInt($(dropNode).data('originY')) * parseFloat(bgRatio));\r\n            thisQ.handleElementScale(dropNode, 'left top');\r\n        });\r\n\r\n        this.getRoot().find('div.droparea .draghome').not('.beingdragged').each(function(key, drag) {\r\n            $(drag)\r\n                .css('left', parseFloat($(drag).data('originX')) * parseFloat(bgRatio))\r\n                .css('top', parseFloat($(drag).data('originY')) * parseFloat(bgRatio));\r\n            thisQ.handleElementScale(drag, 'left top');\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Return the background ratio.\r\n     *\r\n     * @returns {number} Background ratio.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.bgRatio = function() {\r\n        var bgImg = this.bgImage();\r\n        var bgImgNaturalWidth = bgImg.get(0).naturalWidth;\r\n        var bgImgClientWidth = bgImg.width();\r\n\r\n        return bgImgClientWidth / bgImgNaturalWidth;\r\n    };\r\n\r\n    /**\r\n     * Scale the drag if needed.\r\n     *\r\n     * @param {jQuery} element the item to place.\r\n     * @param {String} type scaling type\r\n     */\r\n    DragDropOntoImageQuestion.prototype.handleElementScale = function(element, type) {\r\n        var bgRatio = parseFloat(this.bgRatio());\r\n        if (this.isPrinting) {\r\n            bgRatio = 1;\r\n        }\r\n        $(element).css({\r\n            '-webkit-transform': 'scale(' + bgRatio + ')',\r\n            '-moz-transform': 'scale(' + bgRatio + ')',\r\n            '-ms-transform': 'scale(' + bgRatio + ')',\r\n            '-o-transform': 'scale(' + bgRatio + ')',\r\n            'transform': 'scale(' + bgRatio + ')',\r\n            'transform-origin': type\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Calculate z-index value.\r\n     *\r\n     * @returns {number} z-index value\r\n     */\r\n    DragDropOntoImageQuestion.prototype.calculateZIndex = function() {\r\n        var zIndex = 0;\r\n        this.getRoot().find('.ddarea .dropzone, div.droparea .draghome').each(function(i, dropNode) {\r\n            dropNode = $(dropNode);\r\n            // Note that webkit browsers won't return the z-index value from the CSS stylesheet\r\n            // if the element doesn't have a position specified. Instead it'll return \"auto\".\r\n            var itemZIndex = dropNode.css('z-index') ? parseInt(dropNode.css('z-index')) : 0;\r\n\r\n            if (itemZIndex > zIndex) {\r\n                zIndex = itemZIndex;\r\n            }\r\n        });\r\n\r\n        return zIndex;\r\n    };\r\n\r\n    /**\r\n     * Check that the drag is drop to it's clone.\r\n     *\r\n     * @param {jQuery} drag The drag.\r\n     * @param {jQuery} drop The drop.\r\n     * @returns {boolean}\r\n     */\r\n    DragDropOntoImageQuestion.prototype.isDragSameAsDrop = function(drag, drop) {\r\n        return this.getChoice(drag) === this.getChoice(drop) && this.getGroup(drag) === this.getGroup(drop);\r\n    };\r\n\r\n    /**\r\n     * Singleton object that handles all the DragDropOntoImageQuestions\r\n     * on the page, and deals with event dispatching.\r\n     * @type {Object}\r\n     */\r\n    var questionManager = {\r\n\r\n        /**\r\n         * {boolean} ensures that the event handlers are only initialised once per page.\r\n         */\r\n        eventHandlersInitialised: false,\r\n\r\n        /**\r\n         * {boolean} is mobile.\r\n         */\r\n        isMobile: isMobile(),\r\n\r\n        mobileClickNdrop: {\r\n            currentQuestion: null,\r\n            currentDrag: null,\r\n            currentDrop: null\r\n        },\r\n\r\n        /**\r\n         * {Object} ensures that the drag event handlers are only initialised once per question,\r\n         * indexed by containerId (id on the .que div).\r\n         */\r\n        dragEventHandlersInitialised: {},\r\n\r\n        /**\r\n         * {boolean} is printing or not.\r\n         */\r\n        isPrinting: false,\r\n\r\n        /**\r\n         * {boolean} is keyboard navigation or not.\r\n         */\r\n        isKeyboardNavigation: false,\r\n\r\n        /**\r\n         * {Object} all the questions on this page, indexed by containerId (id on the .que div).\r\n         */\r\n        questions: {}, // An object containing all the information about each question on the page.\r\n\r\n        /**\r\n         * Initialise one question.\r\n         *\r\n         * @method\r\n         * @param {String} containerId the id of the div.que that contains this question.\r\n         * @param {boolean} readOnly whether the question is read-only.\r\n         * @param {Array} places data.\r\n         */\r\n        init: function(containerId, readOnly, places) {\r\n            questionManager.questions[containerId] =\r\n                new DragDropOntoImageQuestion(containerId, readOnly, places);\r\n            if (!questionManager.eventHandlersInitialised) {\r\n                questionManager.setupEventHandlers();\r\n                questionManager.eventHandlersInitialised = true;\r\n            }\r\n            if (!questionManager.dragEventHandlersInitialised.hasOwnProperty(containerId)) {\r\n                questionManager.dragEventHandlersInitialised[containerId] = true;\r\n                // We do not use the body event here to prevent the other event on Mobile device, such as scroll event.\r\n                var questionContainer = document.getElementById(containerId);\r\n                if (questionContainer.classList.contains('ddimageortext') &&\r\n                    !questionContainer.classList.contains('qtype_ddimageortext-readonly')) {\r\n                    // TODO: Convert all the jQuery selectors and events to native Javascript.\r\n                    questionManager.addEventHandlersToDrag($(questionContainer).find('.draghome'));\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set up the event handlers that make this question type work. (Done once per page.)\r\n         */\r\n        setupEventHandlers: function() {\r\n            if (questionManager.isMobile) {\r\n                $('body')\r\n                    .on('touchend',\r\n                        '.que.ddimageortext:not(.qtype_ddimageortext-readonly) .dropzones .dropzone',\r\n                        questionManager.handleMobileDropClick)\r\n                    .on('touchend',\r\n                        '.que.ddimageortext:not(.qtype_ddimageortext-readonly) .draghome.placed:not(.beingdragged)',\r\n                        questionManager.handleMobileDropSwapClick)\r\n                    .on('touchend', questionManager.handleMobileDragBackClick)\r\n                    .on('touchend',\r\n                        '.que.ddimageortext:not(.qtype_ddimageortext-readonly) .draghome.unplaced',\r\n                        questionManager.handleMobileDragClick)\r\n                    .on('qtype_ddimageortext-dragmoved', questionManager.handleDragMoved);\r\n\r\n\r\n            } else {\r\n                $('body')\r\n                    .on('keydown',\r\n                        '.que.ddimageortext:not(.qtype_ddimageortext-readonly) .dropzones .dropzone',\r\n                        questionManager.handleKeyPress)\r\n                    .on('keydown',\r\n                        '.que.ddimageortext:not(.qtype_ddimageortext-readonly) .draghome.placed:not(.beingdragged)',\r\n                        questionManager.handleKeyPress)\r\n                    .on('qtype_ddimageortext-dragmoved', questionManager.handleDragMoved);\r\n            }\r\n\r\n\r\n            $(window).on('resize', function() {\r\n                questionManager.handleWindowResize(false);\r\n            });\r\n            window.addEventListener('beforeprint', function() {\r\n                questionManager.isPrinting = true;\r\n                questionManager.handleWindowResize(questionManager.isPrinting);\r\n            });\r\n            window.addEventListener('afterprint', function() {\r\n                questionManager.isPrinting = false;\r\n                questionManager.handleWindowResize(questionManager.isPrinting);\r\n            });\r\n            setTimeout(function() {\r\n                questionManager.fixLayoutIfThingsMoved();\r\n            }, 100);\r\n        },\r\n\r\n        /**\r\n         * Binding the drag/touch event again for newly created element.\r\n         *\r\n         * @param {jQuery} element Element to bind the event\r\n         */\r\n        addEventHandlersToDrag: function(element) {\r\n            if (!questionManager.isMobile) {\r\n                // Unbind all the mousedown and touchstart events to prevent double binding.\r\n                element.unbind('mousedown touchstart');\r\n                element.on('mousedown touchstart', questionManager.handleDragStart);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle mouse down / touch start events on drags.\r\n         * @param {Event} e the DOM event.\r\n         */\r\n        handleDragStart: function(e) {\r\n            e.preventDefault();\r\n            var question = questionManager.getQuestionForEvent(e);\r\n            if (question) {\r\n                question.handleDragStart(e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle key down / press events on drags.\r\n         * @param {KeyboardEvent} e\r\n         */\r\n        handleKeyPress: function(e) {\r\n            if (questionManager.isKeyboardNavigation) {\r\n                return;\r\n            }\r\n            questionManager.isKeyboardNavigation = true;\r\n            var question = questionManager.getQuestionForEvent(e);\r\n            if (question) {\r\n                question.handleKeyPress(e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle mobile click on drops.\r\n         * @param {Event} e\r\n         */\r\n        handleMobileDropClick: function(e) {\r\n            var question = questionManager.getQuestionForEvent(e);\r\n            questionManager.mobileClickNdrop.currentQuestion = question;\r\n            if (question) {\r\n                question.handleMobileDropClick(e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle mobile click on drops.\r\n         * @param {Event} e\r\n         */\r\n        handleMobileDropSwapClick: function(e) {\r\n            var question = questionManager.getQuestionForEvent(e);\r\n            questionManager.mobileClickNdrop.currentQuestion = question;\r\n            if (question) {\r\n                question.handleMobileDropSwapClick(e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle mobile click on drags.\r\n         * @param {Event} e\r\n         */\r\n        handleMobileDragClick: function(e) {\r\n            var question = questionManager.getQuestionForEvent(e);\r\n            if (question) {\r\n                question.handleMobileDragClick(e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle mobile click on drags.\r\n         * @param {Event} e\r\n         */\r\n        handleMobileDragBackClick: function(e) {\r\n            if (questionManager.mobileClickNdrop.currentDrop && questionManager.mobileClickNdrop.currentQuestion) {\r\n                var isDraghome = $(e.target).hasClass('draghome') || false;\r\n                var isDropzone = $(e.target).hasClass('dropzone') || false;\r\n                if (isDraghome === false && isDropzone === false) {\r\n                    questionManager.mobileClickNdrop.currentQuestion.handleMobileDragBackClick(e);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle when the window is resized.\r\n         * @param {boolean} isPrinting\r\n         */\r\n        handleWindowResize: function(isPrinting) {\r\n            for (var containerId in questionManager.questions) {\r\n                if (questionManager.questions.hasOwnProperty(containerId)) {\r\n                    questionManager.questions[containerId].isPrinting = isPrinting;\r\n                    questionManager.questions[containerId].handleResize();\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sometimes, despite our best efforts, things change in a way that cannot\r\n         * be specifically caught (e.g. dock expanding or collapsing in Boost).\r\n         * Therefore, we need to periodically check everything is in the right position.\r\n         */\r\n        fixLayoutIfThingsMoved: function() {\r\n            this.handleWindowResize(questionManager.isPrinting);\r\n            // We use setTimeout after finishing work, rather than setInterval,\r\n            // in case positioning things is slow. We want 100 ms gap\r\n            // between executions, not what setInterval does.\r\n            setTimeout(function() {\r\n                questionManager.fixLayoutIfThingsMoved(questionManager.isPrinting);\r\n            }, 100);\r\n        },\r\n\r\n        /**\r\n         * Handle when drag moved.\r\n         *\r\n         * @param {Event} e the event.\r\n         * @param {jQuery} drag the drag\r\n         * @param {jQuery} target the target\r\n         * @param {DragDropOntoImageQuestion} thisQ the question.\r\n         */\r\n        handleDragMoved: function(e, drag, target, thisQ) {\r\n            drag.removeClass('beingdragged').css('z-index', '');\r\n            drag.css('top', target.position().top).css('left', target.position().left);\r\n            target.after(drag);\r\n            target.removeClass('active');\r\n            if (typeof drag.data('unplaced') !== 'undefined' && drag.data('unplaced') === true) {\r\n                drag.removeClass('placed').addClass('unplaced');\r\n                drag.removeAttr('tabindex');\r\n                drag.removeData('unplaced');\r\n                drag.css('top', '')\r\n                    .css('left', '')\r\n                    .css('transform', '');\r\n                if (drag.hasClass('infinite') && thisQ.getInfiniteDragClones(drag, true).length > 1) {\r\n                    thisQ.getInfiniteDragClones(drag, true).first().remove();\r\n                }\r\n            } else {\r\n                drag.data('originX', target.data('originX')).data('originY', target.data('originY'));\r\n                thisQ.handleElementScale(drag, 'left top');\r\n            }\r\n            if (typeof drag.data('isfocus') !== 'undefined' && drag.data('isfocus') === true) {\r\n                drag.focus();\r\n                drag.removeData('isfocus');\r\n            }\r\n            if (typeof target.data('isfocus') !== 'undefined' && target.data('isfocus') === true) {\r\n                target.removeData('isfocus');\r\n            }\r\n            if (questionManager.isKeyboardNavigation) {\r\n                questionManager.isKeyboardNavigation = false;\r\n            }\r\n            if (thisQ.isQuestionInteracted()) {\r\n                // The user has interacted with the draggable items. We need to mark the form as dirty.\r\n                questionManager.handleFormDirty();\r\n                // Save the new answered value.\r\n                thisQ.questionAnswer = thisQ.getQuestionAnsweredValues();\r\n            }\r\n\r\n            questionManager.mobileClickNdrop.currentDrag = null;\r\n            questionManager.mobileClickNdrop.currentDrop = null;\r\n            questionManager.mobileClickNdrop.currentQuestion = null;\r\n        },\r\n\r\n        /**\r\n         * Given an event, work out which question it effects.\r\n         * @param {Event} e the event.\r\n         * @returns {DragDropOntoImageQuestion|undefined} The question, or undefined.\r\n         */\r\n        getQuestionForEvent: function(e) {\r\n            var containerId = $(e.currentTarget).closest('.que.ddimageortext').attr('id');\r\n            return questionManager.questions[containerId];\r\n        },\r\n\r\n        /**\r\n         * Handle when the form is dirty.\r\n         */\r\n        handleFormDirty: function() {\r\n            const responseForm = document.getElementById('responseform');\r\n            FormChangeChecker.markFormAsDirty(responseForm);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @alias module:qtype_ddimageortext/question\r\n     */\r\n    return {\r\n        init: questionManager.init\r\n    };\r\n});\r\n"],"names":["define","$","dragDrop","keys","FormChangeChecker","filterEvent","DragDropOntoImageQuestion","containerId","readOnly","places","questionAnswer","questionDragDropWidthHeight","M","util","js_pending","this","allImagesLoaded","imageLoadingTimeoutId","isPrinting","getRoot","addClass","thisQ","getNotYetLoadedImages","one","waitForAllImagesToBeLoaded","isMobile","test","navigator","userAgent","prototype","changeAllDragsAndDropsToFilteredContent","filteredElement","currentFilteredItem","parentIsDD","parent","closest","hasClass","isDD","find","length","group","getGroup","choice","getChoice","listOfModifiedDragDrop","each","i","node","get","originalClass","attr","originalStyle","filteredDragDropClone","clone","questionManager","addEventHandlersToDrag","before","push","forEach","remove","currentHeight","height","currentWidth","width","offsetWidth","offsetHeight","classList","add","maxWidth","Math","ceil","maxHeight","resizeAllDragsAndDropsInGroup","top","floor","css","clearTimeout","setTimeout","setupQuestion","document","addEventListener","eventTypes","filterContentRenderingComplete","elements","detail","nodes","element","not","imgNode","imageIsLoaded","imgElement","complete","naturalHeight","resizeAllDragsAndDrops","cloneDrags","positionDragsAndDrops","js_complete","getClassnameNumericSuffix","root","dragHomes","drag","max","hasOwnProperty","place","label","text","parseInt","get_string","append","index","dragHome","placeHolder","removeClass","cloneDragsForOneChoice","noOfDrags","noOfDropsInGroup","cloneDrag","offset","bgRatio","dropNode","drop","getPlace","xy","data","handleElementScale","dragNode","currentPlace","removeAttr","inputNode","input","val","unplacedDrag","getUnplacedChoice","hiddenDrag","getDragClone","getInfiniteDragClones","after","sendDragToDrop","getQuestionAnsweredValues","result","id","value","isQuestionInteracted","oldAnswer","newAnswer","isInteracted","JSON","stringify","Object","key","handleDragStart","e","target","newIndex","calculateZIndex","prepare","start","setInputValue","hiddenDrop","getDrop","x","y","dragMove","dragEnd","pageX","pageY","highlighted","isPointInDrop","isDragSameAsDrop","placed","placedNode","placedDrag","sendDragHome","oldDrag","getCurrentDragInPlace","focus","animateTo","getDragHome","handleMobileDropClick","mobileClickNdrop","currentDrop","handleMobileDropSwapClick","currentTarget","prev","currentDrag","preventDefault","handleMobileDragClick","draghome","handleMobileDragBackClick","type","handleKeyPress","nextDrag","keyCode","space","arrowRight","arrowDown","getNextDrag","arrowLeft","arrowUp","getPreviousDrag","escape","isKeyboardNavigation","numChoices","noOfChoicesInGroup","next","previous","currentPos","targetPos","animate","left","duration","done","trigger","position","outerWidth","outerHeight","getElementById","bgImage","is","slice","prefix","classes","classesArr","split","RegExp","match","exec","Number","inHome","handleResize","parseFloat","bgImg","bgImgNaturalWidth","naturalWidth","zIndex","itemZIndex","eventHandlersInitialised","currentQuestion","dragEventHandlersInitialised","questions","init","setupEventHandlers","questionContainer","contains","on","handleDragMoved","window","handleWindowResize","fixLayoutIfThingsMoved","unbind","question","getQuestionForEvent","isDraghome","isDropzone","removeData","first","handleFormDirty","responseForm","markFormAsDirty"],"mappings":"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"}