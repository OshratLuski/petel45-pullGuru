{"version":3,"file":"jstests-lazy.min.js","sources":["../src/jstests-lazy.js"],"sourcesContent":["// This file is part of VPL for Moodle - http://vpl.dis.ulpgc.es/\r\n//\r\n// VPL for Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// VPL for Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with VPL for Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * VPL JavaScript test\r\n *\r\n * @copyright 2017 Juan Carlos Rodríguez-del-Pino\r\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @author Juan Carlos Rodríguez-del-Pino <jcrodriguez@dis.ulpgc.es>\r\n */\r\n\r\ndefine(\r\n    [\r\n        'jquery',\r\n        'qtype_savpl/vplutil',\r\n    ],\r\n    function($, VPLUtil) {\r\n        var tests = [];\r\n        var result = [];\r\n        var testing = '';\r\n        var nAsserts = 0;\r\n        /**\r\n         * Show results of tests in page and window.console\r\n         */\r\n        function showResults() {\r\n            var stat = nAsserts + \" asserts tested\";\r\n            window.console.log(stat);\r\n            $('#test_results').append($('<p></p>').text(stat));\r\n            var message;\r\n            if (result.length == 0) {\r\n                message = 'Test passed';\r\n            } else {\r\n                message = result.length + ' errors found';\r\n            }\r\n            window.console.log(message);\r\n            $('#test_results').append($('<p></p>').text(message));\r\n            if (result.length > 0) {\r\n                var list = $('<ol></ol>');\r\n                for (var i = 0; i < result.length; i++) {\r\n                    window.console.log((i + 1) + ': ' + result[i]);\r\n                    var element = $('<li></li>');\r\n                    element.text(result[i]);\r\n                    list.append(element);\r\n                }\r\n                $('#test_results').append(list);\r\n            }\r\n        }\r\n        /**\r\n         * Basic test assert\r\n         * @param {boolean} b test result\r\n         * @param {string} message Optional message\r\n         */\r\n        function assert(b, message) {\r\n            nAsserts++;\r\n            if (!b) {\r\n                if (typeof message == 'string') {\r\n                    result.push(\"Error: \" + message + \" testing \" + testing);\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * Basic test assert\r\n         * @param {boolean} a Expected\r\n         * @param {boolean} b Actual\r\n         * @param {string} message Optional message\r\n         */\r\n        function assertEquals(a, b, message) {\r\n            nAsserts++;\r\n            if (a != b) {\r\n                if (typeof message == 'string') {\r\n                    result.push(\"Error: \" + message + \" testing \" + testing + '. Expected \"' + a + '\" found \"' + b + '\"');\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * Run tests in tests array\r\n         */\r\n        function runTests() {\r\n            for (var i = 0; i < tests.length; i++) {\r\n                try {\r\n                    testing = tests[i].name;\r\n                    tests[i].test();\r\n                } catch (e) {\r\n                    result.push(\"Error: Exception \" + e.message + \" testing \" + testing + \"\\n\" + e.stack);\r\n                }\r\n            }\r\n        }\r\n        tests.push({\r\n            'name': \"VPLUtil\",\r\n            'test': function() {\r\n                assert(VPLUtil.returnTrue(), 'returnTrue');\r\n                assert(!VPLUtil.returnFalse(), 'returnFalse');\r\n                (function() {\r\n                    var rawData = new ArrayBuffer(13);\r\n                    assertEquals(13, rawData.byteLength, 'rawData.byteLength');\r\n                    var bufferData = new Uint8Array(rawData);\r\n                    for (var i = 0; i < bufferData.length; i++) {\r\n                        bufferData[i] = Math.round(Math.random() * 255);\r\n                    }\r\n                    assertEquals(13, bufferData.length, 'bufferData.length');\r\n                    var stringData = \"abcdeñhfjéÇ123143565387095609784\";\r\n                    var rawResult = VPLUtil.String2ArrayBuffer(stringData);\r\n                    var stringResult = VPLUtil.ArrayBuffer2String(rawResult);\r\n                    assertEquals(stringData, stringResult, 'ArrayBuffer2String');\r\n                    stringResult = VPLUtil.ArrayBuffer2String(rawData);\r\n                    rawResult = VPLUtil.String2ArrayBuffer(stringResult);\r\n                    var bufferResult = new Uint8Array(rawResult);\r\n                    assertEquals(bufferData.length, bufferResult.length, 'String2ArrayBuffer');\r\n                    if (bufferData.length == bufferResult.length) {\r\n                        for (var j = 0; j < bufferData.length; j++) {\r\n                            assertEquals(bufferData[j], bufferResult[j], 'String2ArrayBuffer values');\r\n                        }\r\n                    }\r\n                })();\r\n                (function() {\r\n                    assertEquals('c', VPLUtil.fileExtension('a.c'), 'fileExtension');\r\n                    assertEquals('C', VPLUtil.fileExtension('a.c.C'), 'fileExtension');\r\n                    assertEquals('hxx', VPLUtil.fileExtension('a.hxx'), 'fileExtension');\r\n                    assertEquals('all', VPLUtil.fileExtension('.all'), 'fileExtension');\r\n                })();\r\n                (function() {\r\n                    assert(!VPLUtil.isImage('a.c'), 'isImage');\r\n                })();\r\n                (function() {\r\n                    assert(!VPLUtil.isBinary('a.c'), 'isBinary');\r\n                })();\r\n                (function() {\r\n                    assert(!VPLUtil.isBlockly('a.c'), 'isBlockly');\r\n                })();\r\n                (function() {\r\n                    assert(VPLUtil.validFileName('a.c'), 'validFileName');\r\n                })();\r\n            }\r\n        });\r\n        tests.push({\r\n            'name': \"VPLUtil langType\",\r\n            'test': function() {\r\n                var mapnames = VPLUtil.getLangNames();\r\n                for (var ext in mapnames) {\r\n                    assert(VPLUtil.langType(ext) != 'plain_text', 'VPLUtil.langType');\r\n                }\r\n                assert(VPLUtil.langType('otra cosa') == 'plain_text', 'VPLUtil.langType');\r\n            }\r\n        });\r\n        runTests();\r\n        return {\r\n            start: function() {\r\n                $(showResults);\r\n            }\r\n        };\r\n    }\r\n);\r\n"],"names":["define","$","VPLUtil","tests","result","testing","nAsserts","showResults","message","stat","window","console","log","append","text","length","list","i","element","assert","b","push","assertEquals","a","name","test","returnTrue","returnFalse","rawData","ArrayBuffer","byteLength","bufferData","Uint8Array","Math","round","random","stringData","rawResult","String2ArrayBuffer","stringResult","ArrayBuffer2String","bufferResult","j","fileExtension","isImage","isBinary","isBlockly","validFileName","mapnames","getLangNames","ext","langType","e","stack","runTests","start"],"mappings":"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"}