{"version":3,"file":"vplterminal.min.js","sources":["../src/vplterminal.js"],"sourcesContent":["// This file is part of VPL for Moodle - http://vpl.dis.ulpgc.es/\r\n//\r\n// VPL for Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// VPL for Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with VPL for Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Terminal control\r\n *\r\n * @copyright 2014 Juan Carlos Rodríguez-del-Pino\r\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @author Juan Carlos Rodríguez-del-Pino <jcrodriguez@dis.ulpgc.es>\r\n */\r\n\r\n/* globals Terminal */\r\n\r\ndefine(\r\n    [\r\n        'jquery',\r\n        'jqueryui',\r\n        'qtype_savpl/vplutil',\r\n        'qtype_savpl/vplui',\r\n        'qtype_savpl/vplclipboard'\r\n    ],\r\n    function($, jqui, VPLUtil, VPLUI, VPLClipboard) {\r\n        if (typeof VPLTerminal !== 'undefined') {\r\n            return VPLTerminal;\r\n        }\r\n        var NTHEMES = 5;\r\n        var VPLTerminal = function(dialogId, terminalId, str) {\r\n            var self = this;\r\n            var ws = null;\r\n            var onCloseAction = VPLUtil.doNothing;\r\n            var title = '';\r\n            var message = '';\r\n            var tdialog = $('#' + dialogId);\r\n            var tIde = $('#vplide');\r\n            var titleText = '';\r\n            var clipboard = null;\r\n            var cliboardMaxsize = 64000;\r\n            var clipboardData = '';\r\n\r\n            var terminal;\r\n            var terminalTag = $('#' + terminalId);\r\n            this.updateTitle = function() {\r\n                var text = title;\r\n                if (message !== '') {\r\n                    text += ' (' + message + ')';\r\n                }\r\n                titleText.text(str('console') + \": \" + text);\r\n            };\r\n            this.setTitle = function(t) {\r\n                title = t;\r\n                this.updateTitle();\r\n            };\r\n            this.setMessage = function(t) {\r\n                message = t;\r\n                this.updateTitle();\r\n            };\r\n            /**\r\n             * Manages the data received from clipboard\r\n             * @param {string} data Data recieved\r\n             */\r\n            function receiveClipboard(data) {\r\n                clipboardData += data;\r\n                if (clipboardData.length > cliboardMaxsize) {\r\n                    var from = clipboardData.length - cliboardMaxsize / 2;\r\n                    clipboardData = clipboardData.substr(from);\r\n                }\r\n            }\r\n            /**\r\n             * Sends the clipboard data to the connection\r\n             */\r\n            function pasteClipboard() {\r\n                if (ws && ws.readyState == ws.OPEN) {\r\n                    ws.send(clipboard.getEntry2());\r\n                }\r\n            }\r\n            /**\r\n             * Updates the data in the clipboard dialog\r\n             */\r\n            function updateClipboard() {\r\n                clipboard.setEntry1(clipboardData);\r\n            }\r\n            /**\r\n             * Opens the clipboard dialog\r\n             */\r\n            function openClipboard() {\r\n                updateClipboard();\r\n                clipboard.show();\r\n            }\r\n            this.write = function(text) {\r\n                terminal.write(text);\r\n                return text;\r\n            };\r\n\r\n            this.connect = function(server, onClose) {\r\n                onCloseAction = onClose;\r\n                if (\"WebSocket\" in window) {\r\n                    terminal.reset();\r\n                    terminal.startBlink();\r\n                    self.show();\r\n                    if (ws) {\r\n                        ws.close();\r\n                    }\r\n                    clipboardData = '';\r\n                    self.setMessage('');\r\n                    self.setTitle(str('connecting'));\r\n                    ws = new WebSocket(server);\r\n                    ws.writeBuffer = '';\r\n                    ws.writeIt = function() {\r\n                        terminal.write(ws.writeBuffer);\r\n                        receiveClipboard(ws.writeBuffer);\r\n                        ws.writeBuffer = '';\r\n                    };\r\n                    ws.onmessage = function(event) {\r\n                        if (ws.writeBuffer.length > 0) {\r\n                            ws.writeBuffer += event.data;\r\n                        } else {\r\n                            ws.writeBuffer = event.data;\r\n                            setTimeout(ws.writeIt, 35);\r\n                        }\r\n                    };\r\n                    ws.onopen = function() {\r\n                        self.setMessage('');\r\n                        self.setTitle(str('connected'));\r\n                    };\r\n                    ws.onclose = function() {\r\n                        self.setTitle(str('connection_closed'));\r\n                        terminal.blur();\r\n                        terminal.stopBlink();\r\n                        onClose();\r\n                        ws.stopOutput = true;\r\n                    };\r\n                } else {\r\n                    terminal.write('WebSocket not available: Upgrade your browser');\r\n                }\r\n            };\r\n            this.writeLocal = function(text) {\r\n                ws.onmessage({\r\n                    data: text\r\n                });\r\n                return text;\r\n            };\r\n            this.setDataCallback = function(call) {\r\n                ws.onData = call;\r\n            };\r\n            this.closeLocal = function() {\r\n                if (ws) {\r\n                    ws.writeIt();\r\n                    ws.close();\r\n                    terminal.stopBlink();\r\n                    self.setTitle(str('connection_closed'));\r\n                }\r\n            };\r\n            this.connectLocal = function(onClose, onData) {\r\n                onCloseAction = onClose;\r\n                terminal.reset();\r\n                terminal.startBlink();\r\n                self.show();\r\n                if (ws) {\r\n                    ws.close();\r\n                }\r\n                clipboardData = '';\r\n                self.setMessage('');\r\n                self.setTitle(str('running'));\r\n                ws = {};\r\n                ws.onData = onData;\r\n                ws.writeBuffer = '';\r\n                ws.readBuffer = '';\r\n                ws.readyState = 1;\r\n                ws.OPEN = 1;\r\n                ws.close = function() {\r\n                    ws = false;\r\n                };\r\n                ws.onmessage = function(event) {\r\n                    ws.writeBuffer = event.data;\r\n                    ws.writeIt();\r\n                };\r\n                ws.writeIt = function() {\r\n                    if (ws) {\r\n                        terminal.write(ws.writeBuffer);\r\n                        receiveClipboard(ws.writeBuffer);\r\n                        ws.writeBuffer = '';\r\n                    }\r\n                };\r\n                ws.send = function(text) {\r\n                    // Process backspace.\r\n                    if (text == '\\u007f') {\r\n                        if (ws.readBuffer.length > 0) {\r\n                            self.writeLocal('\\b \\b');\r\n                            ws.readBuffer = ws.readBuffer.substr(0, ws.readBuffer.length - 1);\r\n                        }\r\n                    } else {\r\n                        self.writeLocal(text);\r\n                        ws.readBuffer += text;\r\n                    }\r\n                    var pos = ws.readBuffer.indexOf(\"\\r\");\r\n                    if (pos != -1) {\r\n                        var data = ws.readBuffer.substr(0, pos);\r\n                        ws.readBuffer = ws.readBuffer.substr(pos + 1);\r\n                        ws.onData(data);\r\n                    }\r\n                };\r\n            };\r\n            this.isOpen = function() {\r\n                return tdialog.dialog(\"isOpen\");\r\n            };\r\n            this.close = function() {\r\n                tdialog.dialog(\"close\");\r\n            };\r\n            this.isConnected = function() {\r\n                return ws && ws.readyState != ws.CLOSED;\r\n            };\r\n            this.disconnect = function() {\r\n                if (ws && ws.readyState == ws.OPEN) {\r\n                    onCloseAction();\r\n                    if (ws) {\r\n                        ws.close();\r\n                    }\r\n                    terminal.stopBlink();\r\n                }\r\n            };\r\n            var HTMLUpdateClipboard = VPLUI.genIcon('copy', 'sw') + ' ' + str('copy');\r\n            var HTMLPaste = VPLUI.genIcon('paste', 'sw') + ' ' + str('paste');\r\n            clipboard = new VPLClipboard('vpl_dialog_terminal_clipboard', HTMLUpdateClipboard, function() {\r\n                    updateClipboard();\r\n                    document.execCommand('copy');\r\n                }, HTMLPaste, pasteClipboard);\r\n            this.closeDialog = function() {\r\n                clipboard.hide();\r\n                self.disconnect();\r\n            };\r\n            /**\r\n             * Sets the terminal theme\r\n             * @param {int} theme\r\n             */\r\n            function setTheme(theme) {\r\n                var cbase = \"vpl_terminal_theme\";\r\n                var nthemes = 5;\r\n                tdialog.data('terminal_theme', theme);\r\n                VPLUtil.setUserPreferences({terminalTheme: theme});\r\n                for (var i = 0; i < nthemes; i++) {\r\n                    tdialog.removeClass(cbase + i);\r\n                }\r\n                tdialog.addClass(cbase + theme);\r\n            }\r\n            /**\r\n             * Limits the size of the dialogo to the IDE\r\n             */\r\n            function controlDialogSize() {\r\n                // Resize if dialog is large than screen.\r\n                var bw = tIde.width();\r\n                var bh = tIde.height();\r\n                if (tdialog.width() > bw) {\r\n                    tdialog.dialog(\"option\", \"width\", bw);\r\n                }\r\n                if (tdialog.parent().height() > bh) {\r\n                    tdialog.dialog(\"option\", \"height\", bh - tdialog.prev().outerHeight());\r\n                }\r\n            }\r\n            tdialog.dialog({\r\n                closeOnEscape: false,\r\n                autoOpen: false,\r\n                width: 'auto',\r\n                height: 'auto',\r\n                resizable: true,\r\n                dragStop: controlDialogSize,\r\n                open: controlDialogSize,\r\n                focus: function() {\r\n                    controlDialogSize();\r\n                    terminal.focus();\r\n                },\r\n                dialogClass: 'vpl_ide vpl_vnc',\r\n                create: function() {\r\n                    titleText = VPLUI.setTitleBar(tdialog, 'console', 'console',\r\n                            ['clipboard', 'keyboard', 'theme'],\r\n                            [openClipboard,\r\n                            function() {\r\n                                terminal.focus();\r\n                            },\r\n                            function() {\r\n                                // Cycle themes from 0 to NTHEMES-1.\r\n                                var theme = (tdialog.data('terminal_theme') + 1) % NTHEMES;\r\n                                setTheme(theme);\r\n                            }]);\r\n                },\r\n                close: function() {\r\n                    self.closeDialog();\r\n                },\r\n                resizeStop: function() {\r\n                    tdialog.width(tdialog.parent().width());\r\n                    tdialog.height(tdialog.parent().height() - tdialog.prev().outerHeight());\r\n                    controlDialogSize();\r\n                    terminal.focus();\r\n                }\r\n            });\r\n            this.setFontSize = function(size) {\r\n                terminalTag.css(\"font-size\", size + \"px\");\r\n            };\r\n            VPLUtil.getUserPreferences(function(data) {\r\n                setTheme(data.preferences.terminalTheme);\r\n            });\r\n            tdialog.css(\"padding\", \"1px\");\r\n            tdialog.parent().css('z-index', 2000);\r\n            this.show = function() {\r\n                tdialog.dialog('open');\r\n                terminal.focus();\r\n            };\r\n            this.init = function() {\r\n                if (typeof Terminal === 'undefined') {\r\n                    VPLUtil.loadScript(['/xterm/term.js'], function() {\r\n                            self.init();\r\n                        });\r\n                    return;\r\n                }\r\n                terminal = new Terminal({\r\n                    cols: 80,\r\n                    rows: 24,\r\n                    useStyle: true,\r\n                    screenKeys: true\r\n                });\r\n                terminal.on('data', function(data) {\r\n                    if (ws && ws.readyState == ws.OPEN) {\r\n                        ws.send(data);\r\n                    }\r\n                });\r\n                terminal.open(terminalTag[0]);\r\n                terminal.reset();\r\n                terminal.stopBlink();\r\n                terminal.setLineCallback(\r\n                    function(line, nlines) {\r\n                        var height = terminalTag.height();\r\n                        var offset = tdialog.scrollTop();\r\n                        var viewHeight = tdialog.innerHeight();\r\n                        if (viewHeight >= height) {\r\n                            return;\r\n                        }\r\n                        var lineHeight = height / nlines;\r\n                        var pos = line * lineHeight;\r\n                        // If cursor in view area return.\r\n                        if (pos >= offset && pos < (viewHeight + offset - lineHeight)) {\r\n                            return;\r\n                        }\r\n                        if (pos < offset) { // If cursor beforer view area scroll to first view line.\r\n                            tdialog.scrollTop(pos);\r\n                        } else {\r\n                            tdialog.scrollTop((pos - viewHeight) + 2 * lineHeight);\r\n                        }\r\n                    }\r\n                );\r\n            };\r\n            this.init();\r\n        };\r\n        window.VPLTerminal = VPLTerminal;\r\n        return VPLTerminal;\r\n    }\r\n);\r\n"],"names":["define","$","jqui","VPLUtil","VPLUI","VPLClipboard","VPLTerminal","dialogId","terminalId","str","terminal","self","this","ws","onCloseAction","doNothing","title","message","tdialog","tIde","titleText","clipboard","clipboardData","terminalTag","receiveClipboard","data","length","from","cliboardMaxsize","substr","updateClipboard","setEntry1","openClipboard","show","updateTitle","text","setTitle","t","setMessage","write","connect","server","onClose","window","reset","startBlink","close","WebSocket","writeBuffer","writeIt","onmessage","event","setTimeout","onopen","onclose","blur","stopBlink","stopOutput","writeLocal","setDataCallback","call","onData","closeLocal","connectLocal","readBuffer","readyState","OPEN","send","pos","indexOf","isOpen","dialog","isConnected","CLOSED","disconnect","HTMLUpdateClipboard","genIcon","HTMLPaste","setTheme","theme","cbase","setUserPreferences","terminalTheme","i","removeClass","addClass","controlDialogSize","bw","width","bh","height","parent","prev","outerHeight","document","execCommand","getEntry2","closeDialog","hide","closeOnEscape","autoOpen","resizable","dragStop","open","focus","dialogClass","create","setTitleBar","resizeStop","setFontSize","size","css","getUserPreferences","preferences","init","Terminal","cols","rows","useStyle","screenKeys","on","setLineCallback","line","nlines","offset","scrollTop","viewHeight","innerHeight","lineHeight","loadScript"],"mappings":"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"}