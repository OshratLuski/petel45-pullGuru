{"version":3,"file":"vplservice.min.js","sources":["../src/vplservice.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Provides utility method to communicate with a VPL (this is an API wrapper to use VPLUtil and VPLUI)\r\n * @copyright  Astor Bizard, 2019\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n// VPLUtil and VPLUI have to be loaded to use this module.\r\n/* globals VPLUtil */\r\n/* globals VPLUI */\r\ndefine(['jquery', 'core/url'], function($, url) {\r\n\r\n    /**\r\n     * Build ajax url to call with VPLUI.\r\n     * @param {String|Number} vplId VPL ID.\r\n     * @param {String|Number} userId User ID.\r\n     * @param {String} file (optional) Ajax file to use. Defaults to edit.\r\n     * @return {String} The ajax url built.\r\n     */\r\n    function getAjaxUrl(questionId, userId, file) {\r\n        if (file === undefined) {\r\n            file = 'edit';\r\n        }\r\n        return url.relativeUrl('/question/type/savpl/ajax') + '/' + file + '.json.php?id=' + questionId + '&userId=' + userId + '&action=';\r\n    }\r\n\r\n    var VPLService = {};\r\n\r\n    // Cache for info.\r\n    var cache = {\r\n        reqfile: [],\r\n        execfiles: []\r\n    };\r\n\r\n    // Retrieve specified files from the VPL (either 'reqfile' or 'execfile').\r\n    // Note : these files are stored in cache. To clear it, the user has to reload the page.\r\n    VPLService.info = function(filesType, questionId) {\r\n        if (cache[filesType][questionId] != undefined) {\r\n            return $.Deferred().resolve(cache[filesType][questionId]).promise();\r\n        } else {\r\n            var deferred = filesType == 'reqfile' ?\r\n                VPLUI.requestAction('resetfiles', '', {}, getAjaxUrl(questionId, '')) :\r\n                VPLUI.requestAction('load', '', {}, getAjaxUrl(questionId, '', 'executionfiles'));\r\n            return deferred\r\n            .then(function(response) {\r\n                var files = filesType == 'reqfile' ?\r\n                    response.files[0] :\r\n                    response.files;\r\n                cache[filesType][questionId] = files;\r\n                return files;\r\n            }).promise();\r\n        }\r\n    };\r\n\r\n    // Save student answer to VPL, by replacing {{ANSWER}} in the template by the student answer.\r\n    VPLService.save = function(questionId, answer, filestype) {\r\n        return $.ajax(url.relativeUrl('/question/type/savpl/ajax/save.json.php'), {\r\n            data: {\r\n                qid: questionId,\r\n                answer: answer,\r\n                filestype: filestype\r\n            },\r\n            method: 'POST'\r\n        }).promise();\r\n    };\r\n\r\n    // Execute the specified action (should be 'run' or 'evaluate').\r\n    // Note that this function does not call save, it has to be called beforehand if needed.\r\n    // Note also that callback may be called several times\r\n    // (especially one time with (false) execution error and one time right after with execution result).\r\n    VPLService.exec = function(action, questionId, userId, terminal, callback) {\r\n        // Build the options object for VPLUtil.\r\n        var options = {\r\n            ajaxurl: getAjaxUrl(questionId, userId),\r\n            resultSet: false,\r\n            errorCause: 'unknown',\r\n            setResult: function(result) {\r\n                this.resultSet = true;\r\n                callback(result);\r\n            },\r\n            close: function() {\r\n                // If connection is closed without a result set, display an error.\r\n                // /!\\ It can happen that result will be set about 0.3s after closing.\r\n                // -> Set a timeout to avoid half-second display of error.\r\n                // Note : if delay between close and result is greater than timeout, it is fine\r\n                // (there will just be a 0.1s error display before displaying the result).\r\n                var _this = this;\r\n                setTimeout(function() {\r\n                    if (!_this.resultSet) {\r\n                        callback({execerror: M.util.get_string('execerrordetails', 'qtype_savpl')});\r\n                    }\r\n                }, 600);\r\n            },\r\n\r\n            // The following will only be used for the 'run' action.\r\n            getConsole: function() {\r\n                return terminal;\r\n            },\r\n            run: function(type, conInfo, ws) {\r\n                var _this = this;\r\n                terminal.connect(conInfo.executionURL, function() {\r\n                    ws.close();\r\n                    if (!_this.resultSet) {\r\n                        // This may happen for the run action.\r\n                        callback({});\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        // Recode progress bar so we can display the cause when execution is unexpectedly closed.\r\n        VPLUI.progressBar = function() {\r\n            var closed = false;\r\n            this.setLabel = function(message) {\r\n                var knownCauses = ['timeout', 'outofmemory'];\r\n                knownCauses.forEach(function(cause) {\r\n                    var pattern = '{' + cause + '}';\r\n                    if (message.indexOf(pattern) !== -1) {\r\n                        options.errorCause = cause + message.substring(message.indexOf(pattern) + pattern.length);\r\n                    }\r\n                });\r\n            };\r\n            this.close = function() {\r\n                closed = true;\r\n            };\r\n            this.isClosed = function() {\r\n                return closed;\r\n            };\r\n        };\r\n\r\n        return VPLUI.requestAction(action, '', {}, options.ajaxurl)\r\n        .done(function(response) {\r\n            VPLUI.webSocketMonitor(response, '', '', options);\r\n        }).promise();\r\n    };\r\n\r\n    return {\r\n        call: function(service, ...args) {\r\n            // Deactivate progress bar, as we have our own progress indicator.\r\n            VPLUI.progressBar = function() {\r\n                this.setLabel = function() {\r\n                    return;\r\n                };\r\n                this.close = function() {\r\n                    return;\r\n                };\r\n                this.isClosed = function() {\r\n                    return true;\r\n                };\r\n            };\r\n            // Call service.\r\n            return VPLService[service](...args);\r\n        },\r\n\r\n        langOfFile: function(fileName) {\r\n            return VPLUtil.langType(fileName.split('.').pop());\r\n        },\r\n\r\n        isBinary: function(fileName) {\r\n            return VPLUtil.isBinary(fileName);\r\n        }\r\n    };\r\n});\r\n"],"names":["define","$","url","getAjaxUrl","questionId","userId","file","undefined","relativeUrl","VPLService","cache","reqfile","execfiles","info","filesType","Deferred","resolve","promise","VPLUI","requestAction","then","response","files","save","answer","filestype","ajax","data","qid","method","exec","action","terminal","callback","options","ajaxurl","resultSet","errorCause","setResult","result","this","close","_this","setTimeout","execerror","M","util","get_string","getConsole","run","type","conInfo","ws","connect","executionURL","progressBar","closed","setLabel","message","forEach","cause","pattern","indexOf","substring","length","isClosed","done","webSocketMonitor","call","service","_len","arguments","args","Array","_key","langOfFile","fileName","VPLUtil","langType","split","pop","isBinary"],"mappings":";;;;;AAwBAA,gCAAO,CAAC,SAAU,aAAa,SAASC,EAAGC,KASvC,SAASC,WAAWC,WAAYC,OAAQC,MAIpC,YAHaC,IAATD,OACAA,KAAO,QAEJJ,IAAIM,YAAY,6BAA+B,IAAMF,KAAO,gBAAkBF,WAAa,WAAaC,OAAS,WAG5H,IAAII,WAAa,GAGbC,MAAQ,CACRC,QAAS,GACTC,UAAW,IAyGf,OApGAH,WAAWI,KAAO,SAASC,UAAWV,YAClC,OAAoCG,MAAhCG,MAAMI,WAAWV,YACVH,EAAEc,WAAWC,QAAQN,MAAMI,WAAWV,aAAaa,WAE9B,WAAbH,UACXI,MAAMC,cAAc,aAAc,GAAI,GAAIhB,WAAWC,WAAY,KACjEc,MAAMC,cAAc,OAAQ,GAAI,GAAIhB,WAAWC,WAAY,GAAI,oBAElEgB,MAAK,SAASC,UACX,IAAIC,MAAqB,WAAbR,UACRO,SAASC,MAAM,GACfD,SAASC,MAEb,OADAZ,MAAMI,WAAWV,YAAckB,MACxBA,SACRL,WAKXR,WAAWc,KAAO,SAASnB,WAAYoB,OAAQC,WAC3C,OAAOxB,EAAEyB,KAAKxB,IAAIM,YAAY,2CAA4C,CACtEmB,KAAM,CACFC,IAAKxB,WACLoB,OAAQA,OACRC,UAAWA,WAEfI,OAAQ,SACTZ,WAOPR,WAAWqB,KAAO,SAASC,OAAQ3B,WAAYC,OAAQ2B,SAAUC,UAE7D,IAAIC,QAAU,CACVC,QAAShC,WAAWC,WAAYC,QAChC+B,WAAW,EACXC,WAAY,UACZC,UAAW,SAASC,QAChBC,KAAKJ,WAAY,EACjBH,SAASM,SAEbE,MAAO,WAMH,IAAIC,MAAQF,KACZG,YAAW,WACFD,MAAMN,WACPH,SAAS,CAACW,UAAWC,EAAEC,KAAKC,WAAW,mBAAoB,mBAEhE,MAIPC,WAAY,WACR,OAAOhB,UAEXiB,IAAK,SAASC,KAAMC,QAASC,IACzB,IAAIV,MAAQF,KACZR,SAASqB,QAAQF,QAAQG,cAAc,WACnCF,GAAGX,QACEC,MAAMN,WAEPH,SAAS,SA0BzB,OAnBAf,MAAMqC,YAAc,WAChB,IAAIC,QAAS,EACbhB,KAAKiB,SAAW,SAASC,SACH,CAAC,UAAW,eAClBC,SAAQ,SAASC,OACzB,IAAIC,QAAU,IAAMD,MAAQ,KACM,IAA9BF,QAAQI,QAAQD,WAChB3B,QAAQG,WAAauB,MAAQF,QAAQK,UAAUL,QAAQI,QAAQD,SAAWA,QAAQG,aAI9FxB,KAAKC,MAAQ,WACTe,QAAS,GAEbhB,KAAKyB,SAAW,WACZ,OAAOT,SAIRtC,MAAMC,cAAcY,OAAQ,GAAI,GAAIG,QAAQC,SAClD+B,MAAK,SAAS7C,UACXH,MAAMiD,iBAAiB9C,SAAU,GAAI,GAAIa,YAC1CjB,WAGA,CACHmD,KAAM,SAASC,SAEXnD,MAAMqC,YAAc,WAChBf,KAAKiB,SAAW,aAGhBjB,KAAKC,MAAQ,aAGbD,KAAKyB,SAAW,WACZ,OAAO,IAEb,QAAAK,KAAAC,UAAAP,OAZqBQ,SAAIC,MAAAH,OAAAA,UAAAI,OAAAA,KAAAJ,KAAAI,OAAJF,KAAIE,QAAAH,UAAAG,MAc3B,OAAOjE,WAAW4D,YAAYG,OAGlCG,WAAY,SAASC,UACjB,OAAOC,QAAQC,SAASF,SAASG,MAAM,KAAKC,QAGhDC,SAAU,SAASL,UACf,OAAOC,QAAQI,SAASL,WAGpC"}