{"version":3,"file":"vplvnc.min.js","sources":["../src/vplvnc.js"],"sourcesContent":["// This file is part of VPL for Moodle - http://vpl.dis.ulpgc.es/\r\n//\r\n// VPL for Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// VPL for Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with VPL for Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * VNC client control\r\n *\r\n * @copyright 2014 Juan Carlos Rodríguez-del-Pino\r\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @author Juan Carlos Rodríguez-del-Pino <jcrodriguez@dis.ulpgc.es>\r\n */\r\n\r\n/* globals RFB */\r\n/* globals Util */\r\n\r\ndefine(\r\n    [\r\n        'jquery',\r\n        'jqueryui',\r\n        'qtype_savpl/vplutil',\r\n        'qtype_savpl/vplui',\r\n        'qtype_savpl/vplclipboard',\r\n        'core/log'\r\n    ],\r\n    function($, jqui, VPLUtil, VPLUI, VPLClipboard, console) {\r\n        var VPLVNCClient = function(VNCDialogId, str) {\r\n            window.INCLUDE_URI = VPLUtil.options.scriptPath + \"/noVNC/include/\";\r\n            if (typeof Util == 'undefined') {\r\n                VPLUtil.loadScript(['/noVNC/include/util.js'],\r\n                    function() {\r\n                        VPLUtil.log('/noVNC/include/util.js loaded', true);\r\n                        Util.load_scripts([\"webutil.js\", \"base64.js\", \"websock.js\", \"des.js\",\r\n                        \"keysymdef.js\", \"keyboard.js\", \"input.js\", \"display.js\",\r\n                        \"jsunzip.js\", \"rfb.js\", \"keysym.js\"]);\r\n                    }\r\n                );\r\n            }\r\n            var self = this;\r\n            var rfb;\r\n            var title = '';\r\n            var message = '';\r\n            var lastState = '';\r\n            var VNCDialog = $('#' + VNCDialogId);\r\n            var canvas = $('#' + VNCDialogId + \" canvas\");\r\n            var onCloseAction = VPLUtil.doNothing;\r\n            var clipboard;\r\n            var needResize = true;\r\n            var titleText;\r\n            var inputarea = window.document.createElement('input');\r\n            inputarea.style.position = 'absolute';\r\n            inputarea.style.left = '0px';\r\n            inputarea.style.top = '-10000px';\r\n            inputarea.style.width = '1em';\r\n            inputarea.style.height = '1ex';\r\n            inputarea.style.opacity = '0';\r\n            inputarea.style.backgroundColor = 'transparent';\r\n            inputarea.style.borderStyle = 'none';\r\n            inputarea.style.outlineStyle = 'none';\r\n            inputarea.autocapitalize = 'off';\r\n            inputarea.autocomplete = 'off';\r\n            inputarea.autocorrect = 'off';\r\n            inputarea.wrap = 'off';\r\n            inputarea.spellcheck = 'false';\r\n            VNCDialog.append(inputarea);\r\n            /**\r\n             * Event handler of keyboard button.\r\n             */\r\n            function keyboardButton() {\r\n                if ($(inputarea).is(':focus')) {\r\n                    inputarea.blur();\r\n                } else {\r\n                    inputarea.focus();\r\n                }\r\n            }\r\n            /**\r\n             * Event handler of paste button at clipboard.\r\n             */\r\n            function pasteClipboard() {\r\n                if (self.isConnected()) {\r\n                    rfb.clipboardPasteFrom(clipboard.getEntry2());\r\n                }\r\n            }\r\n            /**\r\n             * Event handler of paste button at clipboard.\r\n             *\r\n             * @param {object} rfb vnc client object\r\n             * @param {string} text Text received\r\n             */\r\n            function receiveClipboard(rfb, text) {\r\n                clipboard.setEntry1(text);\r\n            }\r\n            /**\r\n             * Event handler of clipboard button.\r\n             */\r\n            function openClipboard() {\r\n                clipboard.show();\r\n            }\r\n            /**\r\n             * Inform rfb of focus received.\r\n             */\r\n            function getFocus() {\r\n                if (self.isConnected()) {\r\n                    rfb.get_keyboard().set_focused(true);\r\n                }\r\n            }\r\n            /**\r\n             * Inform rfb of focus lost.\r\n             */\r\n            function lostFocus() {\r\n                if (self.isConnected()) {\r\n                    rfb.get_keyboard().set_focused(false);\r\n                }\r\n            }\r\n            /**\r\n             * Tries to do a copy.\r\n             */\r\n            function copyAction() {\r\n                clipboard.setEntry1(clipboard.getEntry1());\r\n                document.execCommand('copy');\r\n            }\r\n            var HTMLUpdateClipboard = VPLUI.genIcon('copy', 'sw') + ' ' + str('copy');\r\n            var HTMLPaste = VPLUI.genIcon('paste', 'sw') + ' ' + str('paste');\r\n            clipboard = new VPLClipboard('vpl_dialog_vnc_clipboard', HTMLUpdateClipboard, copyAction, HTMLPaste, pasteClipboard,\r\n                    lostFocus);\r\n            canvas.on('click', function(e) {\r\n                if (e.target == canvas[0]) {\r\n                    getFocus();\r\n                } else {\r\n                    lostFocus();\r\n                }\r\n            });\r\n            this.displayResize = function() { // TODO hot screen resize.\r\n                if (self.isConnected()) {\r\n                    var w = VNCDialog.width();\r\n                    var h = VNCDialog.height();\r\n                    self.setCanvasSize(w, h);\r\n                    rfb.get_display().viewportChange(0, 0, w, h);\r\n                }\r\n            };\r\n            /**\r\n             * Event handler that limit the size of the vnc client windows.\r\n             *\r\n             */\r\n            function controlDialogSize() {\r\n                // Resize if dialog is large than screen.\r\n                var bw = $('html').width();\r\n                var bh = $(window).height();\r\n                if (VNCDialog.width() > bw) {\r\n                    needResize = true;\r\n                    VNCDialog.dialog(\"option\", \"width\", bw);\r\n                }\r\n                if (VNCDialog.parent().height() > bh) {\r\n                    needResize = true;\r\n                    VNCDialog.dialog(\"option\", \"height\", bh - VNCDialog.prev().outerHeight());\r\n                }\r\n            }\r\n            VNCDialog.dialog({\r\n                closeOnEscape: false,\r\n                autoOpen: false,\r\n                modal: true,\r\n                width: 'auto',\r\n                height: 'auto',\r\n                dialogClass: 'vpl_ide vpl_vnc',\r\n                create: function() {\r\n                    titleText = VPLUI.setTitleBar(VNCDialog, 'vnc', 'graphic', ['clipboard', 'keyboard'], [openClipboard,\r\n                            keyboardButton]);\r\n                },\r\n                dragStop: controlDialogSize,\r\n                focus: getFocus,\r\n                open: controlDialogSize,\r\n                beforeClose: function() {\r\n                    if (needResize) {\r\n                        var w = VNCDialog.width();\r\n                        var h = VNCDialog.height();\r\n                        needResize = false;\r\n                        self.setCanvasSize(w, h);\r\n                    }\r\n                },\r\n                close: function() {\r\n                    self.disconnect();\r\n                },\r\n                resizeStop: function() {\r\n                    controlDialogSize();\r\n                    needResize = true;\r\n                }\r\n            });\r\n            VNCDialog.css(\"padding\", \"1px\");\r\n            VNCDialog.parent().css('z-index', 2000);\r\n            this.updateTitle = function() {\r\n                var text = title;\r\n                if (message !== '') {\r\n                    text += ' (' + message + ')';\r\n                }\r\n                titleText.text(str('console') + \": \" + text);\r\n            };\r\n            this.setTitle = function(t) {\r\n                title = t;\r\n                this.updateTitle();\r\n            };\r\n            this.setMessage = function(t) {\r\n                message = t;\r\n                this.updateTitle();\r\n            };\r\n            /**\r\n             * Event handler to show vnc client state in windows title.\r\n             *\r\n             * @param {object} rfb vnc client\r\n             * @param {string} state Name of the state\r\n             * @param {string} oldstate Name of the old state. Not used\r\n             * @param {string} msg State detail message\r\n             */\r\n            function updateState(rfb, state, oldstate, msg) {\r\n                lastState = state;\r\n                switch (state) {\r\n                    case \"normal\":\r\n                        self.setMessage('');\r\n                        self.setTitle(str('connected'));\r\n                        break;\r\n                    case \"disconnect\":\r\n                    case \"disconnected\":\r\n                        self.setTitle(str('connection_closed'));\r\n                        break;\r\n                    case \"failed\":\r\n                        self.setTitle(str('connection_fail'));\r\n                        console.log(\"VNC client: \" + msg);\r\n                        break;\r\n                    default:\r\n                        self.setMessage('');\r\n                        self.setTitle(str('connecting'));\r\n                }\r\n            }\r\n\r\n            this.connect = function(secure, host, port, password, path, onClose) {\r\n                clipboard.setEntry1('');\r\n                onCloseAction = onClose;\r\n                self.show();\r\n                var target = $('#' + VNCDialogId + \" canvas\")[0];\r\n                if (!rfb) {\r\n                    rfb = new RFB({\r\n                        'target': target,\r\n                        'encrypt': secure,\r\n                        'repeaterID': '',\r\n                        'true_color': true,\r\n                        'local_cursor': true,\r\n                        'shared': false,\r\n                        'view_only': false,\r\n                        'onUpdateState': updateState,\r\n                        'onPasswordRequired': null,\r\n                        'onClipboard': receiveClipboard\r\n                    });\r\n                    rfb.set_local_cursor(rfb.get_display().get_cursor_uri());\r\n                }\r\n                if (!port) {\r\n                    port = secure ? 443 : 80;\r\n                }\r\n                rfb.connect(host, port, password, path);\r\n            };\r\n            this.isOpen = function() {\r\n                return VNCDialog.dialog(\"isOpen\");\r\n            };\r\n            this.close = function() {\r\n                VNCDialog.dialog(\"close\");\r\n            };\r\n            this.isConnected = function() {\r\n                return rfb && lastState != 'disconnected';\r\n            };\r\n            this.disconnect = function() {\r\n                if (rfb) {\r\n                    rfb.disconnect();\r\n                }\r\n                onCloseAction();\r\n                clipboard.hide();\r\n            };\r\n            /**\r\n             * Round a number to event and not less than 100.\r\n             *\r\n             * @param {number} v value to round\r\n             *\r\n             * @returns {int}\r\n             */\r\n            function round(v) {\r\n                if (v < 100) {\r\n                    v = 100;\r\n                }\r\n                return Math.floor(v / 2) * 2;\r\n            }\r\n            this.getCanvasSize = function() {\r\n                return canvas.width() + \"x\" + canvas.height();\r\n            };\r\n\r\n            this.setCanvasSize = function(w, h) {\r\n                canvas.width(round(w));\r\n                canvas.height(round(h));\r\n            };\r\n            this.show = function() {\r\n                VNCDialog.dialog('open');\r\n                VNCDialog.width('auto');\r\n                VNCDialog.height('auto');\r\n            };\r\n            self.setCanvasSize($(window).width() - 150, $(window).height() - 150);\r\n        };\r\n        return VPLVNCClient;\r\n    }\r\n);\r\n"],"names":["define","$","jqui","VPLUtil","VPLUI","VPLClipboard","console","VNCDialogId","str","window","INCLUDE_URI","options","scriptPath","Util","loadScript","log","load_scripts","rfb","clipboard","titleText","self","this","title","message","lastState","VNCDialog","canvas","onCloseAction","doNothing","needResize","inputarea","document","createElement","keyboardButton","is","blur","focus","receiveClipboard","text","setEntry1","openClipboard","show","getFocus","isConnected","get_keyboard","set_focused","lostFocus","style","position","left","top","width","height","opacity","backgroundColor","borderStyle","outlineStyle","autocapitalize","autocomplete","autocorrect","wrap","spellcheck","append","HTMLUpdateClipboard","genIcon","HTMLPaste","controlDialogSize","bw","bh","dialog","parent","prev","outerHeight","updateState","state","oldstate","msg","setMessage","setTitle","round","v","Math","floor","getEntry1","execCommand","clipboardPasteFrom","getEntry2","on","e","target","displayResize","w","h","setCanvasSize","get_display","viewportChange","closeOnEscape","autoOpen","modal","dialogClass","create","setTitleBar","dragStop","open","beforeClose","close","disconnect","resizeStop","css","updateTitle","t","connect","secure","host","port","password","path","onClose","RFB","encrypt","repeaterID","true_color","local_cursor","shared","view_only","onUpdateState","onPasswordRequired","onClipboard","set_local_cursor","get_cursor_uri","isOpen","hide","getCanvasSize"],"mappings":";;;;;;;AA0BAA,4BACI,CACI,SACA,WACA,sBACA,oBACA,2BACA,aAEJ,SAASC,EAAGC,KAAMC,QAASC,MAAOC,aAAcC,SAqR5C,OApRmB,SAASC,YAAaC,KACrCC,OAAOC,YAAcP,QAAQQ,QAAQC,WAAa,kBAC/B,oBAARC,MACPV,QAAQW,WAAW,CAAC,2BAChB,WACIX,QAAQY,IAAI,iCAAiC,GAC7CF,KAAKG,aAAa,CAAC,aAAc,YAAa,aAAc,SAC5D,eAAgB,cAAe,WAAY,aAC3C,aAAc,SAAU,iBAIpC,IACIC,IAOAC,UAEAC,UAVAC,KAAOC,KAEPC,MAAQ,GACRC,QAAU,GACVC,UAAY,GACZC,UAAYxB,EAAE,IAAMM,aACpBmB,OAASzB,EAAE,IAAMM,YAAc,WAC/BoB,cAAgBxB,QAAQyB,UAExBC,YAAa,EAEbC,UAAYrB,OAAOsB,SAASC,cAAc,SAmB9C,SAASC,iBACDhC,EAAE6B,WAAWI,GAAG,UAChBJ,UAAUK,OAEVL,UAAUM,QAiBlB,SAASC,iBAAiBpB,IAAKqB,MAC3BpB,UAAUqB,UAAUD,MAKxB,SAASE,gBACLtB,UAAUuB,OAKd,SAASC,WACDtB,KAAKuB,eACL1B,IAAI2B,eAAeC,aAAY,GAMvC,SAASC,YACD1B,KAAKuB,eACL1B,IAAI2B,eAAeC,aAAY,GA7DvCf,UAAUiB,MAAMC,SAAW,WAC3BlB,UAAUiB,MAAME,KAAO,MACvBnB,UAAUiB,MAAMG,IAAM,WACtBpB,UAAUiB,MAAMI,MAAQ,MACxBrB,UAAUiB,MAAMK,OAAS,MACzBtB,UAAUiB,MAAMM,QAAU,IAC1BvB,UAAUiB,MAAMO,gBAAkB,cAClCxB,UAAUiB,MAAMQ,YAAc,OAC9BzB,UAAUiB,MAAMS,aAAe,OAC/B1B,UAAU2B,eAAiB,MAC3B3B,UAAU4B,aAAe,MACzB5B,UAAU6B,YAAc,MACxB7B,UAAU8B,KAAO,MACjB9B,UAAU+B,WAAa,QACvBpC,UAAUqC,OAAOhC,WAyDjB,IAAIiC,oBAAsB3D,MAAM4D,QAAQ,OAAQ,MAAQ,IAAMxD,IAAI,QAC9DyD,UAAY7D,MAAM4D,QAAQ,QAAS,MAAQ,IAAMxD,IAAI,SAsBzD,SAAS0D,oBAEL,IAAIC,GAAKlE,EAAE,QAAQkD,QACfiB,GAAKnE,EAAEQ,QAAQ2C,SACf3B,UAAU0B,QAAUgB,KACpBtC,YAAa,EACbJ,UAAU4C,OAAO,SAAU,QAASF,KAEpC1C,UAAU6C,SAASlB,SAAWgB,KAC9BvC,YAAa,EACbJ,UAAU4C,OAAO,SAAU,SAAUD,GAAK3C,UAAU8C,OAAOC,gBA0DnE,SAASC,YAAYxD,IAAKyD,MAAOC,SAAUC,KAEvC,OADApD,UAAYkD,MACJA,OACJ,IAAK,SACDtD,KAAKyD,WAAW,IAChBzD,KAAK0D,SAAStE,IAAI,cAClB,MACJ,IAAK,aACL,IAAK,eACDY,KAAK0D,SAAStE,IAAI,sBAClB,MACJ,IAAK,SACDY,KAAK0D,SAAStE,IAAI,oBAClBF,QAAQS,IAAI,eAAiB6D,KAC7B,MACJ,QACIxD,KAAKyD,WAAW,IAChBzD,KAAK0D,SAAStE,IAAI,gBAoD9B,SAASuE,MAAMC,GAIX,OAHIA,EAAI,MACJA,EAAI,KAEmB,EAApBC,KAAKC,MAAMF,EAAI,GAlK1B9D,UAAY,IAAIb,aAAa,2BAA4B0D,qBANzD,WACI7C,UAAUqB,UAAUrB,UAAUiE,aAC9BpD,SAASqD,YAAY,UAIiEnB,WA7C1F,WACQ7C,KAAKuB,eACL1B,IAAIoE,mBAAmBnE,UAAUoE,eA4CjCxC,WACRpB,OAAO6D,GAAG,SAAS,SAASC,GACpBA,EAAEC,QAAU/D,OAAO,GACnBgB,WAEAI,eAGRzB,KAAKqE,cAAgB,WACjB,GAAItE,KAAKuB,cAAe,CACpB,IAAIgD,EAAIlE,UAAU0B,QACdyC,EAAInE,UAAU2B,SAClBhC,KAAKyE,cAAcF,EAAGC,GACtB3E,IAAI6E,cAAcC,eAAe,EAAG,EAAGJ,EAAGC,KAoBlDnE,UAAU4C,OAAO,CACb2B,eAAe,EACfC,UAAU,EACVC,OAAO,EACP/C,MAAO,OACPC,OAAQ,OACR+C,YAAa,kBACbC,OAAQ,WACJjF,UAAYf,MAAMiG,YAAY5E,UAAW,MAAO,UAAW,CAAC,YAAa,YAAa,CAACe,cAC/EP,kBAEZqE,SAAUpC,kBACV9B,MAAOM,SACP6D,KAAMrC,kBACNsC,YAAa,WACT,GAAI3E,WAAY,CACZ,IAAI8D,EAAIlE,UAAU0B,QACdyC,EAAInE,UAAU2B,SAClBvB,YAAa,EACbT,KAAKyE,cAAcF,EAAGC,KAG9Ba,MAAO,WACHrF,KAAKsF,cAETC,WAAY,WACRzC,oBACArC,YAAa,KAGrBJ,UAAUmF,IAAI,UAAW,OACzBnF,UAAU6C,SAASsC,IAAI,UAAW,KAClCvF,KAAKwF,YAAc,WACf,IAAIvE,KAAOhB,MACK,KAAZC,UACAe,MAAQ,KAAOf,QAAU,KAE7BJ,UAAUmB,KAAK9B,IAAI,WAAa,KAAO8B,OAE3CjB,KAAKyD,SAAW,SAASgC,GACrBxF,MAAQwF,EACRzF,KAAKwF,eAETxF,KAAKwD,WAAa,SAASiC,GACvBvF,QAAUuF,EACVzF,KAAKwF,eA+BTxF,KAAK0F,QAAU,SAASC,OAAQC,KAAMC,KAAMC,SAAUC,KAAMC,SACxDnG,UAAUqB,UAAU,IACpBZ,cAAgB0F,QAChBjG,KAAKqB,OACL,IAAIgD,OAASxF,EAAE,IAAMM,YAAc,WAAW,GACzCU,MACDA,IAAM,IAAIqG,IAAI,CACV7B,OAAUA,OACV8B,QAAWP,OACXQ,WAAc,GACdC,YAAc,EACdC,cAAgB,EAChBC,QAAU,EACVC,WAAa,EACbC,cAAiBpD,YACjBqD,mBAAsB,KACtBC,YAAe1F,oBAEf2F,iBAAiB/G,IAAI6E,cAAcmC,kBAEtCf,OACDA,KAAOF,OAAS,IAAM,IAE1B/F,IAAI8F,QAAQE,KAAMC,KAAMC,SAAUC,OAEtC/F,KAAK6G,OAAS,WACV,OAAOzG,UAAU4C,OAAO,WAE5BhD,KAAKoF,MAAQ,WACThF,UAAU4C,OAAO,UAErBhD,KAAKsB,YAAc,WACf,OAAO1B,KAAoB,gBAAbO,WAElBH,KAAKqF,WAAa,WACVzF,KACAA,IAAIyF,aAER/E,gBACAT,UAAUiH,QAed9G,KAAK+G,cAAgB,WACjB,OAAO1G,OAAOyB,QAAU,IAAMzB,OAAO0B,UAGzC/B,KAAKwE,cAAgB,SAASF,EAAGC,GAC7BlE,OAAOyB,MAAM4B,MAAMY,IACnBjE,OAAO0B,OAAO2B,MAAMa,KAExBvE,KAAKoB,KAAO,WACRhB,UAAU4C,OAAO,QACjB5C,UAAU0B,MAAM,QAChB1B,UAAU2B,OAAO,SAErBhC,KAAKyE,cAAc5F,EAAEQ,QAAQ0C,QAAU,IAAKlD,EAAEQ,QAAQ2C,SAAW,KAGzE"}