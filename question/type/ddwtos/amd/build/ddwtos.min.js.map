{"version":3,"file":"ddwtos.min.js","sources":["../src/ddwtos.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * JavaScript to make drag-drop into text questions work.\r\n *\r\n * Some vocabulary to help understand this code:\r\n *\r\n * The question text contains 'drops' - blanks into which the 'drags', the missing\r\n * words, can be put.\r\n *\r\n * The thing that can be moved into the drops are called 'drags'. There may be\r\n * multiple copies of the 'same' drag which does not really cause problems.\r\n * Each drag has a 'choice' number which is the value set on the drop's hidden\r\n * input when this drag is placed in a drop.\r\n *\r\n * These may be in separate 'groups', distinguished by colour.\r\n * Things can only interact with other things in the same group.\r\n * The groups are numbered from 1.\r\n *\r\n * The place where a given drag started from is called its 'home'.\r\n *\r\n * @module     qtype_ddwtos/ddwtos\r\n * @copyright  2018 The Open University\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      3.6\r\n */\r\ndefine([\r\n    'jquery',\r\n    'core/dragdrop',\r\n    'core/key_codes',\r\n    'core_form/changechecker',\r\n    'core_filters/events',\r\n], function(\r\n    $,\r\n    dragDrop,\r\n    keys,\r\n    FormChangeChecker,\r\n    filterEvent\r\n) {\r\n\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Object to handle one drag-drop into text question.\r\n     *\r\n     * @param {String} containerId id of the outer div for this question.\r\n     * @param {boolean} readOnly whether the question is being displayed read-only.\r\n     * @constructor\r\n     */\r\n    function DragDropToTextQuestion(containerId, readOnly) {\r\n        const thisQ = this;\r\n        this.containerId = containerId;\r\n        this.questionAnswer = {};\r\n        this.questionDragDropWidthHeight = [];\r\n        if (readOnly) {\r\n            this.getRoot().addClass('qtype_ddwtos-readonly');\r\n        }\r\n        this.resizeAllDragsAndDrops();\r\n        this.cloneDrags();\r\n        this.positionDrags();\r\n        // Wait for all dynamic content loaded by filter to be completed.\r\n        document.addEventListener(filterEvent.eventTypes.filterContentRenderingComplete, (elements) => {\r\n            elements.detail.nodes.forEach((element) => {\r\n                thisQ.changeAllDragsAndDropsToFilteredContent(element);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Check is mobile\r\n     * @returns {any}\r\n     */\r\n    function isMobile() {\r\n        const regex = /Mobi|Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i;\r\n        return regex.test(navigator.userAgent);\r\n    }\r\n    /**\r\n     * In each group, resize all the items to be the same size.\r\n     */\r\n    DragDropToTextQuestion.prototype.resizeAllDragsAndDrops = function() {\r\n        var thisQ = this;\r\n        this.getRoot().find('.answercontainer > div').each(function(i, node) {\r\n            thisQ.resizeAllDragsAndDropsInGroup(\r\n                thisQ.getClassnameNumericSuffix($(node), 'draggrouphomes'));\r\n        });\r\n    };\r\n\r\n    /**\r\n     * In a given group, set all the drags and drops to be the same size.\r\n     *\r\n     * @param {int} group the group number.\r\n     */\r\n    DragDropToTextQuestion.prototype.resizeAllDragsAndDropsInGroup = function(group) {\r\n        var thisQ = this,\r\n            dragDropItems = this.getRoot().find('span.group' + group),\r\n            maxWidth = 0,\r\n            maxHeight = 0;\r\n\r\n        // Find the maximum size of any drag in this groups.\r\n        dragDropItems.each(function(i, drag) {\r\n            maxWidth = Math.max(maxWidth, Math.ceil(drag.offsetWidth));\r\n            maxHeight = Math.max(maxHeight, Math.ceil(0 + drag.offsetHeight));\r\n        });\r\n\r\n        // The size we will want to set is a bit bigger than this.\r\n        maxWidth += 8;\r\n        maxHeight += 2;\r\n        thisQ.questionDragDropWidthHeight[group] = {maxWidth: maxWidth, maxHeight: maxHeight};\r\n        // Set each drag home to that size.\r\n        dragDropItems.each(function(i, drag) {\r\n            thisQ.setElementSize(drag, maxWidth, maxHeight);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Change all the drags and drops related to the item that has been changed by filter to correct size and content.\r\n     *\r\n     *  @param {object} filteredElement the element has been modified by filter.\r\n     */\r\n    DragDropToTextQuestion.prototype.changeAllDragsAndDropsToFilteredContent = function(filteredElement) {\r\n        let currentFilteredItem = $(filteredElement);\r\n        const parentIsDD = currentFilteredItem.parent().closest('span').hasClass('placed') ||\r\n            currentFilteredItem.parent().closest('span').hasClass('draghome');\r\n        const isDD = currentFilteredItem.hasClass('placed') || currentFilteredItem.hasClass('draghome');\r\n        // The filtered element or parent element should a drag or drop item.\r\n        if (!parentIsDD && !isDD) {\r\n            return;\r\n        }\r\n        if (parentIsDD) {\r\n            currentFilteredItem = currentFilteredItem.parent().closest('span');\r\n        }\r\n        const thisQ = this;\r\n        if (thisQ.getRoot().find(currentFilteredItem).length <= 0) {\r\n            // If the DD item doesn't belong to this question\r\n            // In case we have multiple questions in the same page.\r\n            return;\r\n        }\r\n        const group = thisQ.getGroup(currentFilteredItem),\r\n              choice = thisQ.getChoice(currentFilteredItem);\r\n        let listOfModifiedDragDrop = [];\r\n        // Get the list of drag and drop item within the same group and choice.\r\n        this.getRoot().find('.group' + group + '.choice' + choice).each(function(i, node) {\r\n            // Same modified item, skip it.\r\n            if ($(node).get(0) === currentFilteredItem.get(0)) {\r\n                return;\r\n            }\r\n            const originalClass = $(node).attr('class');\r\n            const originalStyle = $(node).attr('style');\r\n            // We want to keep all the handler and event for filtered item, so using clone is the only choice.\r\n            const filteredDragDropClone = currentFilteredItem.clone();\r\n            // Replace the class and style of the drag drop item we want to replace for the clone.\r\n            filteredDragDropClone.attr('class', originalClass);\r\n            filteredDragDropClone.attr('style', originalStyle);\r\n            // Insert into DOM.\r\n            $(node).before(filteredDragDropClone);\r\n            // Add the item has been replaced to a list so we can remove it later.\r\n            listOfModifiedDragDrop.push(node);\r\n        });\r\n\r\n        listOfModifiedDragDrop.forEach(function(node) {\r\n            $(node).remove();\r\n        });\r\n        // Save the current height and width.\r\n        const currentHeight = currentFilteredItem.height();\r\n        const currentWidth = currentFilteredItem.width();\r\n        // Set to auto so we can get the real height and width of the filtered item.\r\n        currentFilteredItem.height('auto');\r\n        currentFilteredItem.width('auto');\r\n        // We need to set display block so we can get height and width.\r\n        // Some browser can't get the offsetWidth/Height if they are an inline element like span tag.\r\n        if (!filteredElement.offsetWidth || !filteredElement.offsetHeight) {\r\n            filteredElement.classList.add('d-block');\r\n        }\r\n        if (thisQ.questionDragDropWidthHeight[group].maxWidth < Math.ceil(filteredElement.offsetWidth) ||\r\n            thisQ.questionDragDropWidthHeight[group].maxHeight < Math.ceil(0 + filteredElement.offsetHeight)) {\r\n            // Remove the d-block class before calculation.\r\n            filteredElement.classList.remove('d-block');\r\n            // Now resize all the items in the same group if we have new maximum width or height.\r\n            thisQ.resizeAllDragsAndDropsInGroup(group);\r\n        } else {\r\n            // Return the original height and width in case the real height and width is not the maximum.\r\n            currentFilteredItem.height(currentHeight);\r\n            currentFilteredItem.width(currentWidth);\r\n        }\r\n        // Remove the d-block class after resize.\r\n        filteredElement.classList.remove('d-block');\r\n    };\r\n\r\n    /**\r\n     * Set a given DOM element to be a particular size.\r\n     *\r\n     * @param {HTMLElement} element\r\n     * @param {int} width\r\n     * @param {int} height\r\n     */\r\n    DragDropToTextQuestion.prototype.setElementSize = function(element, width, height) {\r\n        $(element).width('auto').height(height).css('lineHeight', height + 'px').css('minWidth', width + 'px');\r\n\r\n    };\r\n\r\n    /**\r\n     * Invisible 'drag homes' are output by the renderer. These have the same properties\r\n     * as the drag items but are invisible. We clone these invisible elements to make the\r\n     * actual drag items.\r\n     */\r\n    DragDropToTextQuestion.prototype.cloneDrags = function() {\r\n        var thisQ = this;\r\n        thisQ.getRoot().find('span.draghome').each(function(index, draghome) {\r\n            var drag = $(draghome);\r\n            var placeHolder = drag.clone();\r\n            placeHolder.removeClass();\r\n            placeHolder.addClass('draghome choice' +\r\n                thisQ.getChoice(drag) + ' group' +\r\n                thisQ.getGroup(drag) + ' dragplaceholder');\r\n            drag.before(placeHolder);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Update the position of drags.\r\n     */\r\n    DragDropToTextQuestion.prototype.positionDrags = function() {\r\n        var thisQ = this,\r\n            root = this.getRoot();\r\n\r\n        // First move all items back home.\r\n        root.find('span.draghome').not('.dragplaceholder').each(function(i, dragNode) {\r\n            var drag = $(dragNode),\r\n                currentPlace = thisQ.getClassnameNumericSuffix(drag, 'inplace');\r\n            drag.addClass('unplaced')\r\n                .removeClass('placed');\r\n            drag.removeAttr('tabindex');\r\n            if (currentPlace !== null) {\r\n                drag.removeClass('inplace' + currentPlace);\r\n            }\r\n        });\r\n\r\n        // Then place the once that should be placed.\r\n        root.find('input.placeinput').each(function(i, inputNode) {\r\n            var input = $(inputNode),\r\n                choice = input.val(),\r\n                place = thisQ.getPlace(input);\r\n\r\n            // Record the last known position of the drop.\r\n            var drop = root.find('.drop.place' + place),\r\n                dropPosition = drop.offset();\r\n            drop.data('prev-top', dropPosition.top).data('prev-left', dropPosition.left);\r\n\r\n            if (choice === '0') {\r\n                // No item in this place.\r\n                return;\r\n            }\r\n\r\n            // Get the unplaced drag.\r\n            var unplacedDrag = thisQ.getUnplacedChoice(thisQ.getGroup(input), choice);\r\n            // Get the clone of the drag.\r\n            var hiddenDrag = thisQ.getDragClone(unplacedDrag);\r\n            if (hiddenDrag.length) {\r\n                if (unplacedDrag.hasClass('infinite')) {\r\n                    var noOfDrags = thisQ.noOfDropsInGroup(thisQ.getGroup(unplacedDrag));\r\n                    var cloneDrags = thisQ.getInfiniteDragClones(unplacedDrag, false);\r\n                    if (cloneDrags.length < noOfDrags) {\r\n                        var cloneDrag = unplacedDrag.clone();\r\n                        hiddenDrag.after(cloneDrag);\r\n                        questionManager.addEventHandlersToDrag(cloneDrag);\r\n                    } else {\r\n                        hiddenDrag.addClass('active');\r\n                    }\r\n                } else {\r\n                    hiddenDrag.addClass('active');\r\n                }\r\n            }\r\n            // Send the drag to drop.\r\n            thisQ.sendDragToDrop(thisQ.getUnplacedChoice(thisQ.getGroup(input), choice), drop);\r\n        });\r\n\r\n        // Save the question answer.\r\n        thisQ.questionAnswer = thisQ.getQuestionAnsweredValues();\r\n    };\r\n\r\n    /**\r\n     * Get the question answered values.\r\n     *\r\n     * @return {Object} Contain key-value with key is the input id and value is the input value.\r\n     */\r\n    DragDropToTextQuestion.prototype.getQuestionAnsweredValues = function() {\r\n        let result = {};\r\n        this.getRoot().find('input.placeinput').each((i, inputNode) => {\r\n            result[inputNode.id] = inputNode.value;\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Check if the question is being interacted or not.\r\n     *\r\n     * @return {boolean} Return true if the user has changed the question-answer.\r\n     */\r\n    DragDropToTextQuestion.prototype.isQuestionInteracted = function() {\r\n        const oldAnswer = this.questionAnswer;\r\n        const newAnswer = this.getQuestionAnsweredValues();\r\n        let isInteracted = false;\r\n\r\n        // First, check both answers have the same structure or not.\r\n        if (JSON.stringify(newAnswer) !== JSON.stringify(oldAnswer)) {\r\n            isInteracted = true;\r\n            return isInteracted;\r\n        }\r\n        // Check the values.\r\n        Object.keys(newAnswer).forEach(key => {\r\n            if (newAnswer[key] !== oldAnswer[key]) {\r\n                isInteracted = true;\r\n            }\r\n        });\r\n\r\n        return isInteracted;\r\n    };\r\n\r\n    /**\r\n     * Handles the start of dragging an item.\r\n     *\r\n     * @param {Event} e the touch start or mouse down event.\r\n     */\r\n    DragDropToTextQuestion.prototype.handleDragStart = function(e) {\r\n        var thisQ = this,\r\n            drag = $(e.target).closest('.draghome');\r\n\r\n        var info = dragDrop.prepare(e);\r\n        if (!info.start || drag.hasClass('beingdragged')) {\r\n            return;\r\n        }\r\n\r\n        drag.addClass('beingdragged');\r\n        var currentPlace = this.getClassnameNumericSuffix(drag, 'inplace');\r\n        if (currentPlace !== null) {\r\n            this.setInputValue(currentPlace, 0);\r\n            drag.removeClass('inplace' + currentPlace);\r\n            var hiddenDrop = thisQ.getDrop(drag, currentPlace);\r\n            if (hiddenDrop.length) {\r\n                hiddenDrop.addClass('active');\r\n                drag.offset(hiddenDrop.offset());\r\n            }\r\n        } else {\r\n            var hiddenDrag = thisQ.getDragClone(drag);\r\n            if (hiddenDrag.length) {\r\n                if (drag.hasClass('infinite')) {\r\n                    var noOfDrags = this.noOfDropsInGroup(this.getGroup(drag));\r\n                    var cloneDrags = this.getInfiniteDragClones(drag, false);\r\n                    if (cloneDrags.length < noOfDrags) {\r\n                        var cloneDrag = drag.clone();\r\n                        cloneDrag.removeClass('beingdragged');\r\n                        hiddenDrag.after(cloneDrag);\r\n                        questionManager.addEventHandlersToDrag(cloneDrag);\r\n                        drag.offset(cloneDrag.offset());\r\n                    } else {\r\n                        hiddenDrag.addClass('active');\r\n                        drag.offset(hiddenDrag.offset());\r\n                    }\r\n                } else {\r\n                    hiddenDrag.addClass('active');\r\n                    drag.offset(hiddenDrag.offset());\r\n                }\r\n            }\r\n        }\r\n\r\n        dragDrop.start(e, drag, function(x, y, drag) {\r\n            thisQ.dragMove(x, y, drag);\r\n        }, function(x, y, drag) {\r\n            thisQ.dragEnd(x, y, drag);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Called whenever the currently dragged items moves.\r\n     *\r\n     * @param {Number} pageX the x position.\r\n     * @param {Number} pageY the y position.\r\n     * @param {jQuery} drag the item being moved.\r\n     */\r\n    DragDropToTextQuestion.prototype.dragMove = function(pageX, pageY, drag) {\r\n        var thisQ = this;\r\n        this.getRoot().find('span.group' + this.getGroup(drag)).not('.beingdragged').each(function(i, dropNode) {\r\n            var drop = $(dropNode);\r\n            if (thisQ.isPointInDrop(pageX, pageY, drop)) {\r\n                drop.addClass('valid-drag-over-drop');\r\n            } else {\r\n                drop.removeClass('valid-drag-over-drop');\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Called when user drops a drag item.\r\n     *\r\n     * @param {Number} pageX the x position.\r\n     * @param {Number} pageY the y position.\r\n     * @param {jQuery} drag the item being moved.\r\n     */\r\n    DragDropToTextQuestion.prototype.dragEnd = function(pageX, pageY, drag) {\r\n        var thisQ = this,\r\n            root = this.getRoot(),\r\n            placed = false;\r\n        root.find('span.group' + this.getGroup(drag)).not('.beingdragged').each(function(i, dropNode) {\r\n            if (placed) {\r\n                return false;\r\n            }\r\n            const dropZone = $(dropNode);\r\n            if (!thisQ.isPointInDrop(pageX, pageY, dropZone)) {\r\n                // Not this drop zone.\r\n                return true;\r\n            }\r\n            let drop = null;\r\n            if (dropZone.hasClass('placed')) {\r\n                // This is an placed drag item in a drop.\r\n                dropZone.removeClass('valid-drag-over-drop');\r\n                // Get the correct drop.\r\n                drop = thisQ.getDrop(drag, thisQ.getClassnameNumericSuffix(dropZone, 'inplace'));\r\n            } else {\r\n                // Empty drop.\r\n                drop = dropZone;\r\n            }\r\n            // Now put this drag into the drop.\r\n            drop.removeClass('valid-drag-over-drop');\r\n            thisQ.sendDragToDrop(drag, drop);\r\n            placed = true;\r\n            return false; // Stop the each() here.\r\n        });\r\n        if (!placed) {\r\n            this.sendDragHome(drag);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Animate a drag item into a given place (or back home).\r\n     *\r\n     * @param {jQuery|null} drag the item to place. If null, clear the place.\r\n     * @param {jQuery} drop the place to put it.\r\n     */\r\n    DragDropToTextQuestion.prototype.sendDragToDrop = function(drag, drop) {\r\n        // Send drag home if there is no place in drop.\r\n        if (this.getPlace(drop) === null) {\r\n            this.sendDragHome(drag);\r\n            return;\r\n        }\r\n\r\n        // Is there already a drag in this drop? if so, evict it.\r\n        var oldDrag = this.getCurrentDragInPlace(this.getPlace(drop));\r\n        if (oldDrag.length !== 0) {\r\n            var currentPlace = this.getClassnameNumericSuffix(oldDrag, 'inplace');\r\n            // When infinite group and there is already a drag in a drop, reject the exact clone in the same drop.\r\n            if (this.hasDropSameDrag(currentPlace, drop, oldDrag, drag)) {\r\n                this.sendDragHome(drag);\r\n                return;\r\n            }\r\n            var hiddenDrop = this.getDrop(oldDrag, currentPlace);\r\n            hiddenDrop.addClass('active');\r\n            oldDrag.addClass('beingdragged');\r\n            oldDrag.offset(hiddenDrop.offset());\r\n            this.sendDragHome(oldDrag);\r\n        }\r\n\r\n        if (drag.length === 0) {\r\n            this.setInputValue(this.getPlace(drop), 0);\r\n            if (drop.data('isfocus')) {\r\n                drop.focus();\r\n            }\r\n        } else {\r\n            // Prevent the drag item drop into two drop-zone.\r\n            if (this.getClassnameNumericSuffix(drag, 'inplace')) {\r\n                return;\r\n            }\r\n\r\n            this.setInputValue(this.getPlace(drop), this.getChoice(drag));\r\n            drag.removeClass('unplaced')\r\n                .addClass('placed inplace' + this.getPlace(drop));\r\n            drag.attr('tabindex', 0);\r\n            this.animateTo(drag, drop);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * When infinite group and there is already a drag in a drop, reject the exact clone in the same drop.\r\n     *\r\n     * @param {int} currentPlace  the position of the current drop.\r\n     * @param {jQuery} drop the drop containing a drag.\r\n     * @param {jQuery} oldDrag the drag already placed in drop.\r\n     * @param {jQuery} drag the new drag which is exactly the same (clone) as oldDrag .\r\n     * @returns {boolean}\r\n     */\r\n    DragDropToTextQuestion.prototype.hasDropSameDrag = function(currentPlace, drop, oldDrag, drag) {\r\n        if (drag.hasClass('infinite')) {\r\n            return drop.hasClass('place' + currentPlace) &&\r\n                this.getGroup(drag) === this.getGroup(drop) &&\r\n                this.getChoice(drag) === this.getChoice(oldDrag) &&\r\n                this.getGroup(drag) === this.getGroup(oldDrag);\r\n        }\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Animate a drag back to its home.\r\n     *\r\n     * @param {jQuery} drag the item being moved.\r\n     */\r\n    DragDropToTextQuestion.prototype.sendDragHome = function(drag) {\r\n        var currentPlace = this.getClassnameNumericSuffix(drag, 'inplace');\r\n        if (currentPlace !== null) {\r\n            drag.removeClass('inplace' + currentPlace);\r\n        }\r\n        drag.data('unplaced', true);\r\n\r\n        this.animateTo(drag, this.getDragHome(this.getGroup(drag), this.getChoice(drag)));\r\n    };\r\n\r\n    /**\r\n     * Handles mobile events on drops.\r\n     *\r\n     * @param {KeyboardEvent} e\r\n     */\r\n    DragDropToTextQuestion.prototype.handleMobileDropClick = function(e) {\r\n        var drop = $(e.target).closest('.drop');\r\n\r\n        if (questionManager.mobileClickNdrop.currentDrop) {\r\n            questionManager.mobileClickNdrop.currentDrop.focus();\r\n        }\r\n        drop.focus();\r\n        questionManager.mobileClickNdrop.currentDrop = drop;\r\n\r\n        if (drop.length === 0) {\r\n            var placedDrag = $(e.target);\r\n            var currentPlace = this.getClassnameNumericSuffix(placedDrag, 'inplace');\r\n            if (currentPlace !== null) {\r\n                drop = this.getDrop(placedDrag, currentPlace);\r\n            }\r\n        }\r\n\r\n        e.preventDefault();\r\n    };\r\n\r\n    /**\r\n     * Handles mobile events on drops.\r\n     *\r\n     * @param {KeyboardEvent} e\r\n     */\r\n    DragDropToTextQuestion.prototype.handleMobileDropSwapClick = function(e) {\r\n        $(e.currentTarget).focus();\r\n        var drop = $(e.currentTarget).prev();\r\n        if (drop.hasClass('drop')) {\r\n            var place = this.getPlace(drop);\r\n            var oldDrag = this.getCurrentDragInPlace(place);\r\n            \r\n            // Handle second tap on a filled drop: clear the answer and return the drag.\r\n            if (oldDrag.length > 0) {\r\n                this.setInputValue(place, 0);\r\n                var hiddenDrop = this.getDrop(oldDrag, place);\r\n                hiddenDrop.addClass('active');\r\n                oldDrag.addClass('beingdragged');\r\n                oldDrag.offset(hiddenDrop.offset());\r\n                this.sendDragHome(oldDrag);\r\n                questionManager.mobileClickNdrop.currentDrop = null;\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n    \r\n            // Otherwise, treat as a regular drop selection\r\n            if (questionManager.mobileClickNdrop.currentDrop) {\r\n                questionManager.mobileClickNdrop.currentDrop.focus();\r\n            }\r\n            drop.focus();\r\n            questionManager.mobileClickNdrop.currentDrop = drop;\r\n\r\n            if (drop.length === 0) {\r\n                var placedDrag = $(e.target);\r\n                var currentPlace = this.getClassnameNumericSuffix(placedDrag, 'inplace');\r\n                if (currentPlace !== null) {\r\n                    drop = this.getDrop(placedDrag, currentPlace);\r\n                }\r\n            }\r\n\r\n            e.preventDefault();\r\n        }\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Handles mobile events on draghomes.\r\n     *\r\n     * @param {KeyboardEvent} e\r\n     */\r\n    DragDropToTextQuestion.prototype.handleMobileDragClick = function(e) {\r\n        var draghome = $(e.target).closest('.draghome');\r\n\r\n        if (draghome && questionManager.mobileClickNdrop.currentDrop) {\r\n\r\n            questionManager.mobileClickNdrop.currentDrag = draghome;\r\n            draghome.data('isfocus', true);\r\n            draghome.addClass('beingdragged');\r\n            var hiddenDrag = this.getDragClone(draghome);\r\n            if (hiddenDrag.length) {\r\n                if (draghome.hasClass('infinite')) {\r\n                    var noOfDrags = this.noOfDropsInGroup(this.getGroup(draghome));\r\n                    var cloneDrags = this.getInfiniteDragClones(draghome, false);\r\n                    if (cloneDrags.length < noOfDrags) {\r\n                        var cloneDrag = draghome.clone();\r\n                        cloneDrag.removeClass('beingdragged');\r\n                        cloneDrag.removeAttr('tabindex');\r\n                        hiddenDrag.after(cloneDrag);\r\n                        questionManager.addEventHandlersToDrag(cloneDrag);\r\n                        draghome.offset(cloneDrag.offset());\r\n                    } else {\r\n                        hiddenDrag.addClass('active');\r\n                        draghome.offset(hiddenDrag.offset());\r\n                    }\r\n                } else {\r\n                    hiddenDrag.addClass('active');\r\n                    draghome.offset(hiddenDrag.offset());\r\n                }\r\n            }\r\n            this.sendDragToDrop(draghome, questionManager.mobileClickNdrop.currentDrop);\r\n        }\r\n\r\n        // If (drop.length === 0) {\r\n        //     var placedDrag = $(e.target);\r\n        //     var currentPlace = this.getClassnameNumericSuffix(placedDrag, 'inplace');\r\n        //     if (currentPlace !== null) {\r\n        //         drop = this.getDrop(placedDrag, currentPlace);\r\n        //     }\r\n        // }\r\n\r\n        e.preventDefault();\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Handles keyboard events on drops.\r\n     *\r\n     * Drops are focusable. Once focused, right/down/space switches to the next choice, and\r\n     * left/up switches to the previous. Escape clear.\r\n     *\r\n     * @param {KeyboardEvent} e\r\n     */\r\n    DragDropToTextQuestion.prototype.handleKeyPress = function(e) {\r\n        var drop = $(e.target).closest('.drop');\r\n        if (drop.length === 0) {\r\n            var placedDrag = $(e.target);\r\n            var currentPlace = this.getClassnameNumericSuffix(placedDrag, 'inplace');\r\n            if (currentPlace !== null) {\r\n                drop = this.getDrop(placedDrag, currentPlace);\r\n            }\r\n        }\r\n        var currentDrag = this.getCurrentDragInPlace(this.getPlace(drop)),\r\n            nextDrag = $();\r\n\r\n        switch (e.keyCode) {\r\n            case keys.space:\r\n            case keys.arrowRight:\r\n            case keys.arrowDown:\r\n                nextDrag = this.getNextDrag(this.getGroup(drop), currentDrag);\r\n                break;\r\n\r\n            case keys.arrowLeft:\r\n            case keys.arrowUp:\r\n                nextDrag = this.getPreviousDrag(this.getGroup(drop), currentDrag);\r\n                break;\r\n\r\n            case keys.escape:\r\n                break;\r\n\r\n            default:\r\n                questionManager.isKeyboardNavigation = false;\r\n                return; // To avoid the preventDefault below.\r\n        }\r\n\r\n        if (nextDrag.length) {\r\n            nextDrag.data('isfocus', true);\r\n            nextDrag.addClass('beingdragged');\r\n            var hiddenDrag = this.getDragClone(nextDrag);\r\n            if (hiddenDrag.length) {\r\n                if (nextDrag.hasClass('infinite')) {\r\n                    var noOfDrags = this.noOfDropsInGroup(this.getGroup(nextDrag));\r\n                    var cloneDrags = this.getInfiniteDragClones(nextDrag, false);\r\n                    if (cloneDrags.length < noOfDrags) {\r\n                        var cloneDrag = nextDrag.clone();\r\n                        cloneDrag.removeClass('beingdragged');\r\n                        cloneDrag.removeAttr('tabindex');\r\n                        hiddenDrag.after(cloneDrag);\r\n                        questionManager.addEventHandlersToDrag(cloneDrag);\r\n                        nextDrag.offset(cloneDrag.offset());\r\n                    } else {\r\n                        hiddenDrag.addClass('active');\r\n                        nextDrag.offset(hiddenDrag.offset());\r\n                    }\r\n                } else {\r\n                    hiddenDrag.addClass('active');\r\n                    nextDrag.offset(hiddenDrag.offset());\r\n                }\r\n            }\r\n        } else {\r\n            drop.data('isfocus', true);\r\n        }\r\n\r\n        e.preventDefault();\r\n        this.sendDragToDrop(nextDrag, drop);\r\n    };\r\n\r\n    /**\r\n     * Choose the next drag in a group.\r\n     *\r\n     * @param {int} group which group.\r\n     * @param {jQuery} drag current choice (empty jQuery if there isn't one).\r\n     * @return {jQuery} the next drag in that group, or null if there wasn't one.\r\n     */\r\n    DragDropToTextQuestion.prototype.getNextDrag = function(group, drag) {\r\n        var choice,\r\n            numChoices = this.noOfChoicesInGroup(group);\r\n\r\n        if (drag.length === 0) {\r\n            choice = 1; // Was empty, so we want to select the first choice.\r\n        } else {\r\n            choice = this.getChoice(drag) + 1;\r\n        }\r\n\r\n        var next = this.getUnplacedChoice(group, choice);\r\n        while (next.length === 0 && choice < numChoices) {\r\n            choice++;\r\n            next = this.getUnplacedChoice(group, choice);\r\n        }\r\n\r\n        return next;\r\n    };\r\n\r\n    /**\r\n     * Choose the previous drag in a group.\r\n     *\r\n     * @param {int} group which group.\r\n     * @param {jQuery} drag current choice (empty jQuery if there isn't one).\r\n     * @return {jQuery} the next drag in that group, or null if there wasn't one.\r\n     */\r\n    DragDropToTextQuestion.prototype.getPreviousDrag = function(group, drag) {\r\n        var choice;\r\n\r\n        if (drag.length === 0) {\r\n            choice = this.noOfChoicesInGroup(group);\r\n        } else {\r\n            choice = this.getChoice(drag) - 1;\r\n        }\r\n\r\n        var previous = this.getUnplacedChoice(group, choice);\r\n        while (previous.length === 0 && choice > 1) {\r\n            choice--;\r\n            previous = this.getUnplacedChoice(group, choice);\r\n        }\r\n\r\n        // Does this choice exist?\r\n        return previous;\r\n    };\r\n\r\n    /**\r\n     * Animate an object to the given destination.\r\n     *\r\n     * @param {jQuery} drag the element to be animated.\r\n     * @param {jQuery} target element marking the place to move it to.\r\n     */\r\n    DragDropToTextQuestion.prototype.animateTo = function(drag, target) {\r\n        var currentPos = drag.offset(),\r\n            targetPos = target.offset(),\r\n            thisQ = this;\r\n\r\n        M.util.js_pending('qtype_ddwtos-animate-' + thisQ.containerId);\r\n        // Animate works in terms of CSS position, whereas locating an object\r\n        // on the page works best with jQuery offset() function. So, to get\r\n        // the right target position, we work out the required change in\r\n        // offset() and then add that to the current CSS position.\r\n        drag.animate(\r\n            {\r\n                left: parseInt(drag.css('left')) + targetPos.left - currentPos.left,\r\n                top: parseInt(drag.css('top')) + targetPos.top - currentPos.top\r\n            },\r\n            {\r\n                duration: 'fast',\r\n                done: function() {\r\n                    $('body').trigger('qtype_ddwtos-dragmoved', [drag, target, thisQ]);\r\n                    M.util.js_complete('qtype_ddwtos-animate-' + thisQ.containerId);\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Detect if a point is inside a given DOM node.\r\n     *\r\n     * @param {Number} pageX the x position.\r\n     * @param {Number} pageY the y position.\r\n     * @param {jQuery} drop the node to check (typically a drop).\r\n     * @return {boolean} whether the point is inside the node.\r\n     */\r\n    DragDropToTextQuestion.prototype.isPointInDrop = function(pageX, pageY, drop) {\r\n        var position = drop.offset();\r\n        return pageX >= position.left && pageX < position.left + drop.width()\r\n                && pageY >= position.top && pageY < position.top + drop.height();\r\n    };\r\n\r\n    /**\r\n     * Set the value of the hidden input for a place, to record what is currently there.\r\n     *\r\n     * @param {int} place which place to set the input value for.\r\n     * @param {int} choice the value to set.\r\n     */\r\n    DragDropToTextQuestion.prototype.setInputValue = function(place, choice) {\r\n        this.getRoot().find('input.placeinput.place' + place).val(choice);\r\n    };\r\n\r\n    /**\r\n     * Get the outer div for this question.\r\n     *\r\n     * @returns {jQuery} containing that div.\r\n     */\r\n    DragDropToTextQuestion.prototype.getRoot = function() {\r\n        return $(document.getElementById(this.containerId));\r\n    };\r\n\r\n    /**\r\n     * Get drag home for a given choice.\r\n     *\r\n     * @param {int} group the group.\r\n     * @param {int} choice the choice number.\r\n     * @returns {jQuery} containing that div.\r\n     */\r\n    DragDropToTextQuestion.prototype.getDragHome = function(group, choice) {\r\n        if (!this.getRoot().find('.draghome.dragplaceholder.group' + group + '.choice' + choice).is(':visible')) {\r\n            return this.getRoot().find('.draggrouphomes' + group +\r\n                ' span.draghome.infinite' +\r\n                '.choice' + choice +\r\n                '.group' + group);\r\n        }\r\n        return this.getRoot().find('.draghome.dragplaceholder.group' + group + '.choice' + choice);\r\n    };\r\n\r\n    /**\r\n     * Get an unplaced choice for a particular group.\r\n     *\r\n     * @param {int} group the group.\r\n     * @param {int} choice the choice number.\r\n     * @returns {jQuery} jQuery wrapping the unplaced choice. If there isn't one, the jQuery will be empty.\r\n     */\r\n    DragDropToTextQuestion.prototype.getUnplacedChoice = function(group, choice) {\r\n        return this.getRoot().find('.draghome.group' + group + '.choice' + choice + '.unplaced').slice(0, 1);\r\n    };\r\n\r\n    /**\r\n     * Get the drag that is currently in a given place.\r\n     *\r\n     * @param {int} place the place number.\r\n     * @return {jQuery} the current drag (or an empty jQuery if none).\r\n     */\r\n    DragDropToTextQuestion.prototype.getCurrentDragInPlace = function(place) {\r\n        return this.getRoot().find('span.draghome.inplace' + place);\r\n    };\r\n\r\n    /**\r\n     * Return the number of blanks in a given group.\r\n     *\r\n     * @param {int} group the group number.\r\n     * @returns {int} the number of drops.\r\n     */\r\n    DragDropToTextQuestion.prototype.noOfDropsInGroup = function(group) {\r\n        return this.getRoot().find('.drop.group' + group).length;\r\n    };\r\n\r\n    /**\r\n     * Return the number of choices in a given group.\r\n     *\r\n     * @param {int} group the group number.\r\n     * @returns {int} the number of choices.\r\n     */\r\n    DragDropToTextQuestion.prototype.noOfChoicesInGroup = function(group) {\r\n        return this.getRoot().find('.draghome.group' + group).length;\r\n    };\r\n\r\n    /**\r\n     * Return the number at the end of the CSS class name with the given prefix.\r\n     *\r\n     * @param {jQuery} node\r\n     * @param {String} prefix name prefix\r\n     * @returns {Number|null} the suffix if found, else null.\r\n     */\r\n    DragDropToTextQuestion.prototype.getClassnameNumericSuffix = function(node, prefix) {\r\n        var classes = node.attr('class');\r\n        if (classes !== undefined && classes !== '') {\r\n            var classesArr = classes.split(' ');\r\n            for (var index = 0; index < classesArr.length; index++) {\r\n                var patt1 = new RegExp('^' + prefix + '([0-9])+$');\r\n                if (patt1.test(classesArr[index])) {\r\n                    var patt2 = new RegExp('([0-9])+$');\r\n                    var match = patt2.exec(classesArr[index]);\r\n                    return Number(match[0]);\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Get the choice number of a drag.\r\n     *\r\n     * @param {jQuery} drag the drag.\r\n     * @returns {Number} the choice number.\r\n     */\r\n    DragDropToTextQuestion.prototype.getChoice = function(drag) {\r\n        return this.getClassnameNumericSuffix(drag, 'choice');\r\n    };\r\n\r\n    /**\r\n     * Given a DOM node that is significant to this question\r\n     * (drag, drop, ...) get the group it belongs to.\r\n     *\r\n     * @param {jQuery} node a DOM node.\r\n     * @returns {Number} the group it belongs to.\r\n     */\r\n    DragDropToTextQuestion.prototype.getGroup = function(node) {\r\n        return this.getClassnameNumericSuffix(node, 'group');\r\n    };\r\n\r\n    /**\r\n     * Get the place number of a drop, or its corresponding hidden input.\r\n     *\r\n     * @param {jQuery} node the DOM node.\r\n     * @returns {Number} the place number.\r\n     */\r\n    DragDropToTextQuestion.prototype.getPlace = function(node) {\r\n        return this.getClassnameNumericSuffix(node, 'place');\r\n    };\r\n\r\n    /**\r\n     * Get drag clone for a given drag.\r\n     *\r\n     * @param {jQuery} drag the drag.\r\n     * @returns {jQuery} the drag's clone.\r\n     */\r\n    DragDropToTextQuestion.prototype.getDragClone = function(drag) {\r\n        return this.getRoot().find('.draggrouphomes' +\r\n            this.getGroup(drag) +\r\n            ' span.draghome' +\r\n            '.choice' + this.getChoice(drag) +\r\n            '.group' + this.getGroup(drag) +\r\n            '.dragplaceholder');\r\n    };\r\n\r\n    /**\r\n     * Get infinite drag clones for given drag.\r\n     *\r\n     * @param {jQuery} drag the drag.\r\n     * @param {Boolean} inHome in the home area or not.\r\n     * @returns {jQuery} the drag's clones.\r\n     */\r\n    DragDropToTextQuestion.prototype.getInfiniteDragClones = function(drag, inHome) {\r\n        if (inHome) {\r\n            return this.getRoot().find('.draggrouphomes' +\r\n                this.getGroup(drag) +\r\n                ' span.draghome' +\r\n                '.choice' + this.getChoice(drag) +\r\n                '.group' + this.getGroup(drag) +\r\n                '.infinite').not('.dragplaceholder');\r\n        }\r\n        return this.getRoot().find('span.draghome' +\r\n            '.choice' + this.getChoice(drag) +\r\n            '.group' + this.getGroup(drag) +\r\n            '.infinite').not('.dragplaceholder');\r\n    };\r\n\r\n    /**\r\n     * Get drop for a given drag and place.\r\n     *\r\n     * @param {jQuery} drag the drag.\r\n     * @param {Integer} currentPlace the current place of drag.\r\n     * @returns {jQuery} the drop's clone.\r\n     */\r\n    DragDropToTextQuestion.prototype.getDrop = function(drag, currentPlace) {\r\n        return this.getRoot().find('.drop.group' + this.getGroup(drag) + '.place' + currentPlace);\r\n    };\r\n\r\n    /**\r\n     * Singleton that tracks all the DragDropToTextQuestions on this page, and deals\r\n     * with event dispatching.\r\n     *\r\n     * @type {Object}\r\n     */\r\n    var questionManager = {\r\n        /**\r\n         * {boolean} used to ensure the event handlers are only initialised once per page.\r\n         */\r\n        eventHandlersInitialised: false,\r\n\r\n        /**\r\n         * {boolean} is mobile.\r\n         */\r\n        isMobile: isMobile(),\r\n\r\n        mobileClickNdrop: {\r\n            currentDrag: null,\r\n            currentDrop: null\r\n        },\r\n\r\n        /**\r\n         * {Object} ensures that the drag event handlers are only initialised once per question,\r\n         * indexed by containerId (id on the .que div).\r\n         */\r\n        dragEventHandlersInitialised: {},\r\n\r\n        /**\r\n         * {boolean} is keyboard navigation or not.\r\n         */\r\n        isKeyboardNavigation: false,\r\n\r\n        /**\r\n         * {DragDropToTextQuestion[]} all the questions on this page, indexed by containerId (id on the .que div).\r\n         */\r\n        questions: {},\r\n\r\n        /**\r\n         * Initialise questions.\r\n         *\r\n         * @param {String} containerId id of the outer div for this question.\r\n         * @param {boolean} readOnly whether the question is being displayed read-only.\r\n         */\r\n        init: function(containerId, readOnly) {\r\n            questionManager.questions[containerId] = new DragDropToTextQuestion(containerId, readOnly);\r\n            if (!questionManager.eventHandlersInitialised) {\r\n                questionManager.setupEventHandlers();\r\n                questionManager.eventHandlersInitialised = true;\r\n            }\r\n            if (!questionManager.dragEventHandlersInitialised.hasOwnProperty(containerId)) {\r\n                questionManager.dragEventHandlersInitialised[containerId] = true;\r\n                // We do not use the body event here to prevent the other event on Mobile device, such as scroll event.\r\n                var questionContainer = document.getElementById(containerId);\r\n                if (questionContainer.classList.contains('ddwtos') &&\r\n                    !questionContainer.classList.contains('qtype_ddwtos-readonly')) {\r\n                    // TODO: Convert all the jQuery selectors and events to native Javascript.\r\n                    questionManager.addEventHandlersToDrag($(questionContainer).find('span.draghome'));\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set up the event handlers that make this question type work. (Done once per page.)\r\n         */\r\n        setupEventHandlers: function() {\r\n            if (questionManager.isMobile) {\r\n                $('body')\r\n                    .on('touchend',\r\n                        '.que.ddwtos:not(.qtype_ddwtos-readonly) span.drop',\r\n                        questionManager.handleMobileDropClick)\r\n                    .on('touchend',\r\n                        '.que.ddwtos:not(.qtype_ddwtos-readonly) span.draghome.placed:not(.beingdragged)',\r\n                        questionManager.handleMobileDropSwapClick)\r\n                    .on('touchend',\r\n                        '.que.ddwtos:not(.qtype_ddwtos-readonly) span.draghome.unplaced',\r\n                        questionManager.handleMobileDragClick)\r\n                    .on('qtype_ddwtos-dragmoved', questionManager.handleDragMoved);\r\n            } else {\r\n                $('body')\r\n                    .on('keydown',\r\n                        '.que.ddwtos:not(.qtype_ddwtos-readonly) span.drop',\r\n                        questionManager.handleKeyPress)\r\n                    .on('keydown',\r\n                        '.que.ddwtos:not(.qtype_ddwtos-readonly) span.draghome.placed:not(.beingdragged)',\r\n                        questionManager.handleKeyPress)\r\n                    .on('qtype_ddwtos-dragmoved', questionManager.handleDragMoved);\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * Binding the drag/touch event again for newly created element.\r\n         *\r\n         * @param {jQuery} element Element to bind the event\r\n         */\r\n        addEventHandlersToDrag: function(element) {\r\n            if (!questionManager.isMobile) {\r\n                // Unbind all the mousedown and touchstart events to prevent double binding.\r\n                element.unbind('mousedown touchstart');\r\n                element.on('mousedown touchstart', questionManager.handleDragStart);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle mouse down / touch start on drags.\r\n         * @param {Event} e the DOM event.\r\n         */\r\n        handleDragStart: function(e) {\r\n            e.preventDefault();\r\n            var question = questionManager.getQuestionForEvent(e);\r\n            if (question) {\r\n                question.handleDragStart(e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle key down / press on drops.\r\n         * @param {KeyboardEvent} e\r\n         */\r\n        handleKeyPress: function(e) {\r\n            if (questionManager.isKeyboardNavigation) {\r\n                return;\r\n            }\r\n            questionManager.isKeyboardNavigation = true;\r\n            var question = questionManager.getQuestionForEvent(e);\r\n            if (question) {\r\n                question.handleKeyPress(e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle mobile click on drops.\r\n         * @param {Event} e\r\n         */\r\n        handleMobileDropClick: function(e) {\r\n            var question = questionManager.getQuestionForEvent(e);\r\n            if (question) {\r\n                question.handleMobileDropClick(e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle mobile click on drops.\r\n         * @param {Event} e\r\n         */\r\n        handleMobileDropSwapClick: function(e) {\r\n            var question = questionManager.getQuestionForEvent(e);\r\n            if (question) {\r\n                question.handleMobileDropSwapClick(e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle mobile click on drags.\r\n         * @param {Event} e\r\n         */\r\n        handleMobileDragClick: function(e) {\r\n            var question = questionManager.getQuestionForEvent(e);\r\n            if (question) {\r\n                question.handleMobileDragClick(e);\r\n            }\r\n        },\r\n\r\n\r\n        /**\r\n         * Given an event, work out which question it affects.\r\n         *\r\n         * @param {Event} e the event.\r\n         * @returns {DragDropToTextQuestion|undefined} The question, or undefined.\r\n         */\r\n        getQuestionForEvent: function(e) {\r\n            var containerId = $(e.currentTarget).closest('.que.ddwtos').attr('id');\r\n            return questionManager.questions[containerId];\r\n        },\r\n\r\n        /**\r\n         * Handle when drag moved.\r\n         *\r\n         * @param {Event} e the event.\r\n         * @param {jQuery} drag the drag\r\n         * @param {jQuery} target the target\r\n         * @param {DragDropToTextQuestion} thisQ the question.\r\n         */\r\n        handleDragMoved: function(e, drag, target, thisQ) {\r\n            drag.removeClass('beingdragged');\r\n            drag.css('top', '').css('left', '');\r\n            target.after(drag);\r\n            target.removeClass('active');\r\n            if (typeof drag.data('unplaced') !== 'undefined' && drag.data('unplaced') === true) {\r\n                drag.removeClass('placed').addClass('unplaced');\r\n                drag.removeAttr('tabindex');\r\n                drag.removeData('unplaced');\r\n                if (drag.hasClass('infinite') && thisQ.getInfiniteDragClones(drag, true).length > 1) {\r\n                    thisQ.getInfiniteDragClones(drag, true).first().remove();\r\n                }\r\n            }\r\n            if (typeof drag.data('isfocus') !== 'undefined' && drag.data('isfocus') === true) {\r\n                drag.focus();\r\n                drag.removeData('isfocus');\r\n            }\r\n            if (typeof target.data('isfocus') !== 'undefined' && target.data('isfocus') === true) {\r\n                target.removeData('isfocus');\r\n            }\r\n            if (questionManager.isKeyboardNavigation) {\r\n                questionManager.isKeyboardNavigation = false;\r\n            }\r\n            if (thisQ.isQuestionInteracted()) {\r\n                // The user has interacted with the draggable items. We need to mark the form as dirty.\r\n                questionManager.handleFormDirty();\r\n                // Save the new answered value.\r\n                thisQ.questionAnswer = thisQ.getQuestionAnsweredValues();\r\n            }\r\n            questionManager.mobileClickNdrop.currentDrag = null;\r\n            questionManager.mobileClickNdrop.currentDrop = null;\r\n\r\n        },\r\n\r\n        /**\r\n         * Handle when the form is dirty.\r\n         */\r\n        handleFormDirty: function() {\r\n            const responseForm = document.getElementById('responseform');\r\n            FormChangeChecker.markFormAsDirty(responseForm);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @alias module:qtype_ddwtos/ddwtos\r\n     */\r\n    return {\r\n        /**\r\n         * Initialise one drag-drop into text question.\r\n         *\r\n         * @param {String} containerId id of the outer div for this question.\r\n         * @param {boolean} readOnly whether the question is being displayed read-only.\r\n         */\r\n        init: questionManager.init\r\n    };\r\n});\r\n"],"names":["define","$","dragDrop","keys","FormChangeChecker","filterEvent","DragDropToTextQuestion","containerId","readOnly","thisQ","this","questionAnswer","questionDragDropWidthHeight","getRoot","addClass","resizeAllDragsAndDrops","cloneDrags","positionDrags","document","addEventListener","eventTypes","filterContentRenderingComplete","elements","detail","nodes","forEach","element","changeAllDragsAndDropsToFilteredContent","prototype","find","each","i","node","resizeAllDragsAndDropsInGroup","getClassnameNumericSuffix","group","dragDropItems","maxWidth","maxHeight","drag","Math","max","ceil","offsetWidth","offsetHeight","setElementSize","filteredElement","currentFilteredItem","parentIsDD","parent","closest","hasClass","isDD","length","getGroup","choice","getChoice","listOfModifiedDragDrop","get","originalClass","attr","originalStyle","filteredDragDropClone","clone","before","push","remove","currentHeight","height","currentWidth","width","classList","add","css","index","draghome","placeHolder","removeClass","root","not","dragNode","currentPlace","removeAttr","inputNode","input","val","place","getPlace","drop","dropPosition","offset","data","top","left","unplacedDrag","getUnplacedChoice","hiddenDrag","getDragClone","noOfDrags","noOfDropsInGroup","getInfiniteDragClones","cloneDrag","after","questionManager","addEventHandlersToDrag","sendDragToDrop","getQuestionAnsweredValues","result","id","value","isQuestionInteracted","oldAnswer","newAnswer","isInteracted","JSON","stringify","Object","key","handleDragStart","e","target","prepare","start","setInputValue","hiddenDrop","getDrop","x","y","dragMove","dragEnd","pageX","pageY","dropNode","isPointInDrop","placed","dropZone","sendDragHome","oldDrag","getCurrentDragInPlace","hasDropSameDrag","focus","animateTo","getDragHome","handleMobileDropClick","mobileClickNdrop","currentDrop","placedDrag","preventDefault","handleMobileDropSwapClick","currentTarget","prev","handleMobileDragClick","currentDrag","handleKeyPress","nextDrag","keyCode","space","arrowRight","arrowDown","getNextDrag","arrowLeft","arrowUp","getPreviousDrag","escape","isKeyboardNavigation","numChoices","noOfChoicesInGroup","next","previous","currentPos","targetPos","M","util","js_pending","animate","parseInt","duration","done","trigger","js_complete","position","getElementById","is","slice","prefix","classes","undefined","classesArr","split","RegExp","test","match","exec","Number","inHome","eventHandlersInitialised","isMobile","navigator","userAgent","dragEventHandlersInitialised","questions","init","setupEventHandlers","hasOwnProperty","questionContainer","contains","on","handleDragMoved","unbind","question","getQuestionForEvent","removeData","first","handleFormDirty","responseForm","markFormAsDirty"],"mappings":"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"}