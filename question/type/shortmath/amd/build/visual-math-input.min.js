define("qtype_shortmath/visual-math-input",["exports","qtype_shortmath/mathquill"],(function(_exports,_mathquill){var obj;function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}function _classPrivateFieldInitSpec(obj,privateMap,value){!function(obj,privateCollection){if(privateCollection.has(obj))throw new TypeError("Cannot initialize the same private elements twice on an object")}(obj,privateMap),privateMap.set(obj,value)}function _classPrivateFieldGet(receiver,privateMap){return function(receiver,descriptor){if(descriptor.get)return descriptor.get.call(receiver);return descriptor.value}(receiver,_classExtractFieldDescriptor(receiver,privateMap,"get"))}function _classPrivateFieldSet(receiver,privateMap,value){return function(receiver,descriptor,value){if(descriptor.set)descriptor.set.call(receiver,value);else{if(!descriptor.writable)throw new TypeError("attempted to set read only private field");descriptor.value=value}}(receiver,_classExtractFieldDescriptor(receiver,privateMap,"set"),value),value}function _classExtractFieldDescriptor(receiver,privateMap,action){if(!privateMap.has(receiver))throw new TypeError("attempted to "+action+" private field on non-instance");return privateMap.get(receiver)}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_mathquill=(obj=_mathquill)&&obj.__esModule?obj:{default:obj};var lastFocusedInput=null,_rawInput=new WeakMap,_mathInput=new WeakMap,_parent=new WeakMap,_mathquillContainer=new WeakMap,_textarea=new WeakMap,Input=function(){function Input(input,inputParent){var _this=this;_classCallCheck(this,Input),_classPrivateFieldInitSpec(this,_rawInput,{writable:!0,value:void 0}),_classPrivateFieldInitSpec(this,_mathInput,{writable:!0,value:void 0}),_classPrivateFieldInitSpec(this,_parent,{writable:!0,value:void 0}),_classPrivateFieldInitSpec(this,_mathquillContainer,{writable:!0,value:void 0}),_classPrivateFieldInitSpec(this,_textarea,{writable:!0,value:void 0}),_classPrivateFieldSet(this,_rawInput,input),_classPrivateFieldSet(this,_parent,"string"==typeof inputParent?input.closest(inputParent):inputParent),_classPrivateFieldSet(this,_mathquillContainer,document.createElement("div")),_classPrivateFieldGet(this,_mathquillContainer).classList.add("visual-math-input-field");var MQ=_mathquill.default.getInterface(2);_classPrivateFieldSet(this,_mathInput,MQ.MathField(_classPrivateFieldGet(this,_mathquillContainer),{spaceBehavesLikeTab:!0,handlers:{edit:function(field){_this.onEdit(_classPrivateFieldGet(_this,_rawInput),field)}}})),this.parent.appendChild(_classPrivateFieldGet(this,_mathquillContainer)),this.onEdit=function($input,field){$input.value="\\[ ".concat(field.latex()," \\]")},_classPrivateFieldSet(this,_textarea,this.parent.querySelector("textarea")),this.textarea.addEventListener("blur",(function(){lastFocusedInput=_this}))}return _createClass(Input,[{key:"parent",get:function(){return _classPrivateFieldGet(this,_parent)}},{key:"textarea",get:function(){return _classPrivateFieldGet(this,_textarea)}},{key:"rawInput",get:function(){return _classPrivateFieldGet(this,_rawInput)}},{key:"mathInput",get:function(){return _classPrivateFieldGet(this,_mathInput)}},{key:"addClass",value:function(className){_classPrivateFieldGet(this,_mathquillContainer).classList.add(className)}},{key:"enable",value:function(){this.textarea.setAttribute("disabled",!1)}},{key:"disable",value:function(){this.textarea.setAttribute("disabled",!0)}}]),Input}(),Control=function(){function Control(name,text,onClick){_classCallCheck(this,Control),function(obj,key,value){key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value}(this,"element",null),this.name=name,this.text=text,this.onClick=onClick,this.boundInput=null}return _createClass(Control,[{key:"bindInput",value:function(input){this.boundInput=input}},{key:"enable",value:function(){var _this2=this;null===this.element&&(this.element=document.createElement("button"),this.element.innerHTML=this.text,this.element.classList.add("visual-math-input-control","mq-math-mode","btn","btn-primary"),this.element.addEventListener("click",(function(event){event.preventDefault(),null!==_this2.getInput()&&(_this2.onClick(_this2.getInput().mathInput),_this2.getInput().mathInput.focus())})))}},{key:"getInput",value:function(){return null!==this.boundInput?this.boundInput:lastFocusedInput}}]),Control}(),ControlList=function(){function ControlList(wrapper){_classCallCheck(this,ControlList),this.wrapper=wrapper,this.wrapper.classList.add("visual-math-input-wrapper"),this.controls=[],this.boundInput=null}return _createClass(ControlList,[{key:"define",value:function(name,text,onClick){this.controls.push(new Control(name,text,onClick))}},{key:"enable",value:function(names){var _this3=this;this.controls.forEach((function(control){-1!==names.indexOf(control.name)&&(null!==_this3.boundInput&&control.bindInput(_this3.boundInput),control.enable(),_this3.wrapper.appendChild(control.element))}))}},{key:"enableAll",value:function(){var _this4=this;this.controls.forEach((function(control){null!==_this4.boundInput&&control.bindInput(_this4.boundInput),control.enable(),_this4.wrapper.appendChild(control.element)}))}},{key:"defineDefault",value:function(){this.define("sqrt",'<span class="mq-root-block">&radic;</span>',(function(field){return field.cmd("\\sqrt")})),this.define("int",'<span class="mq-root-block">&int;</span>',(function(field){return field.cmd("\\int")})),this.define("sum",'<span class="mq-root-block"><span class="mq-large-operator mq-non-leaf">&sum;</span></span>',(function(field){return field.cmd("\\sum")})),this.define("lim",'<span class="mq-root-block">lim</span>',(function(field){field.cmd("\\lim").typedText("_").write("x").cmd("\\to").write("0").moveToRightEnd()})),this.define("nchoosek",'<div class="mq-math-mode" style="cursor:pointer;font-size:100%;">\n            <span class="mq-root-block">\n                <span class="mq-non-leaf">\n                    <span class="mq-paren mq-scaled" style="transform: scale(0.8, 1.5);">(</span>\n                    <span class="mq-non-leaf" style="margin-top:0;">\n                        <span class="mq-array mq-non-leaf">\n                            <span style="font-size: 14px;">\n                                <var>n</var>\n                            </span>\n                            <span style="font-size: 14px;">\n                                <var>k</var>\n                            </span>\n                        </span>\n                    </span>\n                    <span class="mq-paren mq-scaled" style="transform: scale(0.8, 1.5);">)</span>\n                </span>\n            </span>\n        </div>',(function(field){return field.cmd("\\choose")})),this.define("divide",'<span class="mq-root-block">/</span>',(function(field){return field.cmd("\\frac")})),this.define("plusminus",'<span class="mq-root-block">&plusmn;</span>',(function(field){return field.cmd("\\pm")})),this.define("theta",'<span class="mq-root-block">&theta;</span>',(function(field){return field.cmd("\\theta")})),this.define("pi",'<span class="mq-root-block">&pi;</span>',(function(field){return field.cmd("\\pi")})),this.define("infinity",'<span class="mq-root-block">&infin;</span>',(function(field){return field.cmd("\\infinity")})),this.define("caret",'\n        <div class="mq-math-mode" style="cursor:pointer;font-size:100%;">\n            <span class="mq-root-block">\n                <var>x</var>\n                <span class="mq-supsub mq-non-leaf mq-sup-only">\n                    <span class="mq-sup">\n                        <var>y</var>\n                    </span>\n                </span>\n            </span>\n        </div>',(function(field){return field.cmd("^")}))}},{key:"bindInput",value:function(input){this.boundInput=input}}]),ControlList}(),_default={Input:Input,Control:Control,ControlList:ControlList};return _exports.default=_default,_exports.default}));

//# sourceMappingURL=visual-math-input.min.js.map